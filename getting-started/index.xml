<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Getting Started on Ogmios</title><link>https://ogmios.dev/getting-started/</link><description>Recent content in Getting Started on Ogmios</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 25 Oct 2020 16:33:22 +0100</lastBuildDate><atom:link href="https://ogmios.dev/getting-started/index.xml" rel="self" type="application/rss+xml"/><item><title>Docker</title><link>https://ogmios.dev/getting-started/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/getting-started/docker/</guid><description>üê≥ Overview The easiest way to get started with Ogmios is to use docker. This guide won&amp;rsquo;t cover installing docker, so make sure you have the Docker daemon installed and running.
Ogmios docker images come in two flavours: cardano-node-ogmios and ogmios. The former is used to run a single container that bundles both a Cardano-node and an Ogmios server running side-by-side. It is likely the easiest way to get started. The latter is a standalone Ogmios server, and you&amp;rsquo;ll need to run that container in orchestration with a cardano-node; this is made relatively easy with Docker compose.</description></item><item><title>Building</title><link>https://ogmios.dev/getting-started/building/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/getting-started/building/</guid><description>You may skip this section if you&amp;rsquo;re using Docker üê≥.
Pre-requisites Ogmios is built using the great Haskell build tool stack. You&amp;rsquo;ll also need git to clone the source code, that is:
git 2.11.* stack 2.*.* Ogmios in itself is a rather small project, yet it&amp;rsquo;s using library directly from the ouroboros-network, cardano-ledger-specs and cardano-node projects. This is handy for re-using existing logic, but comes at the cost of several system dependencies that are required for building everything.</description></item><item><title>Testing</title><link>https://ogmios.dev/getting-started/testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/getting-started/testing/</guid><description>You may skip this section if you&amp;rsquo;re not interested in contributing to Ogmios.
üîß Unit Tests First, make sure to pull and update git submodules:
$ git submodule update --init Then, simply use stack as follows:
$ stack test ogmios:unit üí® Smoke Tests Run the whole components stack using docker-compose as follows:
$ docker-compose up Assuming the default configuration, Ogmios should be listening on :1337. Make sure that cardano-node is up-and-running and has finished its bootstraping phase (Ogmios should no longer print any warnings about HealthFailedToConnect).</description></item><item><title>Monitoring</title><link>https://ogmios.dev/getting-started/monitoring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/getting-started/monitoring/</guid><description>Dashboard Ogmios offers a simple dashboard through HTTP with a real-time visualization of some of the server runtime metrics. If you&amp;rsquo;ve Ogmios up-and-running on the default port, visit http://localhost:1337 to view Ogmios' dashboard.
Health / Metrics Behind the scene, the dashboard is powered by metrics served over HTTP as JSON by the server. Reach /health (e.g. http://localhost:1337/health to get real-time information about your running server, including runtime metrics.
$ curl -H 'Accept: application/json' http://localhost:1337/health { &amp;#34;metrics&amp;#34;: { &amp;#34;totalUnrouted&amp;#34;: 1, &amp;#34;totalMessages&amp;#34;: 30029, &amp;#34;runtimeStats&amp;#34;: { &amp;#34;gcCpuTime&amp;#34;: 1233009354, &amp;#34;cpuTime&amp;#34;: 81064672549, &amp;#34;maxHeapSize&amp;#34;: 41630, &amp;#34;currentHeapSize&amp;#34;: 1014 }, &amp;#34;totalConnections&amp;#34;: 10, &amp;#34;sessionDurations&amp;#34;: { &amp;#34;max&amp;#34;: 57385, &amp;#34;mean&amp;#34;: 7057, &amp;#34;min&amp;#34;: 0 }, &amp;#34;activeConnections&amp;#34;: 0 }, &amp;#34;startTime&amp;#34;: &amp;#34;2021-03-15T16:16:41.</description></item><item><title>Basics</title><link>https://ogmios.dev/getting-started/basics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/getting-started/basics/</guid><description>JSON-WSP Ogmios' interface is built on top of JSON-WSP which is a tiny standard to give some structure to the various messages that can be exchanged with Ogmios. The standard specifies a top-level JSON envelope by which messages must abide, as well as a semantic for some of the fields. In particular, there are 4 types of messages possible in JSON-WSP:
descriptions requests responses faults (which are a special kind of responses).</description></item></channel></rss>