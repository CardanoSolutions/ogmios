<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Getting started on Ogmios</title><link>https://ogmios.dev/getting-started/</link><description>Recent content in Getting started on Ogmios</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 25 Oct 2020 16:33:22 +0100</lastBuildDate><atom:link href="https://ogmios.dev/getting-started/index.xml" rel="self" type="application/rss+xml"/><item><title>Building / Installation</title><link>https://ogmios.dev/getting-started/building/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/getting-started/building/</guid><description>You may skip this section if you&amp;rsquo;re using Docker üê≥.
With Homebrew Ogmios is readily available and distributed through Homebrew. Simply do:
brew tap CardanoSolutions/formulas brew install ogmios Pre-compiled static executable All Ogmios releases comes with downloadable pre-compiled static executables for Linux (amd64 &amp;amp; arm64). If you like living on the edge and wants to access a not-yet-released executable, see the continuous integration workflow on Github. Build artifacts are indeed continuously produced though this automated workflow.</description></item><item><title>Configuring</title><link>https://ogmios.dev/getting-started/configuring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/getting-started/configuring/</guid><description>Ogmios comes with a few options that are all configurable via the command-line. Default values for those options are meant to provide sensible behaviors that are expected in most cases. However, some cases may not fit your particular use-case so we recommend skimming through this short manual to understand what is configurable and the effect it has on the server.
Logging &amp;amp; minimum severity levels Ogmios comes with a multi-component tracing system, which lets you configure the minimum logging severity of various internal components:</description></item><item><title>Running with Docker</title><link>https://ogmios.dev/getting-started/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/getting-started/docker/</guid><description>üê≥ Overview The easiest way to get started with Ogmios is to use docker. This guide won&amp;rsquo;t cover installing docker, so make sure you have the Docker daemon installed and running.
Ogmios docker images come in two flavours: cardano-node-ogmios and ogmios. The former is used to run a single container that bundles both a Cardano-node and an Ogmios server running side-by-side. It is likely the easiest way to get started. The latter is a standalone Ogmios server, and you&amp;rsquo;ll need to run that container in orchestration with a cardano-node; this is made relatively easy with Docker compose.</description></item><item><title>Monitoring</title><link>https://ogmios.dev/getting-started/monitoring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/getting-started/monitoring/</guid><description>Dashboard Ogmios offers a simple dashboard through HTTP with a real-time visualization of some of the server runtime metrics. If you&amp;rsquo;ve Ogmios up-and-running on the default port, visit http://localhost:1337 to view Ogmios' dashboard.
Health / Metrics Behind the scene, the dashboard is powered by metrics served over HTTP as JSON by the server. Reach /health (e.g. http://localhost:1337/health to get real-time information about your running server, including runtime metrics.
$ curl -H 'Accept: application/json' http://localhost:1337/health { &amp;#34;metrics&amp;#34;: { &amp;#34;totalUnrouted&amp;#34;: 1, &amp;#34;totalMessages&amp;#34;: 30029, &amp;#34;runtimeStats&amp;#34;: { &amp;#34;gcCpuTime&amp;#34;: 1233009354, &amp;#34;cpuTime&amp;#34;: 81064672549, &amp;#34;maxHeapSize&amp;#34;: 41630, &amp;#34;currentHeapSize&amp;#34;: 1014 }, &amp;#34;totalConnections&amp;#34;: 10, &amp;#34;sessionDurations&amp;#34;: { &amp;#34;max&amp;#34;: 57385, &amp;#34;mean&amp;#34;: 7057, &amp;#34;min&amp;#34;: 0 }, &amp;#34;activeConnections&amp;#34;: 0 }, &amp;#34;startTime&amp;#34;: &amp;#34;2021-03-15T16:16:41.</description></item><item><title>Using: JSON-RPC basics</title><link>https://ogmios.dev/getting-started/basics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/getting-started/basics/</guid><description>JSON-RPC Ogmios' interface is built on top of JSON-RPC 2.0 which is a tiny standard to give some structure to the various messages that can be exchanged with Ogmios. The standard specifies a top-level JSON envelope by which messages must abide, as well as a semantic for some of the fields. It well suited for request/response types of protocols, such as any of the Ouroboros mini-protocols spoken by Ogmios.
We won&amp;rsquo;t be covering the JSON-RPC standard in this guide but gives a few extra insights about how it relates to Ogmios and some good takes from it.</description></item></channel></rss>