[{"uri":"https://ogmios.dev/getting-started/","title":"Getting started","tags":[],"description":"","content":"Getting started Find in this section information about building and running Ogmios. This will cover installation from both sources and docker 🐳, as well as details about options and configuration for running Ogmios.\nIf you want to get started right away, you can use one of our starter kit for TypeScript. It\u0026rsquo;ll teach you the basics through end-to-end examples. Using VSCode? Make it even easier by using a cloud-based environment on demeter.run👇.\n\n"},{"uri":"https://ogmios.dev/getting-started/building/","title":"Building / Installation","tags":[],"description":"","content":" You may skip this section if you\u0026rsquo;re using Docker 🐳.\n With Homebrew Ogmios is readily available and distributed through Homebrew. Simply do:\nbrew tap CardanoSolutions/formulas brew install ogmios Pre-compiled static executable All Ogmios releases comes with downloadable pre-compiled static executables for Linux (amd64 \u0026amp; arm64). If you like living on the edge and wants to access a not-yet-released executable, see the continuous integration workflow on Github. Build artifacts are indeed continuously produced though this automated workflow. Find them at the bottom of any workflow run:\nBuilding manually Pre-requisites (Server) Ogmios is built using the great Haskell build tool cabal. You\u0026rsquo;ll also need git to clone the source code, that is:\n git 2.11.* cabal 3.6.*.* and higher ghc \u0026gt;=9.4.8 \u0026amp;\u0026amp; \u0026lt;9.6  We recommend using GHCup to install cabal \u0026amp; the Haskell platform.\n Ogmios is using library directly from the ouroboros-network, cardano-ledger and cardano-node projects. This is handy for re-using existing logic, but comes at the cost of several system dependencies that are required for building everything. Some may already be installed on your system, but the complete list is:\n libffi-dev libgmp-dev 6.1.* libnuma-dev libpcre3-dev 2.8.* (for Mac OS, see below) libssl-dev 1.1.* libsystemd-dev llvm 1.11.* llvm-11-dev pkg-config 0.29.* zlib1g-dev 1.2.* libsodium-dev 1.0.* with VRF support (see below) secp256k1 (see below) blst (see below)  libsodium with VRF support A special patched version of libsodium to include VRF support. Note that, while this is necessary to run a validator node; it is not necessary for a simple application node serving data to your client. So here, it suffices to install libsodium-dev 1.0.*, and to add/create the following to your cabal.project.local (to be placed next to the current cabal.project:\npackage cardano-crypto-praos flags: -external-libsodium-vrf secp256k1 A custom revision of bitcoin-core\u0026rsquo;s secp256k1, with Schnorr signature support enabled:\n autoconf 2.* libtool 2.*.*  git clone https://github.com/bitcoin-core/secp256k1.git cd secp256k1 git reset --hard ac83be33d0956faf6b7f61a60ab524ef7d6a473a ./autogen.sh ./configure --prefix=/usr --enable-module-schnorrsig --enable-experimental make make check sudo make install blst A fancy crypto library for BLS12-381, a.k.a BLST:\ngit clone https://github.com/supranational/blst cd blst git checkout v0.3.10 ./build.sh cat \u0026gt; libblst.pc \u0026lt;\u0026lt; EOF prefix=/usr/local exec_prefix=\\${prefix} libdir=\\${exec_prefix}/lib includedir=\\${prefix}/include Name: libblst Description: Multilingual BLS12-381 signature library URL: https://github.com/supranational/blst Version: 0.3.10 Cflags: -I\\${includedir} Libs: -L\\${libdir} -lblst EOF sudo cp libblst.pc /usr/local/lib/pkgconfig/ sudo cp bindings/blst_aux.h bindings/blst.h bindings/blst.hpp /usr/local/include/ sudo cp libblst.a /usr/local/lib sudo chmod u=rw,go=r /usr/local/{lib/{libblst.a,pkgconfig/libblst.pc},include/{blst.{h,hpp},blst_aux.h}} pcre (MacOS) On MacOS only, you might need to specify extra lib \u0026amp; include directories for pcre depending on your installation. For example, if you used Homebrew with defaults, add the followings to your cabal.project.local:\npackage pcre-light extra-include-dirs: /opt/homebrew/opt/pcre/include extra-lib-dirs: /opt/homebrew/opt/pcre/lib 🔨 Server Clone the git repository from Github:\n$ git clone --depth 1 --recursive --shallow-submodules git@github.com:cardanosolutions/ogmios.git $ cd ogmios/server Then, use cabal to compile the project source code from the server directory:\n$ cabal update $ cabal build ogmios:exe:ogmios The first time, this may take a while as cabal needs to setup a compilation environment and to download a lot of dependencies. Subsequent executions are much faster.\nFrom there, you can run Ogmios via cabal using the run command:\n$ cabal run ogmios:exe:ogmios -- --help Alternatively, you can instrument cabal to copy the compiled executable elsewhere so that you can run Ogmios all by itself:\n$ cabal install ogmios:exe:ogmios --install-method=copy --overwrite-policy=always $ ogmios --help 🔨 TypeScript Client Clone the git repository from Github:\n$ git clone --depth 1 --recursive --shallow-submodules git@github.com:cardanosolutions/ogmios.git $ cd ogmios/clients/TypeScript Then, use Yarn to install dependencies and compile the project source code from the client/TypeScript directory:\n$ yarn \u0026amp;\u0026amp; yarn build 📚 Documentation The documentation is built using Hugo. You\u0026rsquo;ll need an -extended version of hugo with version \u0026gt;= 0.96.0. Then, simply run:\nhugo # or, alternatively for a development setup on http://localhost:1313 hugo serve in the ./docs folder.\nIn addition, the TypeScript API reference can be generated using yarn docs from within the client/TypeScript folder. This will automatically create and copy files in the right folder for hugo to pick up.\nTesting You may skip this section if you\u0026rsquo;re not interested in contributing to Ogmios.\n 🔧 Unit Tests First, make sure to pull and update git submodules:\n$ git submodule update --init Then, simply use cabal as follows:\n$ cabal test all 💨 End-to-end Tests Pre-requisites  A synchronized node running on the preview network. Ogmios running and listening on :1337.  Running the tests From the project root, run:\n$ cd clients/TypeScript $ yarn $ yarn test "},{"uri":"https://ogmios.dev/mini-protocols/local-chain-sync/","title":"Chain synchronization","tags":[],"description":"","content":"START ⇓ ┌───────────────┐ │ Idle │⇒ DONE └───────┬───────┘ │ │ findIntersection │ │ │ findIntersection │ ╭───────╮ ▼ │ │ ┌───────────┴───┐ │ │ Initialized │◀──╯ └───┬───────────┘ │ ▲ nextBlock │ │ ╰───────╯   Overview Clients that wish to synchronise blocks from the Cardano chain can use the chain synchronization mini-protocol.\nThe protocol is stateful, which means that each connection between clients and Ogmios has a state: a cursor locating a point on the chain. Typically, a client will start by looking for an intersection between its own local chain and the one from the node / Ogmios. Then, it\u0026rsquo;ll simply request the next action to take: either rolling forward and adding new blocks, or rolling backward.\nHow To Use When a connection is opened with Ogmios, it automatically starts a chain synchronization session with the underlying cardano-node. There\u0026rsquo;s an implicit state maintained by the node which one can imagine as a cursor, pointing to a point on the Cardano chain. Initially, this cursor starts at a special point called: origin (as in, the origin of the chain). After each request, the node will move the cursor either forward or backward and remembers its location for the next request. To move the cursor, the protocols gives two mechanisms: nextBlock and findIntersection.\n____ ____ ____ ____ ____ ____ / /\\ / /\\ / /\\ / /\\ / /\\ / /\\ o === /____/ \\ === /____/ \\ === /____/ \\ === /____/ \\ === /____/ \\ === /____/ \\ == ... \\ \\ / \\ \\ / \\ \\ / \\ \\ / \\ \\ / \\ \\ / \\____\\/ \\____\\/ \\____\\/ \\____\\/ \\____\\/ \\____\\/ ^ | | origin \n Requesting next blocks Clients may ask for the next block where \u0026lsquo;next\u0026rsquo; refers directly to that implicit cursor. This translates to a message with nextBlock as a method name. This request does not accept any arguments (i.e. `params).\n{ \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;nextBlock\u0026#34; } As a response, Ogmios will send back a response which can instruct you either to roll forward or to roll backward. Rolling forward is pretty straightforward and is the main type of response one can expect; such response will include the next block, which itself includes a header, transactions, certificates, metadata and all sort of information.\nRolling backward however may occur when, since the last request, the underlying node decided to switch to a different fork of the chain to the extent that the previous cursor is no longer pointing to a block that exists on the chain. The node therefore asks (kindly) to roll backward to a previously known point that is the earliest ancestor that is common between the client\u0026rsquo;s own chain locally and the one that was just adopted by the node.\n____ ____ / /\\ / /\\ /____/ \\ === /____/ \\ (node's chain) \\ \\ / \\ \\ / / \\____\\/ \\____\\/ / ____ ____ / ____ ____ / /\\ / /\\ / / /\\ / /\\ === /____/ \\ === /____/ \\ =.= /____/ \\ === /____/ \\ (local chain) \\ \\ / \\ \\ / ^ \\ \\ / \\ \\ / \\____\\/ \\____\\/ | \\____\\/ \\____\\/ |  | common chain prefix | | point of rollback   When rolling backward, the node will not provide a block but instead, a point which is made of a block id and a slot.\nAs a client, it is therefore crucial to be able to rollback to a previous point of the chain. In practice, Ouroboros guarantees that forks cannot be longer than a certain length. This maximum length is called k in the Ouroboros protocol, and also known as the security parameter.\n Pipelining Ogmios will do its best to pipeline requests to the Cardano node. Yet unlike WebSocket, the chain synchronization protocol only allows for finite pipelining. Said differently, Ogmios cannot pipeline an arbitrary and potentially infinite number of requests and will actually starts collecting responses if too many requests are pipelined. Pipelining with WebSocket is however straightforward for most clients permit sending many requests at once and handle responses using callbacks on event handlers.\nTo leverage pipelining using the WebSocket, you will need send multiple requests at once and have your client handler send new requests for each response. Behind the scene, the server will translate that to explicit pipelining with the cardano-node and maximize the bandwith utilization. Note that you also probably want to send requests for the next message before you even start processing the last received message. This permits the server to start working on fetching and sending you the next result while you process the current one.\nconst nextBlock = JSON.stringify({ \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;nextBlock\u0026#34;, }); client.on(\u0026#39;open\u0026#39;, () =\u0026gt; { // Burst the server\u0026#39;s queue with a few requests.  for (let i = 0; i \u0026lt; 100; i += 1) { client.send(nextBlock); } }); client.on(\u0026#39;message\u0026#39;, msg =\u0026gt; { client.send(nextBlock); // Ask for next request immediately  doSomething(msg); })  How many requests to pipeline depends on your application and machine resources. If you\u0026rsquo;re pipelining many requests in a client application, make sure to also take times to collect and handle responses because there will be no extra benefits coming from too much pipelining. A good rule of thumb on most standard machines is to pipeline 50-100 requests.\n Finding an intersection On the first connection with the node, clients will likely synchronize from the origin. Yet, on subsequent connections one may want to resume syncing to a point that is much more recent than the origin. Ideally, one would like to carry on exactly at the point where the chain was left yet as we just saw, this is not always possible. The chain synchronization protocol gives however clients a way to find a common intersection between a client\u0026rsquo;s current version of the chain and whatever version the node has. This is via the findIntersection method. This method accepts one argument which is a list of points (or the special keyword \u0026quot;origin\u0026quot;).\n{ \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;findIntersection\u0026#34;, \u0026#34;params\u0026#34;: { \u0026#34;points\u0026#34;: [ { \u0026#34;slot\u0026#34;: 39916796, \u0026#34;id\u0026#34;: \u0026#34;e72579ff89dc9ed325b723a33624b596c08141c7bd573ecfff56a1f7229e4d09\u0026#34; }, { \u0026#34;slot\u0026#34;: 23068793, \u0026#34;id\u0026#34;: \u0026#34;69c44ac1dda2ec74646e4223bc804d9126f719b1c245dadc2ad65e8de1b276d7\u0026#34; }, \u0026#34;origin\u0026#34; ] } } If an intersection is found, great, the node will set the cursor to that point and let you know. If not, the cursor will remain where it was and the failure will also be broadcast. As we\u0026rsquo;ve seen in the previous section, a node may switch to longer forks based quite arbitrarily. Hence, a good list of intersections candidates is preferably dense near the tip of the chain, and goes far back in the past (k is typically not enough).\nFor example, imagine the following scenario:\n Local chain: [P01,P02,P03,..,P98,P99A,P100A] Node\u0026rsquo;s chain: [P01,P02,P03,..,P98,P99B,P100B]  As a client, providing any point before or at P98 will result in finding an intersection. Yet, if one only provides [P99A, P100A], the node will not be able to figure out where to continue the protocol and will remain at the origin.\nThe order of the list matters! The node will intersect with the best match, considering that the preferred points are first in the list. If one provides origin as a first point, an intersection is guaranteed to always find a match, and always at origin (and that is quite useless!).\n Points of interest For several applications, it may be quite useful to know the last point of each era; This allows to start syncing blocks from the beginning of a particular era. For instance, after seeking an intersection with the last point of the Shelley, nextBlock would yield the first block of the Allegra era. Handy!\nMainnet Preview Preprod     Era Bound Block Number Absolute Slot Number Block Header Hash     Last Byron block 4490510  4492799 f8084c61b6a238acec985b59310b6ecec49c0ab8352249afd7268da5cff2a457   Last Shelley block 5086523  16588737 4e9bbbb67e3ae262133d94c3da5bffce7b1127fc436e7433b87668dba34c354a   Last Allegra block 5406746  23068793 69c44ac1dda2ec74646e4223bc804d9126f719b1c245dadc2ad65e8de1b276d7   Last Mary block 6236059  39916796 e72579ff89dc9ed325b723a33624b596c08141c7bd573ecfff56a1f7229e4d09   Last Alonzo block 7791698  72316796 c58a24ba8203e7629422a24d9dc68ce2ed495420bf40d9dab124373655161a20   Last Babbage block N/A N/A N/A        Era Bound Block Number Absolute Slot Number Block Header Hash     Last Byron block N/A N/A N/A   Last Shelley block N/A N/A N/A   Last Allegra block N/A N/A N/A   Last Mary block N/A N/A N/A   Last Alonzo block 13011  259180 0ad91d3bbe350b1cfa05b13dba5263c47c5eca4f97b3a3105eba96416785a487   Last Babbage block N/A N/A N/A        Era Bound Block Number Absolute Slot Number Block Header Hash     Last Byron block 45  84242 45899e8002b27df291e09188bfe3aeb5397ac03546a7d0ead93aa2500860f1af   Last Shelley block 21644  518360 f9d8b6c77fedd60c3caf5de0ce63a0aeb9d1753269c9c07503d9aa09d5144481   Last Allegra block 43242  950340 74c03af754bcde9cd242c5a168689edcab1756a3f7ae4d5dca1a31d86839c7b1   Last Mary block 64902  1382348 af5fddc7d16a349e1a2af8ba89f4f5d3273955a13095b3709ef6e3db576a0b33   Last Alonzo block 172497  3542390 f93e682d5b91a94d8660e748aef229c19cb285bfb9830db48941d6a78183d81f   Last Babbage block N/A N/A N/A       Remember also that \u0026quot;origin\u0026quot; is a special point whichs refers to the beginning of the blockchain; An intersection with \u0026quot;origin\u0026quot; will always be found.\n Full example Let\u0026rsquo;s see a full example that is synchronizing the first 14 blocks of the Shelley chain and printing them to the console.\nconst WebSocket = require(\u0026#39;ws\u0026#39;); const client = new WebSocket(\u0026#34;ws://localhost:1337\u0026#34;); function rpc(method, params, id) { client.send(JSON.stringify({ jsonrpc: \u0026#34;2.0\u0026#34;, method, params, id })); } client.once(\u0026#39;open\u0026#39;, () =\u0026gt; { const lastByronBlock = { slot: 4492799, id: \u0026#34;f8084c61b6a238acec985b59310b6ecec49c0ab8352249afd7268da5cff2a457\u0026#34; }; rpc(\u0026#34;findIntersection\u0026#34;, { points: [lastByronBlock] }, \u0026#34;find-intersection\u0026#34;); }); client.on(\u0026#39;message\u0026#39;, function(msg) { const response = JSON.parse(msg); switch (response.id) { case \u0026#34;find-intersection\u0026#34;: if (!response.result.intersection) { throw \u0026#34;Whoops? Last Byron block disappeared?\u0026#34; } rpc(\u0026#34;nextBlock\u0026#34;, {}, 14); break; default: if (response.result.direction === \u0026#34;forward\u0026#34;) { console.log(response.result); } if (response.id \u0026gt; 0) { rpc(\u0026#34;nextBlock\u0026#34;, {}, response.id - 1); } else { client.close(); } break; } }); A few important takes from this excerpt:\n  The node streams blocks that are after the intersection point. Thus to get the first 14 Shelley blocks, one needs to set the intersection at the last Byron block!\n  After successfully finding an intersection, the node will always ask to roll backward to that intersection point. This is because it is possible to provide many points when looking for an intersection and the protocol makes sure that both the node and the client are in sync. This allows clients applications to be somewhat \u0026ldquo;dumb\u0026rdquo; and blindly follow instructions from the node.\n  In this schema, we are sending each request one-by-one, using the id field as counter. An alternative could have been:\nswitch (response.id) { case \u0026#34;find-intersection\u0026#34;: if (!response.result.intersection) { throw \u0026#34;Whoops? Last Byron block disappeared?\u0026#34; } for (let i = 14; i \u0026gt; 0; i += 1) { rpc(\u0026#34;nextBlock\u0026#34;); } break; ... } We need not to wait for replies to send requests and can collect all responses at a later stage!\n  Errors Errors from the chain synchronization protocol are in the range 1000-1999 and are listed below.\n #asyncapi #introduction, #asyncapi #schemas  h2 { display: none; } #asyncapi .panel-item--center.px-8, #asyncapi .aui-root .py-8, #asyncapi .aui-root .mt-16 { padding: 0; margin: 0; }     AsyncApiStandalone.render({ config: { show: { messages: false }, }, schema: \"\\nasyncapi: '2.4.0'\\ninfo:\\n title: \\\"\\\"\\n version: '6.0.0'\\nservers: {}\\nchannels: {}\\ncomponents:\\n schemas:\\n 1000/IntersectionNotFound:\\n $ref: \\\"/ogmios.json#/properties/FindIntersectionResponse/oneOf/1/properties/error\\\"\\n 1001/IntersectionInterleaved:\\n $ref: \\\"/ogmios.json#/properties/FindIntersectionResponse/oneOf/2/properties/error\\\"\\n\", }, document.getElementById('asyncapi'));  API Reference The complete description of the mempool monitoring requests and responses can be found in the API reference.\nPlus, test vectors are available on the repository for testing, debugging and to serve as examples.\n"},{"uri":"https://ogmios.dev/getting-started/configuring/","title":"Configuring","tags":[],"description":"","content":"Ogmios comes with a few options that are all configurable via the command-line. Default values for those options are meant to provide sensible behaviors that are expected in most cases. However, some cases may not fit your particular use-case so we recommend skimming through this short manual to understand what is configurable and the effect it has on the server.\nLogging \u0026amp; minimum severity levels Ogmios comes with a multi-component tracing system, which lets you configure the minimum logging severity of various internal components:\nEach component can be configured separately with a minimum severity level amongst the following values:\n Debug: enable all the component\u0026rsquo;s logs, sometimes useful for troubleshooting a transient issue; Info: enable only most important logs, helpful for monitoring the application; Notice: enable only special logs for uncommon, albeit normal, operations; Warning: enable only warnings, which often indicates that something is about to go wrong in the system; Error: enable only error logs, when something has actually gone wrong; Off: simply turn logging off for that component.  Usually, you\u0026rsquo;d want to use Debug or Info as a minimal severity since more information is always good when troubleshooting problems. Ogmios uses Info by default for all components.\n Here\u0026rsquo;s a table summarizing the logging options:\n   Option Description     --log-level SEVERITY A shorthand that configures the severity levels of ALL components at once.   --log-level-health SEVERITY Configure min severity level for the health sub-system that is periodically printing information about the state of the server.   --log-level-metrics SEVERITY Configure min severity level for the system metrics, mostly only used to print warnings \u0026amp; notices on start-up.   --log-level-websocket SEVERITY Configure min severity level for the component managing the incoming websocket connections to the server.   --log-level-server SEVERITY Configure min severity level for the HTTP server managing direct connections via HTTP.   --log-level-options SEVERITY Configure min severity level for anything regarding the server\u0026rsquo;s configuration and options.    For example, if you want to completely disable the health logging and increase the websocket minimum severity you can use the following options:\nogmios --log-level-health Off \\ --log-level-websocket Debug \\ ... CBOR outputs in responses For some objects, Ogmios may conditionally include their CBOR-serialized representation in the response, encoded as a base16 text string. This is particularly useful when there exists multiple possible binary representations of those objects, and knowing the original bytes may be necessary to carry out specific operations (such as calculating a hash digest). There are currently three objects that can be configured to always include their CBOR representation: transaction, (native) scripts and metadatums.\n   Flag Description     --include-cbor A shorthand to turn all three other flags on at once.   --include-transaction-cbor Always include a cbor field on transaction objects   --include-metadata-cbor Always include a cbor field on metadatum objects   --include-script-cbor Always include a cbor field on native scripts (already included for Plutus scripts)    Metadata schema To keep things simple, Cardano tools oscillate between 2 (or actually 3, but let\u0026rsquo;s not dwell on that right now) metadata formats. One is called the metadata \u0026ldquo;no-schema\u0026rdquo; and the other one is called the \u0026ldquo;detailed schema\u0026rdquo;. In fact, metadata are encoded on-chain as a collection of CBOR objects abiding by a specific schema. Like JSON, CBOR is a self-describing structured serialization format which shares some overlaps with JSON. Thus, a subset of all the representable CBOR metadata can be translated as JSON metadata. For example, a plain CBOR text string can easily be turned into a JSON string, and a CBOR list of integers can also easily become a JSON list of integers.\n  Default (no schema) --metadata-detailed-schema    [1, 2, 3]   { \u0026#34;list\u0026#34;: [ { \u0026#34;int\u0026#34;: 1 } , { \u0026#34;int\u0026#34;: 2 } , { \u0026#34;int\u0026#34;: 3 } ] }    This type of direct conversions is referred to as the \u0026ldquo;no-schema\u0026rdquo; conversion. Yet, it only works for compatible objects. Indeed, some CBOR-serialized data cannot be directly mapped into JSON. For example, CBOR can use plain maps or lists as objects keys; whereas JSON only ever supports text strings as object keys. To ensure that any CBOR value could be represented in JSON, another transformation was defined as the detailed schema. In a detailed schema, we no longer try to map the CBOR representation into JSON, but we use JSON to describe the shape of the CBOR data using a small domain-specific language designed for that purpose.\nWhile this approach is more verbose, it allows for representing any binary metadata as JSON. However, since many DApp developers coming from JavaScript/TypeScript will usually produce JSON-compatible metadata, the no-schema format is applicable in many cases. Ogmios therefore uses no-schema as a default (falling back to plain CBOR when the conversion isn\u0026rsquo;t possible). The behavior can be altered to use the detailed schema by passing the flag --metadata-detailed-schema.\nStrict JSON-RPC The specification for JSON-RPC 2.0 is relatively lenient/ambiguous regarding the presence of extra fields in the request / response payloads. Ogmios in particular adds an extra method to the responses so that they can easily be traced back to the responses. However, some libraries that implement JSON-RPC clients are quite strict and do not expect any fields other than those mentioned in the specs (thus preventing useful extensions!).\nOgmios, therefore, provides a flag --strict-rpc to disable the extra field in responses thus ensuring compliance with those stricter libraries.\n"},{"uri":"https://ogmios.dev/mini-protocols/local-state-query/","title":"Ledger state queries","tags":[],"description":"","content":"queryLedgerState/* START queryNetwork/* ⇓ ╭────╮ releaseLedgerState ┌──────────────┴┐ │ ╭─────▶│ Idle │◀──╯ │ └───────┬───────┘ │ │ │ │ acquireLedgerState │ │ │ │ (re)acquireLedgerState │ ▼ ╭────────╮ │ ┌──────────┴────┐ │ ╰──────┤ Acquired │◀──╯ └───┬───────────┘ │ ▲ queryLedgerState/* │ │ queryNetwork/* │ │ ╰───────╯   Overview The state query protocol is likely the most versatile of the three Ouroboros mini-protocols. As a matter of fact, it allows for querying various types of information directly from the ledger. In essence, it is like a very simpler request/response pattern where the types of questions one can ask are specified by the protocols. Those questions include: information about the chain tip, information about stake pools but also the balance of a particular address.\nIn order to run a question by the ledger, one must first acquire a particular position on the chain, so that the node can reliably answer a few questions on a chosen, frozen state while continuing maintaining more recent version of the ledger on the side. It is important to note that:\n  The node cannot acquire any arbitrary state. One can only rewind up to a certain point.\n  Should a client keep a state acquired for too long, it is likely to become unreachable at some point, forcing clients to re-acquire.\n  How to use Ogmios uses a simplified version of the above state-machine. Or more exactly, it exposes a simplified version and handles some of the complexity behind the scene for you. As clients, Ogmios will give you method to acquire a state, query that state and release the state. A typical sequence would be to start by acquiring a state on a given point and then make a few queries, and then release. The release step is optional although it is a bit more polite to say goodbye at the end of a conversation.\nIt is also possible to submit queries directly without acquiring. As a consequence, Ogmios will acquire the tip of the chain, run the query and release it for you. This is the easiest way to send queries if you don\u0026rsquo;t care about capturing a particular state. Note however that this may create race conditions if you send multiple queries via this method. Indeed, the tip is changing quite often on the network, and two subsequent queries may actually run on two different points of the chain. While this is generally safe for most queries, it may also put your application in an unexpected state when crossing epoch boundaries or hard-forks.\nAcquiring a state The acquireLedgerState method expects one argument named point. The point has the same format as points in the chain synchronization protocol. That is, they can be block header hashes or the special keyword \u0026quot;origin\u0026quot; (though there\u0026rsquo;s very little chance that one will be able to acquire the origin!).\n{ \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;acquireLedgerState\u0026#34;, \u0026#34;params\u0026#34;: { \u0026#34;point\u0026#34;: { \u0026#34;slot\u0026#34;: 1234, \u0026#34;hash\u0026#34;: \u0026#34;9e871633f7aa356ef11cdcabb6fdd6d8f4b00bc919c57aed71a91af8f86df590\u0026#34; } } } One thing that doesn\u0026rsquo;t strike as obvious is that, as clients, you need points to query any information. There are many ways to get those hashes but in the context of Ogmios, the most logical way is via the chain synchronization protocol.\nYou can acquire multiple times, the last one will prevail. If you need to re-acquire, simply send another acquire request.\n You can skip acquiring a state should you want to run a query on the current state of the chain. This is good for one-off queries, but if you need to chain multiple queries together it is highly recommended to acquire a state first to preserve data-consistency between queries!\n Querying There are many queries that can be sent to the ledger, and the list is growing days after days as the Cardano team implements new ones. With Ogmios, all queries follow the same pattern and are identified by a method. There exists two types of queries: ledger-state queries and network queries. The former is performed on the ledger state and are era-dependent. The latter are always available (even when the node is synchronizing) and are era-independent. In both cases, queries are constructed in a similar fashion:\n queryLedgerState/*, where * has to be replaced with an actual ledger-state query name (see below); queryNetwork/*, where * has to be replaced with an actual network query name (see below)  For example, to query the ongoing epoch of the ledger:\n{ \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;method\u0026quot;: \u0026quot;queryLedgerState/epoch\u0026quot;, } Network At the moment of writing this guide, the following queries are available:\n   queryNetwork Information     blockHeight The chain\u0026rsquo;s highest block number.   genesisConfiguration Get the genesis configuration of a specific era.   startTime The chain\u0026rsquo;s start time (UTC).   tip The network\u0026rsquo;s current tip.    Ledger-state    queryLedgerState Information     constitution The on-chain constitution.   constitutionalCommittee A complete summary of the constitutional committee.   epoch The current epoch of the ledger.   eraStart The information regarding the beginning of the current ledger era.   eraSummaries Era bounds and slot parameters details, required for proper slotting arithmetic.   governanceProposals Currently active governance proposals and their ratification state (i.e. votes).   liveStakeDistribution Distribution of the stake across all known stake pools, relative to the total stake in the network.   projectedRewards The projected rewards of an account in a context where the top stake pools are fully saturated. This projection gives, in principle, a ranking of stake pools that maximizes delegator rewards.   protocolParameters The current protocol parameters.   proposedProtocolParameters The last update proposal w.r.t. protocol parameters, if any.   rewardAccountSummaries Current delegation settings and rewards of chosen reward accounts.   rewardsProvenance Get details about rewards calculation for the ongoing epoch.   stakePools The list of all currently registered and active stake pools with their current parameters. This query can be made with or without specifying list of target stakePools. When no stake pools are provided as parameter, the query returns the list of all stake pools and their parameters from the node.   tip The current tip the ledger is at. Said differently, the slot number and header hash of the last block that has been processed by the ledger.   treasuryAndReserves The Ada value of the treasury and reserves of the protocol.   utxo Current UTXO, possibly filtered by output reference.    To know more about arguments and results of each query, have a look at the API reference.\n Simplified example In this example, we\u0026rsquo;ll consider a simple direct query on the network tip to fetch the latest protocol parameters. The next section gives a more elaborate example which shows how to acquire a specific point on chain.\nconst WebSocket = require(\u0026#39;ws\u0026#39;); const client = new WebSocket(\u0026#34;ws://localhost:1337\u0026#34;); function rpc(method, params = {}, id) { client.send(JSON.stringify({ jsonrpc: \u0026#34;2.0\u0026#34;, method, params, id })); } client.once(\u0026#39;open\u0026#39;, () =\u0026gt; { rpc(\u0026#34;queryLedgerState/protocolParameters\u0026#34;); }); client.on(\u0026#39;message\u0026#39;, function(msg) { const response = JSON.parse(msg); console.log(JSON.stringify(response.result, null, 4)); client.close(); }); This little excerpt outputs the most recent protocol parameters in a nice JSON:\n{ \u0026#34;minFeeCoefficient\u0026#34;: 44, \u0026#34;minFeeConstant\u0026#34;: { \u0026#34;lovelace\u0026#34;: 155381 }, \u0026#34;maxBlockBodySize\u0026#34;: { \u0026#34;bytes\u0026#34;: 90112 }, \u0026#34;maxBlockHeaderSize\u0026#34;: { \u0026#34;bytes\u0026#34;: 1100 }, \u0026#34;maxTransactionSize\u0026#34;: { \u0026#34;bytes\u0026#34;: 16384 }, \u0026#34;stakeCredentialDeposit\u0026#34;: { \u0026#34;lovelace\u0026#34;: 2000000 }, \u0026#34;stakePoolDeposit\u0026#34;: { \u0026#34;lovelace\u0026#34;: 500000000 }, \u0026#34;stakePoolRetirementEpochBound\u0026#34;: 18, \u0026#34;desiredNumberOfStakePools\u0026#34;: 500, \u0026#34;stakePoolPledgeInfluence\u0026#34;: \u0026#34;3/10\u0026#34;, \u0026#34;monetaryExpansion\u0026#34;: \u0026#34;3/1000\u0026#34;, \u0026#34;treasuryExpansion\u0026#34;: \u0026#34;1/5\u0026#34;, \u0026#34;minStakePoolCost\u0026#34;: { \u0026#34;lovelace\u0026#34;: 340000000 }, \u0026#34;minUtxoDepositConstant\u0026#34;: 0, \u0026#34;minUtxoDepositCoefficient\u0026#34;: 4310, \u0026#34;plutusCostModels\u0026#34;: { \u0026#34;plutus:v1\u0026#34;: [ 205665, 812, 1, 1, 1000, 571, 0, 1, 1000, 24177, 4, 1, 1000, 32, 117366, 10475, 4, 23000, 100, 23000, 100, 23000, 100, 23000, 100, 23000, 100, 23000, 100, 100, 100, 23000, 100, 19537, 32, 175354, 32, 46417, 4, 221973, 511, 0, 1, 89141, 32, 497525, 14068, 4, 2, 196500, 453240, 220, 0, 1, 1, 1000, 28662, 4, 2, 245000, 216773, 62, 1, 1060367, 12586, 1, 208512, 421, 1, 187000, 1000, 52998, 1, 80436, 32, 43249, 32, 1000, 32, 80556, 1, 57667, 4, 1000, 10, 197145, 156, 1, 197145, 156, 1, 204924, 473, 1, 208896, 511, 1, 52467, 32, 64832 ], \u0026#34;plutus:v2\u0026#34;: [ 205665, 812, 1, 1, 1000, 571, 0, 1, 1000, 24177, 4, 1, 1000, 32, 117366, 10475, 4, 23000, 100, 23000, 100, 23000, 100, 23000, 100, 23000, 100, 23000, 100, 100, 100, 23000, 100, 19537, 32, 175354, 32, 46417, 4, 221973, 511, 0, 1, 89141, 32, 497525, 14068, 4, 2, 196500, 453240, 220, 0, 1, 1, 1000, 28662, 4, 2, 245000, 216773, 62, 1, 1060367, 12586, 1, 208512, 421, 1, 187000, 1000, 52998, 1, 80436, 32, 43249, 32, 1000, 32, 80556, 1, 57667, 4, 1000, 10, 197145, 156, 1, 197145, 156, 1, 204924, 473, 1, 208896, 511, 1, 52467, 32, 64832 ] }, \u0026#34;scriptExecutionPrices\u0026#34;: { \u0026#34;memory\u0026#34;: \u0026#39;577/10000\u0026#39;, \u0026#34;cpu\u0026#34;: \u0026#39;721/10000000\u0026#39; }, \u0026#34;maxExecutionUnitsPerTransaction\u0026#34;: { \u0026#34;memory\u0026#34;: 14000000, \u0026#34;cpu\u0026#34;: 10000000000 }, \u0026#34;maxExecutionUnitsPerBlock\u0026#34;: { \u0026#34;memory\u0026#34;: 62000000, \u0026#34;cpu\u0026#34;: 20000000000 }, \u0026#34;maxValueSize\u0026#34;: { \u0026#34;bytes\u0026#34;: 5000 }, \u0026#34;collateralPercentage\u0026#34;: 150, \u0026#34;maxCollateralInputs\u0026#34;: 3, \u0026#34;version\u0026#34;: { \u0026#34;major\u0026#34;: 8, \u0026#34;minor\u0026#34;: 0 } } Full example Let\u0026rsquo;s see a full example getting the stake distribution of all stake pools of the Cardano mainnet. In the example, we\u0026rsquo;ll also use a network query to find the current chain tip, and then try to acquire it for subsequent queries.\nconst WebSocket = require(\u0026#39;ws\u0026#39;); const client = new WebSocket(\u0026#34;ws://localhost:1337\u0026#34;); function rpc(method, params = {}, id) { client.send(JSON.stringify({ jsonrpc: \u0026#34;2.0\u0026#34;, method, params, id })); } client.once(\u0026#39;open\u0026#39;, () =\u0026gt; { rpc(\u0026#34;queryNetwork/tip\u0026#34;, {}) }); client.on(\u0026#39;message\u0026#39;, function(msg) { const response = JSON.parse(msg); switch (response.method) { case \u0026#34;queryNetwork/tip\u0026#34;: const point = response.result; rpc(\u0026#34;acquireLedgerState\u0026#34;, { point }); break; case \u0026#34;acquireLedgerState\u0026#34;: rpc(\u0026#34;queryLedgerState/liveStakeDistribution\u0026#34;); break; default: console.log(response.result); client.close(); break; } }); Here\u0026rsquo;s a walk-though describing what happens when running the above script:\n  An initial request ask the network tip. That is guaranteed to succeed and is a little trick in order to access the ledger tip easily. As a response, Ogmios replies with:\n  Got network tip   { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;queryNetwork/tip\u0026#34;, \u0026#34;result\u0026#34;: { \u0026#34;tip\u0026#34;: { \u0026#34;hash\u0026#34;: \u0026#34;dbafebb0146b2ec45186dfba6c287ad69c83d3fd9a186b39d99ab955631539e0\u0026#34;, \u0026#34;slot\u0026#34;: 12526684 } }, \u0026#34;id\u0026#34;: \u0026#34;get-network-tip\u0026#34; }      Using the tip from the previous response, we can now safely aquire a state on that particular tip which we know exists and is not too old. Ogmios replies successfully with:\n  Acquired ledger state   { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;acquireLedgerState\u0026#34;, \u0026#34;result\u0026#34;: { \u0026#34;acquired\u0026#34;: \u0026#34;ledgerState\u0026#34;, \u0026#34;point\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;dbafebb0146b2ec45186dfba6c287ad69c83d3fd9a186b39d99ab955631539e0\u0026#34;, \u0026#34;slot\u0026#34;: 12526684 } }, \u0026#34;id\u0026#34;: \u0026#34;acquire-network-tip\u0026#34; }      Now in a position to make an actual query, we do it and ask for the stake distribution across all stake pools. The (truncated) response from the server looks like:\n  Query response   { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;queryLedgerState/liveStakeDistribution\u0026#34;, \u0026#34;result\u0026#34;: { \u0026#34;liveStakeDistribution\u0026#34;: { \u0026#34;pool1w3s6gk83y2g3670emy3yfjw9myz3u4whph7peah653rmsfegyj3\u0026#34;: { \u0026#34;stake\u0026#34;: 0, \u0026#34;vrf\u0026#34;: \u0026#34;29c1a293c550beea756bc0c01416bacd7030ae8992e13ca242d4d6c2aebaac0d\u0026#34; }, \u0026#34;pool1n5shd9xdt4s2gm27fxcnuejaqhhmpepn6chw2c82kqnuzdtpsem\u0026#34;: { \u0026#34;stake\u0026#34;: 0.00003058882418046271, \u0026#34;vrf\u0026#34;: \u0026#34;7e363eb8bfd8fef018da4c397d6a6ec25998363434e92276e40ee6c706da3ae5\u0026#34; }, \u0026#34;...\u0026#34; } } }      Be aware that it is possible for an acquire request to fail even if (and in particular if) made immediately after finding the ledger tip. In Ouroboros Praos frequent small rollbacks of the chain are not rare and the few last blocks of the chain can be a bit volatile. A real application may require more elaborate error handling than the toy example above.\n Example queries Network constitution { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;queryLedgerState/constitution\u0026#34;, \u0026#34;result\u0026#34;: { \u0026#34;metadata\u0026#34;: { \u0026#34;url\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;hash\u0026#34;: \u0026#34;0000000000000000000000000000000000000000000000000000000000000000\u0026#34; }, \u0026#34;guardrails\u0026#34;: null }, \u0026#34;id\u0026#34;: null } constitutionalCommittee { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;queryLedgerState/constitutionalCommittee\u0026#34;, \u0026#34;result\u0026#34;: { \u0026#34;members\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;5f1b4429fe3bda963a7b70ab81135112a785afcf55ccd695b122e794\u0026#34;, \u0026#34;delegate\u0026#34;: { \u0026#34;status\u0026#34;: \u0026#34;authorized\u0026#34;, \u0026#34;credential\u0026#34;: \u0026#34;5aa349227e4068c85c03400396bcea13c7fd57d0ec78c604bc768fc5\u0026#34; }, \u0026#34;status\u0026#34;: \u0026#34;active\u0026#34;, \u0026#34;mandate\u0026#34;: { \u0026#34;epoch\u0026#34;: 379 } }, { \u0026#34;id\u0026#34;: \u0026#34;9393c87a66b1f7dd4f9b486a49232de92e39e18b3b20ac4a539b4df2\u0026#34;, \u0026#34;delegate\u0026#34;: { \u0026#34;status\u0026#34;: \u0026#34;authorized\u0026#34;, \u0026#34;credential\u0026#34;: \u0026#34;670994283668cea40218e0ef33c51aff39ca00a74f68ed428cf305ce\u0026#34; }, \u0026#34;status\u0026#34;: \u0026#34;active\u0026#34;, \u0026#34;mandate\u0026#34;: { \u0026#34;epoch\u0026#34;: 379 } }, { \u0026#34;id\u0026#34;: \u0026#34;b7bfc26ddc6718133a204af6872149b69de83dd3350f60b257e55773\u0026#34;, \u0026#34;delegate\u0026#34;: { \u0026#34;status\u0026#34;: \u0026#34;none\u0026#34; }, \u0026#34;status\u0026#34;: \u0026#34;active\u0026#34;, \u0026#34;mandate\u0026#34;: { \u0026#34;epoch\u0026#34;: 379 } } ], \u0026#34;quorum\u0026#34;: \u0026#34;2/3\u0026#34; }, \u0026#34;id\u0026#34;: null } blockHeight { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;queryNetwork/blockHeight\u0026#34; } genesisConfiguration { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;queryNetwork/genesisConfiguration\u0026#34;, \u0026#34;params\u0026#34;: { \u0026#34;era\u0026#34;: \u0026#34;shelley\u0026#34; } } { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;queryNetwork/genesisConfiguration\u0026#34;, \u0026#34;params\u0026#34;: { \u0026#34;era\u0026#34;: \u0026#34;alonzo\u0026#34; } } startTime { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;queryNetwork/startTime\u0026#34; } tip { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;queryNetwork/tip\u0026#34; } Ledger-state constitution { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;queryLedgerState/constitution\u0026#34; } epoch { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;queryLedgerState/epoch\u0026#34; } eraStart { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;queryLedgerState/eraStart\u0026#34; } eraSummaries { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;queryLedgerState/eraSummaries\u0026#34; } governanceProposals { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;queryLedgerState/governanceProposals\u0026#34; } { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;queryLedgerState/governanceProposals\u0026#34;, \u0026#34;params\u0026#34;: { \u0026#34;proposals\u0026#34;: [ { \u0026#34;transaction\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;ee155ace9c40292074cb6aff8c9ccdd273c81648ff1149ef36bcea6ebb8a3e25\u0026#34; }, \u0026#34;index\u0026#34;: 2 } ] } } liveStakeDistribution { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;queryLedgerState/liveStakeDistribution\u0026#34; } projectedRewards { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;queryLedgerState/projectedRewards\u0026#34;, \u0026#34;params\u0026#34;: { \u0026#34;stake\u0026#34;: [ 1000000 ] } } { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;queryLedgerState/projectedRewards\u0026#34;, \u0026#34;params\u0026#34;: { \u0026#34;keys\u0026#34;: [ \u0026#34;7c16240714ea0e12b41a914f2945784ac494bb19573f0ca61a08afa8\u0026#34;, \u0026#34;stake_vkh10stzgpc5ag8p9dq6j98jj3tcftzffwce2ulsefs6pzh6s39tk6l\u0026#34; ] } } { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;queryLedgerState/projectedRewards\u0026#34;, \u0026#34;params\u0026#34;: { \u0026#34;scripts\u0026#34;: [ \u0026#34;7c16240714ea0e12b41a914f2945784ac494bb19573f0ca61a08afa8\u0026#34;, \u0026#34;script10stzgpc5ag8p9dq6j98jj3tcftzffwce2ulsefs6pzh6snywdma\u0026#34; ] } } protocolParameters { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;queryLedgerState/protocolParameters\u0026#34; } proposedProtocolParameters { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;queryLedgerState/proposedProtocolParameters\u0026#34; } rewardAccountSummaries { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;queryLedgerState/rewardAccountSummaries\u0026#34;, \u0026#34;params\u0026#34;: { \u0026#34;keys\u0026#34;: [ \u0026#34;7c16240714ea0e12b41a914f2945784ac494bb19573f0ca61a08afa8\u0026#34;, \u0026#34;stake_vkh10stzgpc5ag8p9dq6j98jj3tcftzffwce2ulsefs6pzh6s39tk6l\u0026#34; ] } } { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;queryLedgerState/rewardAccountSummaries\u0026#34;, \u0026#34;params\u0026#34;: { \u0026#34;scripts\u0026#34;: [ \u0026#34;7c16240714ea0e12b41a914f2945784ac494bb19573f0ca61a08afa8\u0026#34;, \u0026#34;script10stzgpc5ag8p9dq6j98jj3tcftzffwce2ulsefs6pzh6snywdma\u0026#34; ] } } rewardsProvenance { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;queryLedgerState/rewardsProvenance\u0026#34; } stakePools { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;queryLedgerState/stakePools\u0026#34; } stakePools (filtered) { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;queryLedgerState/stakePools\u0026#34;, \u0026#34;params\u0026#34;: { \u0026#34;stakePools\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;pool1pk2wzarn9mu64eel89dtg3g8h75c84jsy0q349glpsewgd7sdls\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;4acf2773917c7b547c576a7ff110d2ba5733c1f1ca9cdc659aea3a56\u0026#34; } ] } } treasuryAndReserves { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;queryLedgerState/treasuryAndReserves\u0026#34; } ledger tip { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;queryLedgerState/tip\u0026#34; } network tip { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;queryNetwork/tip\u0026#34; } utxo { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;queryLedgerState/utxo\u0026#34; } { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;queryLedgerState/utxo\u0026#34;, \u0026#34;params\u0026#34;: { \u0026#34;outputReferences\u0026#34;: [ { \u0026#34;transaction\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;ee155ace9c40292074cb6aff8c9ccdd273c81648ff1149ef36bcea6ebb8a3e25\u0026#34; }, \u0026#34;index\u0026#34;: 2 } ] } } Errors Errors from the state query protocol are in the range 2000-2999 and are listed below.\n #asyncapi #introduction, #asyncapi #schemas  h2 { display: none; } #asyncapi .panel-item--center.px-8, #asyncapi .aui-root .py-8, #asyncapi .aui-root .mt-16 { padding: 0; margin: 0; }     AsyncApiStandalone.render({ config: { show: { messages: false }, }, schema: \"\\nasyncapi: '2.4.0'\\ninfo:\\n title: \\\"\\\"\\n version: '6.0.0'\\nservers: {}\\nchannels: {}\\ncomponents:\\n schemas:\\n 2000/AcquireFailed:\\n $ref: \\\"/ogmios.json#/properties/AcquireLedgerStateFailure/properties/error\\\"\\n 2001/EraMismatch:\\n $ref: \\\"/ogmios.json#/properties/QueryLedgerStateEraMismatch/properties/error\\\"\\n 2002/UnavailableInCurrentEra:\\n $ref: \\\"/ogmios.json#/properties/QueryLedgerStateUnavailableInCurrentEra/properties/error\\\"\\n 2003/AcquireExpired:\\n $ref: \\\"/ogmios.json#/properties/QueryLedgerStateAcquiredExpired/properties/error\\\"\\n 2004/InvalidGenesis:\\n $ref: \\\"/ogmios.json#/properties/QueryNetworkInvalidGenesis/properties/error\\\"\\n\", }, document.getElementById('asyncapi'));  API Reference The complete description of the mempool monitoring requests and responses can be found in the API reference.\nPlus, test vectors are available on the repository for testing, debugging and to serve as examples.\n"},{"uri":"https://ogmios.dev/mini-protocols/","title":"Mini-Protocols","tags":[],"description":"","content":"Mini-Protocols In this section, we\u0026rsquo;ll give practical insights about interacting with the Ouroboros mini-protocols. Each sub-section will focus on one particular protocol, give an overview and give examples in JavaScript using Ogmios.\n"},{"uri":"https://ogmios.dev/clients/","title":"Clients","tags":[],"description":"","content":"Clients There exists a variety of clients for Ogmios. Initially, the TypeScript client was developed alongside the server as a proof-of-concept. Over time, amazing community members have developed new clients in their favorite languages:\n TypeScript Go Kotlin Java Python Elixir C++  In this manual, we cover some usage of the TypeScript client. For other clients, please refer to their respective projects and maintainers.\n"},{"uri":"https://ogmios.dev/getting-started/docker/","title":"Running with Docker","tags":[],"description":"","content":"🐳 Overview The easiest way to get started with Ogmios is to use docker. This guide won\u0026rsquo;t cover installing docker, so make sure you have the Docker daemon installed and running.\nOgmios docker images come in two flavours: cardano-node-ogmios and ogmios. The former is used to run a single container that bundles both a Cardano-node and an Ogmios server running side-by-side. It is likely the easiest way to get started. The latter is a standalone Ogmios server, and you\u0026rsquo;ll need to run that container in orchestration with a cardano-node; this is made relatively easy with Docker compose.\nImages are uploaded to Dockerhub and are tagged using release versions combined with the supported network name, or with :latest if you\u0026rsquo;re living on the edge. If using the mainnet image you can omit the network name.\n   image repository tags     cardano-node-ogmios cardanosolutions/cardano-node-ogmios latestlatest-{NETWORK}v*.*.*_{CARDANO_NODE_VERSION}v*.*.*_{CARDANO_NODE_VERSION}-{NETWORK}   ogmios cardanosolutions/ogmios latestv*.*.*    Supported NETWORK names:\n mainnet preview preprod  Building images from sources is currently not available. Building is done outside of Docker to produce a binary static executable which is then mounted as an image. Hence, building the docker image assumes that you\u0026rsquo;ve built the application to begin with. The Dockerfile expects a pre-built executable in the folder server/bin. Refer to the next section for building Ogmios. Then simply run docker buildx build --target ogmios to build ogmios' standalone or docker buildx build to build the default cardano-node + ogmios image.\n cardano-node-ogmios (easiest) Running Assuming you\u0026rsquo;ve pulled or build the image (otherwise, see below), you can start a cardano-node with an ogmios server in one single command:\n$ docker run -it \\ --name cardano-node-ogmios \\ -p 1337:1337 \\ -v cardano-node-ogmios-mainnet-db:/db \\ cardanosolutions/cardano-node-ogmios:latest Let\u0026rsquo;s explore a bit the various options:\n  -it is a shorthand for two options -i \u0026amp; -t to enable some interactive support with the container. This is necessary to pass OS signals (e.g. SIGINT from CTRL-C) from the host to the container.\n  --name gives a name to the container, to easily identify it later in commands such as docker container ps.\n  -p instruments docker to bind ports of the container to host. The image exposes 4 ports that can be bound to any (available) port of the host system. Here\u0026rsquo;s the complete list of TCP ports exposed by the image:\n   Port Number Description     1337 Ogmios port, for both the WebSocket and the HTTP server.   3000 cardano-node\u0026rsquo;s relay port   12788 cardano-node\u0026rsquo;s EKG port   12798 cardano-node\u0026rsquo;s Prometheus port      -v mounts a shared volume with the container on your host machine, either via bind mounts or named volumes.\n   Mount Point Description     db Persist the cardano-node\u0026rsquo;s database to avoid re-syncing the chain whenever a new container is run. This is done on every version upgrade and is recommended for most use-cases. Make sure to use different names for different networks as the data aren\u0026rsquo;t compatible between them!   ipc Bind /ipc to get access to the cardano-node\u0026rsquo;s local socket if you use the image in a multi-container stack with an external Haskell client.      Find more about run options in the docker user documentation.\nOgmios standalone (more advanced) Running (bare hands) Assuming that you have a cardano-node running, with its domain socket (node.socket) available under ./ipc, you may start a standalone Ogmios container as follows:\n$ docker run --rm \\ --name ogmios \\ -p 1337:1337 \\ -v ./ipc:/ipc \\ cardanosolutions/ogmios:latest \\ --node-socket /ipc/node.socket \\ --node-config /config/mainnet/cardano-node/config.json \\ --host 0.0.0.0 Note that the --host argument is necessary to bind the server from within the container.\nConfiguration Configuration files are available from within the image under /config in folders named after the supported networks.\n/config ├── mainnet │ ├── cardano-node │ │ ├── config.json │ │ └── topology.json │ └── genesis │ ├── alonzo.json │ ├── byron.json │ ├── conway.json │ └── shelley.json ├── preprod │ ├── cardano-node │ │ ├── config.json │ │ └── topology.json │ └── genesis │ ├── alonzo.json │ ├── byron.json │ ├── conway.json │ └── shelley.json └── preview ├── cardano-node │ ├── config.json │ └── topology.json └── genesis ├── alonzo.json ├── byron.json └── shelley.json Running (docker-compose) Alternatively, you may use Docker\u0026rsquo;s compose to run either Ogmios standalone, or an orchestration of cardano-node and Ogmios talking to each other. Compose is a handy tool to orchestrate multiple services packaged as containers. It works from a compose file which is available in the project repository, get it via:\n$ git clone --depth 1 --recursive --shallow-submodules git@github.com:cardanosolutions/ogmios.git $ cd ogmios Then, starts the components stack using:\n$ docker-compose up 👆This will run and connect:\n A Cardano node, connected to mainnet. An Ogmios server using the latest Dockerhub build, listening to localhost on port: 1337.  Once finish, tear the stack down using:\n$ docker-compose down Configuration The compose file allows for minimal (albeit useful) configuration parameters via environment variables:\n   Variable Description Values Default     NETWORK Which Cardano network to connect to. This impacts both Ogmios and the underlying Cardano node. mainnet, preview, preprod mainnet   OGMIOS_PORT Which ports to listen to (both for WebSockets and health endpoints) Any valid port number. 1337    Ogmios doesn\u0026rsquo;t use any form of persistent storage, but cardano-node does. The mainnet, preview and preprod databases are not compatible, so it is recommended to instrument docker-compose to use different namespaces for different networks (so that you can switch from one another without risking any database conflicts). Compose can do this easily by passing an extra flag: --project-name.\n For example, for running cardano-node + ogmios on the preprod network, listening to tcp/1338, do:\n$ NETWORK=preprod OGMIOS_PORT=1338 docker-compose --project-name cardano-ogmios-preprod up "},{"uri":"https://ogmios.dev/mini-protocols/local-tx-submission/","title":"Transaction submission","tags":[],"description":"","content":"submitTransaction ╭────────╮ START │ │ ⇓ │ │ ┌────────────┴───┐ │ ╭──────┤ Idle │◀───╯ │ └────────────────┘ │ ▲ │ │ ╰────────╯ evaluateTransaction   Overview Transaction submission is pretty simple \u0026amp; works by submitting an already serialized and signed transaction as one single message.\nIn case of success, Ogmios / the node returns an empty response. Otherwise, it returns an error with some details about what went wrong. Clients must thereby know how to construct valid transactions.\nDisclaimer The transaction submission protocol is the simplest one in appearance. It nevertheless requires a quite extensive knowledge of the on-chain data-types used by Cardano. Indeed, the protocol in itself is straightforward so long as you already know how to produce and sign a transaction.\nThis guide doesn\u0026rsquo;t cover the creation and serialization of Cardano transactions. This is a rather vast topic and there is a handful of tools out there to help on the matter already, in particular:\n  Lucid, a TypeScript / Deno package for building transaction and managing credentials. It has direct integration into Ogmios.\n  Mesh.js, a JavaScript library providing numerous tools to easily build powerful dApps on the Cardano blockchain.\n  cardano-cli which offers another command-line interface for constructing and signing transactions.\n  In any case, one can always refer to the source CDDL specifications to know how to construct and serialize Cardano transactions.\nProviding a more user-friendly interface with regards to transactions in Ogmios is still under consideration. Yet, since in order to handle and sign transactions, one needs some knowledge about the on-chain binary format anyway, I\u0026rsquo;ve made the (effortless) choice to only treat with already serialized blobs in Ogmios. I am open to suggestions about how this could be made better, drop me a message on Github if you have ideas!\n Submitting transactions Sending a transaction through the Cardano network requires one message using the method SubmitTx, and with a single mandatory arguments with bytes, representing a serialized signed transactions with its full witness.\nNote that JSON does not support embedding raw bytes in objects. Bytes needs therefore to be base16-encoded.\n{ \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;submitTransaction\u0026#34;, \u0026#34;params\u0026#34;: { \u0026#34;transaction\u0026#34;: { \u0026#34;cbor\u0026#34;: \u0026#34;\u0026lt;base16\u0026gt;\u0026#34; } } } The response will indicate either a success or a failure. In case of failure, Ogmios will return a list of failures reported by the underlying node. Note that, if the transaction fails to parse, Ogmios will reply with a generic error.\nTransactions in Cardano are rather complicated and there are a lot of possible validation errors that can be returned. Be sure to have a look at the API reference for an exhaustive list.\nEvaluating transactions Starting from 5.2.0, Ogmios supports a modified version of the transaction submission protocol that allows to evaluate the execution units of scripts present in a given transaction, without actually submitting the transaction. This is useful for DApp developers who wants a quick-and-easy way to measure script execution costs.\nThe API is purposely similar to the submitTransaction method, with a few semantic changes:\n The transaction needs not to be fully authenticated. Key witnesses may be omitted unless they are relevant to the evaluation of scripts themselves! The transaction needs not to be balanced; indeed, the evaluation does not perform a full execution of all the ledger rules. So while the transaction must be well-formed, it may be invalid with regards to phase-1 validations. Execution budgets assigned to redeemers are expected to be set to zero since the goal of this endpoint is to figure out these very execution budgets.  From there, the endpoint works similarly to the submission:\n{ \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;evaluateTransaction\u0026#34;, \u0026#34;params\u0026#34;: { \u0026#34;transaction\u0026#34;: { \u0026#34;cbor\u0026#34;: \u0026#34;\u0026lt;base16\u0026gt;\u0026#34; } } } Successful responses include a map of redeemer pointers with the corresponding execution units. A redeemer pointer is a key composed of two parts: a redeemer entity tag and a 0-based index related to that entity. There exists 4 kinds of redeemer entities: spend (for transaction inputs), certificate (for transaction certificates), mint (for transaction monetary policies) and withdrawal (for transaction\u0026rsquo;s rewards withdrawals). The index therefore refers to the position of the script-locked entity within the set of entities in the transaction.\nFor example spend:0 points to the first transaction input; mint:2 would point to the 3rd policy referenced in the minting map\u0026hellip; and so forth. Here below is a JSON example of an evaluation result:\n{ \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;evaluateTransaction\u0026#34;, \u0026#34;result\u0026#34;: [{ \u0026#34;validator\u0026#34;: \u0026#34;spend:0\u0026#34;, \u0026#34;budget\u0026#34;: { \u0026#34;memory\u0026#34;: 1700, \u0026#34;cpu\u0026#34;: 476468 } }] } See the full API reference for details about possible errors returned from this endpoint.\nIf you\u0026rsquo;re using typed Plutus validators (if you don\u0026rsquo;t know what that is, then it is most likely what you\u0026rsquo;re using), keep in mind that adding or removing elements to and off your transaction will change its execution cost. Indeed, the creation of the script context passed down to on-chain validators is done as part of the on-chain validator execution. Thus, larger contexts require more execution units!  This is the case for instance when you add a change output to a transaction or, a script integrity hash. A generally good way to approach this problem is to either: 1. make sure that the transaction you evaluate is as close as possible to the final transaction; that is, create dummy change outputs and script integrity hash before evaluating and fill-in their actual value once evaluated;2. keep some safe margin from the evaluated execution units; Execution units are relatively cheap on Cardano so, an extra 5 or 10% isn\u0026rsquo;t much and saves you in most cases a lot of hassle to cope with small differences.\n Additional UTXO Set In order to construct the validator script context, Ogmios needs to resolve transaction inputs from the Cardano blockchain. In case where a submitted transaction refers to non-existing inputs, the evaluation will fail with an UnknownInputs error. This can be an obstacle during development or, in scenarios where transactions are being prepared ahead of UTXO.\nIn such scenarios, Ogmios gives way to provide an additional UTXO set to be used during evaluation. Note that it will still try to resolve inputs that are known, but will use the provided UTXO set as a complement for those that are unknown or yet-to-know.\nThe structure of the additional UTXO set is the same as UTXO sets returned in other part of the Ogmios' API; that is, an array of [OutputReference, Output] tuples.\n For example:\n{ \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;evaluateTransaction\u0026#34;, \u0026#34;params\u0026#34;: { \u0026#34;transaction\u0026#34;: { \u0026#34;cbor\u0026#34;: \u0026#34;\u0026lt;base16\u0026gt;\u0026#34;, }, \u0026#34;additionalUtxoSet\u0026#34;: [ [ { \u0026#34;transaction\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;97b2af6dfc6a4825e934146f424cdd6ede43ff98c355d2ae3aa95b0f70b63949\u0026#34; }, \u0026#34;output\u0026#34;: { \u0026#34;index\u0026#34;: 3 } }, { \u0026#34;address\u0026#34;: \u0026#34;addr_test1qp9zjnc775anpndl0jh3w7vyy25syfezf70d\u0026#34;, \u0026#34;value\u0026#34;: { \u0026#34;lovelace\u0026#34;: 10000000 } } ] ] } } Full Example For what it\u0026rsquo;s worth, here\u0026rsquo;s an example of a transaction submission to the Cardano mainnet via Ogmios. This transaction is using dummy data and will obviously fail. It is however structurally valid, so useful to test if an integration works correctly.\nconst WebSocket = require(\u0026#39;ws\u0026#39;); const client = new WebSocket(\u0026#34;ws://localhost:1337\u0026#34;); function rpc(method, params) { client.send(JSON.stringify({ jsonrpc: \u0026#34;2.0\u0026#34;, method, params })); } client.once(\u0026#39;open\u0026#39;, () =\u0026gt; { const cbor = \u0026#34;83a4008182582000000000000000000000000000000000000000000000000000\u0026#34;+ \u0026#34;0000000000000000018282583901010101010101010101010101010101010101\u0026#34;+ \u0026#34;0101010101010101010101010101010101010101010101010101010101010101\u0026#34;+ \u0026#34;0101010101011a001e8480825839010202020202020202020202020202020202\u0026#34;+ \u0026#34;0202020202020202020202020202020202020202020202020202020202020202\u0026#34;+ \u0026#34;020202020202021a0078175c021a0001faa403191e46a1008182582001000000\u0026#34;+ \u0026#34;000000000000000000000000000000000000000000000000000000005840d7af\u0026#34;+ \u0026#34;60ae33d2af351411c1445c79590526990bfa73cbb3732b54ef322daa142e6884\u0026#34;+ \u0026#34;023410f8be3c16e9bd52076f2bb36bf38dfe034a9f04658e9f56197ab80ff6\u0026#34;; rpc(\u0026#34;submitTransaction\u0026#34;, { transaction: { cbor } }); }); client.on(\u0026#39;message\u0026#39;, function(msg) { const response = JSON.parse(msg); console.log(response); client.close(); }); Errors Errors from the transaction submission protocol are in the range 3000-3999 and are listed below.\n #asyncapi #introduction, #asyncapi #schemas  h2 { display: none; } #asyncapi .panel-item--center.px-8, #asyncapi .aui-root .py-8, #asyncapi .aui-root .mt-16 { padding: 0; margin: 0; }     AsyncApiStandalone.render({ config: { show: { messages: false }, }, schema: \"\\nasyncapi: '2.4.0'\\ninfo:\\n title: \\\"\\\"\\n version: '6.0.0'\\nservers: {}\\nchannels: {}\\ncomponents:\\n schemas:\\n 3000/IncompatibleEra:\\n $ref: \\\"/ogmios.json#/definitions/EvaluateTransactionFailure/oneOf/0\\\"\\n 3001/UnsupportedEra:\\n $ref: \\\"/ogmios.json#/definitions/EvaluateTransactionFailure/oneOf/1\\\"\\n 3002/OverlappingAdditionalUtxo:\\n $ref: \\\"/ogmios.json#/definitions/EvaluateTransactionFailure/oneOf/2\\\"\\n 3003/NodeTipTooOld:\\n $ref: \\\"/ogmios.json#/definitions/EvaluateTransactionFailure/oneOf/3\\\"\\n 3004/CannotCreateEvaluationContext:\\n $ref: \\\"/ogmios.json#/definitions/EvaluateTransactionFailure/oneOf/4\\\"\\n 3005/EraMismatch:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/0\\\"\\n 3010/ScriptExecutionFailure:\\n $ref: \\\"/ogmios.json#/definitions/EvaluateTransactionFailure/oneOf/5\\\"\\n 3011/InvalidRedeemerPointers:\\n $ref: \\\"/ogmios.json#/definitions/ScriptExecutionFailure/oneOf/0\\\"\\n 3012/ValidationFailure:\\n $ref: \\\"/ogmios.json#/definitions/ScriptExecutionFailure/oneOf/1\\\"\\n 3013/UnsuitableOutputReference:\\n $ref: \\\"/ogmios.json#/definitions/ScriptExecutionFailure/oneOf/2\\\"\\n 3100/InvalidSignatories:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/1\\\"\\n 3101/MissingSignatories:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/2\\\"\\n 3102/MissingScripts:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/3\\\"\\n 3103/FailingNativeScript:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/4\\\"\\n 3104/ExtraneousScripts:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/5\\\"\\n 3105/MissingMetadataHash:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/6\\\"\\n 3106/MissingMetadata:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/7\\\"\\n 3107/MetadataHashMismatch:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/8\\\"\\n 3108/InvalidMetadata:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/9\\\"\\n 3109/MissingRedeemers:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/10\\\"\\n 3110/ExtraneousRedeemers:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/11\\\"\\n 3111/MissingDatums:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/12\\\"\\n 3112/ExtraneousDatums:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/13\\\"\\n 3113/ScriptIntegrityHashMismatch:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/14\\\"\\n 3114/OrphanScriptInputs:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/15\\\"\\n 3115/MissingCostModels:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/16\\\"\\n 3116/MalformedScripts:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/17\\\"\\n 3117/UnknownOutputReference:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/18\\\"\\n 3118/OutsideOfValidityInterval:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/19\\\"\\n 3119/TransactionTooLarge:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/20\\\"\\n 3120/ValueTooLarge:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/21\\\"\\n 3121/EmptyInputSet:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/22\\\"\\n 3122/FeeTooSmall:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/23\\\"\\n 3123/ValueNotConserved:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/24\\\"\\n 3124/NetworkMismatch:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/25\\\"\\n 3125/InsufficientlyFundedOutputs:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/26\\\"\\n 3126/BootstrapAttributesTooLarge:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/27\\\"\\n 3127/MintingOrBurningAda:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/28\\\"\\n 3128/InsufficientCollateral:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/29\\\"\\n 3129/CollateralLockedByScript:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/30\\\"\\n 3130/UnforeseeableSlot:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/31\\\"\\n 3131/TooManyCollateralInputs:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/32\\\"\\n 3132/MissingCollateralInputs:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/33\\\"\\n 3133/NonAdaCollateral:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/34\\\"\\n 3134/ExecutionUnitsTooLarge:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/35\\\"\\n 3135/TotalCollateralMismatch:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/36\\\"\\n 3136/SpendsMismatch:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/37\\\"\\n 3137/UnauthorizedVotes:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/38\\\"\\n 3138/UnknownGovernanceProposals:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/39\\\"\\n 3139/InvalidProtocolParametersUpdate:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/40\\\"\\n 3140/UnknownStakePool:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/41\\\"\\n 3141/IncompleteWithdrawals:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/42\\\"\\n 3142/RetirementTooLate:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/43\\\"\\n 3143/StakePoolCostTooLow:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/44\\\"\\n 3144/MetadataHashTooLarge:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/45\\\"\\n 3145/CredentialAlreadyRegistered:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/46\\\"\\n 3146/UnknownCredential:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/47\\\"\\n 3147/NonEmptyRewardAccount:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/48\\\"\\n 3148/InvalidGenesisDelegation:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/49\\\"\\n 3149/InvalidMIRTransfer:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/50\\\"\\n 3150/ForbiddenWithdrawal:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/51\\\"\\n 3151/CredentialDepositMismatch:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/52\\\"\\n 3152/DRepAlreadyRegistered:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/53\\\"\\n 3153/DRepNotRegistered:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/54\\\"\\n 3154/UnknownConstitutionalCommitteeMember:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/55\\\"\\n 3155/GovernanceProposalDepositMismatch:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/56\\\"\\n 3156/ConflictingCommitteeUpdate:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/57\\\"\\n 3157/InvalidCommitteeUpdate:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/58\\\"\\n 3158/TreasuryWithdrawalMismatch:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/59\\\"\\n 3159/InvalidOrMissingPreviousProposals:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/60\\\"\\n 3160/VotingOnExpiredActions:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/61\\\"\\n 3161/ExecutionBudgetOutOfBounds:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/62\\\"\\n 3162/InvalidHardForkVersionBump:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/63\\\"\\n 3163/ConstitutionGuardrailsHashMismatch:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/64\\\"\\n 3164/ConflictingInputsAndReferences:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/65\\\"\\n 3165/UnauthorizedGovernanceAction:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/66\\\"\\n 3166/ReferenceScriptsTooLarge:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/67\\\"\\n 3167/UnknownVoters:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/68\\\"\\n 3168/EmptyTreasuryWithdrawal:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/69\\\"\\n 3997/UnexpectedMempoolError:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/70\\\"\\n 3998/UnrecognizedCertificateType:\\n $ref: \\\"/ogmios.json#/definitions/SubmitTransactionFailure/oneOf/71\\\"\\n\", }, document.getElementById('asyncapi'));  API Reference The complete description of the mempool monitoring requests and responses can be found in the API reference.\nPlus, test vectors are available on the repository for testing, debugging and to serve as examples.\n"},{"uri":"https://ogmios.dev/mini-protocols/local-tx-monitor/","title":"Mempool monitoring","tags":[],"description":"","content":"START ⇓ releaseMempool ┌───────────────┐ ╭─────▶│ Idle │⇒ DONE │ └───────┬───────┘ │ │ │ │ acquireMempool │ │ │ │ │ │ (re)acquireMempool │ │ ╭───────╮ │ ▼ │ │ │ ┌───────────┴───┐ │ ╰──────┤ Acquired │◀──╯ └───┬───────────┘ │ ▲ nextTransaction │ │ hasTransaction │ │ sizeOfMempool │ │ ╰───────╯   Overview To inspect the node\u0026rsquo;s local mempool, one may rely on the mempool monitoring mini-protocol. This protocol provides way to list all transactions sitting in the mempool, but also, to query the size of the mempool, the number of transactions currently in the mempool as well as the current capacity (based on network parameters).\nAs for the other mini-protocols, the mempool monitoring is a stateful protocol with explicit state acquisition driven by the client. That is, clients must first acquire a mempool snapshot for running queries over it. Once acquired, queries are guaranteed to be consistent. In particular, nextTransaction will never yield twice the same transaction for the same snapshot and sizeOfMempool will remain constant.\nacquireMempool is a blocking call. The server will only reply once a \u0026ldquo;new\u0026rdquo; snapshot is available. \u0026ldquo;New\u0026rdquo; means different from the currently acquired snapshot. Seemingly, the first acquireMempool is instantaneous. This allows for clients to passively wait for changes without active polling. A typical pattern of usage would be to acquire a snapshot, list all transactions from the mempool via nextTransaction and then, block on acquireMempool for a change; then repeat.\nHow To Use First, client must always acquire a snapshot and hold onto it for subsequent queries. To list all queries, one must call nextTransaction repeatedly until it yields null. So for instance, if the mempool currently contains three transactions t0, t1 and t2, one can list all transactions from the mempool via the following sequence (schematically):\n 1. acquireMempool → acquireMempoolResponse 2. nextTransaction → nextTransactionResponse t0 3. nextTransaction → nextTransactionResponse t1 4. nextTransaction → nextTransactionResponse t2 5. nextTransaction → nextTransactionResponse null  Another option is simply to query for a specific transaction via hasTransaction, which yields True or False depending on whether the transaction is currently in the mempool or not.\n 1. acquireMempool → acquireMempoolResponse 2. hasTransaction t0 → hasTransactionResponse True 3. hasTransaction t1 → hasTransactionResponse True 4. hasTransaction t5 → hasTransactionResponse False  At any moment, it is also possible to interleave a sizeOfMempool query to get the acquired snapshot\u0026rsquo;s size (in bytes), number of transactions and capacity (in bytes).\nThe capacity refers to the maximum size of the mempool. It is currently defined as twice the network block size and can be adjusted via protocol updates.\n Retrieve Full Transactions Since 5.3.0, Ogmios can also return full transactions as a result of nextTransaction. This must be however explicitly requested from clients by providing an extra (optional) argument to each nextTransaction request:\n{ \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;nextTransaction\u0026#34;, \u0026#34;params\u0026#34;: { \u0026#34;fields\u0026#34;: \u0026#34;all\u0026#34; } } \u0026quot;fields\u0026quot; accept only one value (\u0026quot;all\u0026quot;) and can be omitted. When present, the result from the response will contain a full transaction. When omitted, result will only contains a transaction id.\nImportant Notes Some important notes to keep in mind regarding the management of the mempool:\nAbout Transaction Locality This protocol gives access to transactions that are submitted locally, by the connected client via the transaction submission protocol. In case of block producing nodes (i.e. stake pools), transactions pulled from peers may also be available.\nAbout Transaction Observability The protocol does not guarantee observability of all transactions passing through the mempool. There\u0026rsquo;s an inherent race condition between the client acquiring snapshots and the node managing it internally. Thus, while a client is holding a snapshot, it may still submit transactions through the transaction submission protocol, which may be accepted, processed and included in the ledger before the client next\u0026rsquo;s acquireMempool. So, it is possible for clients to miss transactions passing through the mempool should they be concurrently submitting them.\nAbout Transaction Status Furthermore, while the presence of a transaction in the mempool qualifies it as pending, the absence of transactions in the mempool does not guarantee their inclusion in the ledger (transaction may be discarded from the mempool for various reasons). In particular, a valid transaction may leave the mempool to be included in a block which later result in a lost fork (e.g. because of a lost slot battle) and may never end up in the ledger. The node does not automatically re-insert transactions into the mempool.\nFull Example const WebSocket = require(\u0026#39;ws\u0026#39;); const client = new WebSocket(\u0026#34;ws://localhost:1337\u0026#34;); // Helper function function rpc(method, params) { client.send(JSON.stringify({ jsonrpc: \u0026#39;2.0\u0026#39;, method, params })); } client.on(\u0026#39;message\u0026#39;, e =\u0026gt; { const message = JSON.parse(e); if (message?.result?.transaction === null) { rpc(\u0026#39;acquireMempool\u0026#39;); } else { console.log(message.result); // Returns transaction id  rpc(\u0026#39;nextTransaction\u0026#39;); // Returns all transaction information  // rpc(\u0026#34;nextTransaction\u0026#34;, { fields: \u0026#34;all\u0026#34; });  } }); client.once(\u0026#39;open\u0026#39;, () =\u0026gt; { rpc(\u0026#39;acquireMempool\u0026#39;); }); Errors Errors from the mempool monitoring protocol are in the range 4000-4999 and are listed below.\n #asyncapi #introduction, #asyncapi #schemas  h2 { display: none; } #asyncapi .panel-item--center.px-8, #asyncapi .aui-root .py-8, #asyncapi .aui-root .mt-16 { padding: 0; margin: 0; }     AsyncApiStandalone.render({ config: { show: { messages: false }, }, schema: \"\\nasyncapi: '2.4.0'\\ninfo:\\n title: \\\"\\\"\\n version: '6.0.0'\\nservers: {}\\nchannels: {}\\ncomponents:\\n schemas:\\n 4000/MustAcquireMempoolFirst:\\n $ref: \\\"/ogmios.json#/properties/MustAcquireMempoolFirst/properties/error\\\"\\n\", }, document.getElementById('asyncapi'));  API Reference The complete description of the mempool monitoring requests and responses can be found in the API reference.\nPlus, test vectors are available on the repository for testing, debugging and to serve as examples.\n"},{"uri":"https://ogmios.dev/getting-started/monitoring/","title":"Monitoring","tags":[],"description":"","content":"Dashboard Ogmios offers a simple dashboard through HTTP with a real-time visualization of some of the server runtime metrics. If you\u0026rsquo;ve Ogmios up-and-running on the default port, visit http://localhost:1337 to view Ogmios' dashboard.\nHealth / Metrics Behind the scene, the dashboard is powered by metrics served over HTTP as JSON by the server. Reach /health (e.g. http://localhost:1337/health to get real-time information about your running server, including runtime metrics.\n$ curl -H 'Accept: application/json' http://localhost:1337/health { \u0026#34;metrics\u0026#34;: { \u0026#34;totalUnrouted\u0026#34;: 1, \u0026#34;totalMessages\u0026#34;: 30029, \u0026#34;runtimeStats\u0026#34;: { \u0026#34;gcCpuTime\u0026#34;: 1233009354, \u0026#34;cpuTime\u0026#34;: 81064672549, \u0026#34;maxHeapSize\u0026#34;: 41630, \u0026#34;currentHeapSize\u0026#34;: 1014 }, \u0026#34;totalConnections\u0026#34;: 10, \u0026#34;sessionDurations\u0026#34;: { \u0026#34;max\u0026#34;: 57385, \u0026#34;mean\u0026#34;: 7057, \u0026#34;min\u0026#34;: 0 }, \u0026#34;activeConnections\u0026#34;: 0 }, \u0026#34;startTime\u0026#34;: \u0026#34;2021-03-15T16:16:41.470782977Z\u0026#34;, \u0026#34;lastTipUpdate\u0026#34;: \u0026#34;2021-03-15T16:28:36.853115034Z\u0026#34;, \u0026#34;lastKnownTip\u0026#34;: { \u0026#34;hash\u0026#34;: \u0026#34;c29428f386c701c1d1ba1fd259d4be78921ee9ee6c174eac898245ceb55e8061\u0026#34;, \u0026#34;blockNo\u0026#34;: 5034297, \u0026#34;slot\u0026#34;: 15520688 }, \u0026#34;networkSynchronization\u0026#34;: 0.99, \u0026#34;currentEra\u0026#34;: \u0026#34;mary\u0026#34;, \u0026#34;connectionStatus\u0026#34;: \u0026#34;disconnected\u0026#34;, \u0026#34;currentEpoch\u0026#34;: 164, \u0026#34;slotInEpoch\u0026#34;: 324543, \u0026#34;version\u0026#34;: \u0026#34;6.0.0\u0026#34;, \u0026#34;network\u0026#34;: \u0026#34;mainnet\u0026#34; } All information are computed at runtime and not preserved between restarts (at least not yet). The health response includes:\n   field description     connectionStatus A string \u0026quot;connected\u0026quot; or \u0026quot;disconnected\u0026quot; indicating whether Ogmios' server is correctly communicating with its underlying node.   startTime UTC timestamp at which the server was started.   lastTipUpdate UTC timestamp when lastKnownTip was last updated (can be null)   lastKnownTip Last known chain tip received from the node (can be null)   networkSynchronization A (nullable) percentage indicator of how far the server/node is from the network tip. 1 means it is synchronized.   currentEra The (nullable) current Cardano era of the underlying node. Useful for state-queries and debugging.   currentEpoch The (nullable) current epoch number known of the underlying node.   slotInEpoch The (nullable) relative slot number within the current epoch.   version Current Ogmios' version   network The network Ogmios is configured for. mainnet, preview or preprod.   metrics.activeConnections Number of WebSocket connections currently established with the server.   metrics.totalConnections Total number of WebSocket connections established with the server since it\u0026rsquo;s started.   metrics.sessionDurations Some time measures (min, max, mean) of the duration of each sessions, in milliseconds.   metrics.totalMessages Total number of messages received from all / any WebSocket connections.   metrics.totalUnrouted Total number of invalid messages not routed to one of the mini-protocols, received from all / any WebSocket connections.   metrics.runtimeStats.gcCpuTime Time spent by the garbage collector cleaning up previously allocated data objects, in nano-seconds.   metrics.runtimeStats.cpuTime Time spent by the CPU doing work (at the last GC), in nano-seconds.   metrics.runtimeStats.maxHeapSize Maximum live data allocated in the heap, in kilo-bytes.   metrics.runtimeStats.currentHeapSize Current live data allocated in the heap, in kilo-bytes.    All dates / timestamps are given as ISO-8601 date-time strings.\n Runtime metrics (i.e. runtimeStats) are only available when the server is started with the +T runtime flag. This is the case by default, but can be manually turned on and off using the +RTS / -RTS options. For example ogmios --node-socket /path/to/socket +RTS -T -RTS will run Ogmios with runtime stats activated.\n Prometheus Metrics Ogmios also provides Prometheus metrics directly at http://localhost:1337/metrics.\nThe Connected connection status is encoded as ogmios_connected 1 while disconnected as ogmios_connected 0.\n$ curl http://localhost:1337/metrics # TYPE ogmios_active_connections gauge ogmios_active_connections 0.0 # TYPE ogmios_connected gauge ogmios_connected 1.0 # TYPE ogmios_cpu_time counter ogmios_cpu_time 3841629783 # TYPE ogmios_current_epoch counter ogmios_current_epoch 363 # TYPE ogmios_current_heap_size gauge ogmios_current_heap_size 390.0 # TYPE ogmios_gc_cpu_time counter ogmios_gc_cpu_time 3142668337 # TYPE ogmios_max_heap_size gauge ogmios_max_heap_size 433.0 # TYPE ogmios_network_synchronization gauge ogmios_network_synchronization 0.99999 # TYPE ogmios_session_duration_max gauge ogmios_session_duration_max 0.0 # TYPE ogmios_session_duration_mean gauge ogmios_session_duration_mean 0.0 # TYPE ogmios_session_duration_min gauge ogmios_session_duration_min 0.0 # TYPE ogmios_slot_in_epoch counter ogmios_slot_in_epoch 150361 # TYPE ogmios_tip_block counter ogmios_tip_block 7756720 # TYPE ogmios_tip_slot counter ogmios_tip_slot 71603161 # TYPE ogmios_total_connections counter ogmios_total_connections 0 # TYPE ogmios_total_messages counter ogmios_total_messages 0 # TYPE ogmios_total_unrouted counter ogmios_total_unrouted 0 "},{"uri":"https://ogmios.dev/api/","title":"WebSocket API Reference (v6.9.*)","tags":[],"description":"","content":""},{"uri":"https://ogmios.dev/http-api/","title":"HTTP API Reference (v6.8.*)","tags":[],"description":"","content":""},{"uri":"https://ogmios.dev/getting-started/basics/","title":"Using: JSON-RPC basics","tags":[],"description":"","content":"JSON-RPC Ogmios' interface is built on top of JSON-RPC 2.0 which is a tiny standard to give some structure to the various messages that can be exchanged with Ogmios. The standard specifies a top-level JSON envelope by which messages must abide, as well as a semantic for some of the fields. It well suited for request/response types of protocols, such as any of the Ouroboros mini-protocols spoken by Ogmios.\nWe won\u0026rsquo;t be covering the JSON-RPC standard in this guide but gives a few extra insights about how it relates to Ogmios and some good takes from it. The standard is however relatively small so we encourage you to spare 5 minutes and quickly go through it when you find an opportunity.\nEach request in Ogmios yields exactly one response, might it be a success response or an error response. Furthermore, requests which relate to a particular protocol are guaranteed to yield responses in the same order.\nRequests Requests messages are sent by client applications (you) to Ogmios. Requests have 3 fields of interest: method, params and id. The method identifies the request itself and translates to a corresponding message of one of the 3 Ouroboros mini-protocols. Possible values for method are described in section 3 - Ouroboros mini-protocols and the complete reference is available in section 4 - API Reference. The params specify extra parameters that apply to the given method.\nHere is an example of valid request message:\n{ \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;findIntersection\u0026#34;, \u0026#34;params\u0026#34;: { \u0026#34;points\u0026#34;: [ \u0026#34;origin\u0026#34; ] }, \u0026#34;id\u0026#34;: \u0026#34;init-1234-5678\u0026#34; } As you can see, the method specifies the method findIntersection which relates to the chain synchronization protocol. This particular request expects one argument named points, which contains a list of points we want to intersect with (don\u0026rsquo;t panic, this is explained in further details in the next section!). Another interesting, albeit optional, field is the id field. This is completely free-form and will be spit back identically by Ogmios in the response exactly as provided. This can be useful to keep track of states on the client application or pass in extra context to each request/response. Be careful though that anything you send for a request will come back in the response; send something big, get something big.\nResponses Let\u0026rsquo;s start with a possible response to the request above:\n{ \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;findIntersection\u0026#34;, \u0026#34;result\u0026#34;: { \u0026#34;intersection\u0026#34;: \u0026#34;origin\u0026#34;, \u0026#34;tip\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;d184f428159290bf3558b4d1d139e6a07ec6589738c28a0925a7ab776bde4d62\u0026#34;, \u0026#34;blockNo\u0026#34;: 4870185, \u0026#34;slot\u0026#34;: 12176171 } }, \u0026#34;id\u0026#34;: \u0026#34;init-1234-5678\u0026#34; } The response kindly indicates which requests it corresponds to and has the same method as the matching request. It also gives a result under a specific field. Responses can have various results which are fully specified in section 4. - API Reference. Also, notice the id field in the reponse which reflects exactly the id field that was set for the request.\nOgmios' responses may correspond to possible errors that are part of the Ouroboros mini-protocols. For example, if you submit an invalid transaction, you\u0026rsquo;ll get back a success response with a result because it is a valid message in the context of the mini-protocols. Yet, Ogmios will yield an error message (with an error field) if you submit an invalid Ogmios message (for instance, an unknown request constructor, or something that is not a valid JSON-RPC message).\n WebSocket vs HTTP Ogmios defaults transport protocol is WebSocket. Yet some mini-protocols (e.g. the transaction submission or the ledger state query) can also work over HTTP under some circumstances.\nWebSocket The WebSocket protocol is full-duplex, which means that Ogmios and clients can send messages to each other all at the same time. That is very convenient for clients who can pipeline many requests at once and process responses later on as they arrive.\nTherefore, to send a message to ogmios, you only need a WebSocket client! For example, using the well-established ws Node.js package and assuming a local instance of Ogmios started through Docker, you can interact with Ogmios as simply as:\nconst WebSocket = require(\u0026#39;ws\u0026#39;); const client = new WebSocket(\u0026#34;ws://localhost:1337\u0026#34;); client.once(\u0026#39;open\u0026#39;, () =\u0026gt; { const request = { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;findIntersection\u0026#34;, \u0026#34;params\u0026#34;: { \u0026#34;points\u0026#34;: [ \u0026#34;origin\u0026#34; ] } }; client.send(JSON.stringify(request)); }); client.on(\u0026#39;message\u0026#39;, function(msg) { const response = JSON.parse(msg); // do something with \u0026#39;response\u0026#39; }); HTTP Some requests may also simply be sent over HTTP as POST requests, using the same JSON payload as data. This works well for (part of) the protocols that are stateless. For example, a one-off transaction submission is likely easier to send as an HTTP request than via an asynchronous WebSocket. Similarly, local state queries that are presented later in this user manual are likely candidate too, provided that you need not to hook on a particular point on chain. For example:\nconst fetch = require(\u0026#39;fetch\u0026#39;); fetch(\u0026#34;http://localhost:1337\u0026#34;, { method: \u0026#34;POST\u0026#34;, data: { \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;submitTransaction\u0026#34;, \u0026#34;params\u0026#34;: { \u0026#34;transaction\u0026#34;: \u0026#34;...\u0026#34; } } }).then(async response =\u0026gt; { const json = await response.json(); // do something with \u0026#39;response\u0026#39; }); That\u0026rsquo;s all for the basics. The rest isn\u0026rsquo;t really specific to Ogmios, but is about the Ouroboros mini-protocols themselves. See the next sections for a deep dive!\n"},{"uri":"https://ogmios.dev/changelog/","title":"Changelog","tags":[],"description":"","content":"[6.9.0] - 2024-11-08 Added  Integrate cardano-node==10.1.2 and associated dependencies.  New transaction submission / evaluation errors: EmptyTreasuryWithdrawal (code=3168) triggered when a transaction contains a governance proposal with an empty treasury withdrawal. UnexpectedMempoolError (code=3997) triggered when a transaction is rejected due to custom arbitrary rules that prevented it from entering the mempool.    Changed  N/A  Removed  N/A  [6.8.0] - 2024-09-21 Added  Integrate cardano-node==9.2.0 and associated dependencies. Add new ledger-state query: queryLedgerState/governanceProposals to retrieve currently active governance proposals and their ratification state (i.e. ongoig votes).  Changed   Fix automatic transaction upgrade to NOT change underlying binary format during upgrade. The previous implementation would on some occasions alter the serialized form, thus causing transaction hash to change and invalidating all signatures on it. The new approach does always preserve binary serialisation, but as a result, makes more scenario not translatable (e.g. trying to translate a multi-asset UTxOs containing a 0 quantity is impossible when targetting Conway).\n  Fix JSON deserialization of metadata on web platforms.\n  Removed  N/A  [6.7.0] - 2024-09-13 Added  Automatically upgrade transactions from previous era (up until Alonzo) on submission.  Changed  N/A  Removed  N/A  [6.6.2] - 2024-09-10 Added  N/A  Changed  Compile with cardano-node==9.1.1 / cardano-ledger-shelley==1.12.3.0 carrying an important fix for pointer deserialization.  Removed  N/A  [6.6.1] - 2024-09-01 Added  N/A  Changed  Fixed \u0026quot;babbage\u0026quot; being reported as the block era for Conway blocks.  Removed  N/A  [6.6.0] - 2024-08-15 Added   Add missing treasury.value and treasury.donation for Conway transactions.\n  Add missing protocolParametersUpdate.security thresholds to stake pools voting thresholds in Conway governance actions.\n  Add missing ancestor to various governance actions, pointing to the previous action of the same group.\n  Add a new from field to objects referring to stake credential. The field allows to distinguish between verification key and script credentials.\n  The stakePools method on the LedgerStateQueryClient now supports an extra filter. The filters were available on th standalone query but not via the client somehow.\n  Changed   Fix upgradability of Alonzo/Babbage transactions into Conway transactions. Before, Babbage transaction submitted for evaluation that spent Plutus V3 Scripts while using a Babbage serialization format would failed to upgrade into Conway transactions due to incompatibility at the binary level. The translation has been fixed, except for truly incompatible transactions (e.g. those containing MIR or duplicate certificates).\n  Refresh embedded configuration files to match those expected by cardano-node==9.1.0 (in particular, genesis files for mainnet, preview and preprod).\n  Only return OverlappingAdditionalUtxo error during transaction simulation when overlapping utxo differ from the ones fetched from the ledger.\n  Removed  ø    [6.5.0] - 2024-07-12 Added   Integrated with cardano-node==9.0.0.\n  New ledger-state query: queryLedgerState/treasuryAndReserves to retrieve the current Ada values of the treasury and reserves.\n  New protocol parameters in Conway:\n maximumReferenceScriptsSize which indicates the maximum total number of bytes of scripts referenced by a transaction. minFeeReferenceScripts with three sub fields: range, base and multiplier that now intervenes in the minimum fee calculation. Note that, starting in the Conway era, the min fee calculation is given by the following formula:    $$ minFee = A + B + C $$\n$$ \\begin{array}{lll} A \u0026amp; = \u0026amp; sizeOf(transaction) \\times minFeeCoefficient \\\nB \u0026amp; = \u0026amp; minFeeConstant \\\nC \u0026amp; = \u0026amp; referenceScriptsTierPrice \\\n\\end{array} $$\nWhere $referenceScriptsTierPrice$ is a tier-price depending on the total size of the serialized reference scripts. The total size (in bytes) of reference scripts is priced according to a different, growing tier, given by the following table:\n   Size range Cost     $[ 0; range[$ $\\rfloor sizeOf(referenceScripts) \\times base\\lfloor$   $[range; 2 \\times range[$ $\\rfloor sizeOf(referenceScripts) \\times multiplier \\times base\\lfloor$   $[2 \\times range; 3 \\times range[$ $\\rfloor sizeOf(referenceScripts) \\times {multiplier}^2 \\times base\\lfloor$   $[3 \\times range; 4 \\times range[$ $\\rfloor sizeOf(referenceScripts) \\times {multiplier}^3 \\times base\\lfloor$   \u0026hellip; \u0026hellip;   $[n \\times range; (n + 1) \\times range [$ $\\rfloor sizeOf(referenceScripts) \\times {multiplier}^n \\times base\\lfloor$    Considering $range = 25600$, $multiplier = 1.2$ and $base = 44$, we get:\n   Size range Price per byte Plot     $[ 0; 25600[$ $44.000$ See online calculator    $[25600; 51200[$ $52.800$   $[51200; 76800[$ $63.360$   $[76800; 102400[$ $76.032$   ... ...   $[179200; 204800[$ $157.6599552$     [!NOTE]\nIn Conway, the maximum size of reference scripts is limited to 200KiB.\n Hence, a transaction that carries reference scripts adding up to 80KiB of data would be priced:\n$$ referenceScriptTierPrice_{80KiB} = 25600 \\times (44 + 52.8 + 63.36) + 5120 \\times 76.032 = 4489379 $$\n New transaction submission / evaluation errors:  ReferenceScriptsTooLarge (code=3166) now raised when trying to submit a transaction that contains reference scripts whose total size is above 200KB (will become a protocol parameter in the next era). UnknownVoters (code=3167) returned when submitting votes from unregistered pools or credentials.    Changed   Roll back down to GHC-9.4.8 in an attempt to fix #399 possibly caused by a bug in GHC runtime system (possibly patched on 9.4.x).\n  Fixed transaction evaluation internal client not being properly terminated and cleaned up after use; resulting in active connections piling up over time. See #403.\n  Fixed the reported activeStakeInEpoch on the queryLedgerState/rewardsProvenance, which was mistakenly reporting the totalStakeInEpoch. A new value totalStakeInEpoch also now correctly reports that information.\n  Removed  N/A    [6.4.0] - 2024-06-06 Added   Integrated with cardano-node==8.11.0-pre.\n  A new transaction submission / evaluation error:\n UnauthorizedGovernanceAction (code=3165) raised when trying to submit a governance action other than protocol parameters change, hard fork initiation or info during the bootstrapping phase of the Conway era.    A new queryNetwork error:\n InvalidGenesis (code=2004) raised when trying to query a genesis configuration which is invalid or missing (for instance, when there\u0026rsquo;s a mismatch between the Conway configuration and the underlying ledger library parsing it).    Changed   The data.providedCollateral and data.computedTotalCollateral from submission errors with code 3128 and 3135 can now be negative Ada values.\n  Fixed missing conway option in the state query client for the genesisConfiguration query.\n  Removed  N/A    [6.3.0] - 2024-05-07 Added   Integrated with cardano-node==8.10.1-pre.\n  A new ledger state query queryLedgerState/constitutionalCommittee.\n  A new transaction submission error:\n ConflictingInputsAndReferences (code=3164).    The server now reports (log) unexpected failures happening during protocol execution instead of only replying to clients with an error. See #383.\n  Changed  [!WARNING] Adjusted the schema of constitutional committee certificates in order to harmonize responses between certificates and the new constitutionalCommittee ledger query.\n beforeafter    { \"type\": \"constitutionalCommitteeHotKeyRegistration\", \"member\": { \"id\": \"0000\", }, \"hotKey\": \"0000\" }     { \"type\": \"constitutionalCommitteeDelegation\", \"member\": { \"id\": \"0000\", }, \"delegate\": { \"status\": \"authorized\", \"id\": \"000\" } }        Fixed integer overflow happening when encoding relative time bounds in era summary, causing times to be shown as negative values.\n  Fixed parsing of the constitution ledger query which now resolves properly.\n  Removed  N/A    [6.2.0] - 2024-03-22 Added   Transaction evaluation now automatically UTxO available from processing the mempool. This allows for chaining smart-contract transactions without the need to track the UTxO state on from the client\u0026rsquo;s side. Ogmios now internally maintains a view of the node\u0026rsquo;s mempool and ensure a consistent access to it when evaluating transaction. See also #375.\n  More log traces around transaction evaluation and submission.\n  Changed  Retry HasTx on false with id wrapped in different eras, to cope with the hard-fork combinator inability to compare transaction id across eras. See also #376.  Removed  N/A    [6.1.0] - 2024-02-21 Added   Two new script purposes (available from the Conway era onward):\n propose: for proposing new governance actions. When itemized, comes with a proposal field that documents the associated governance proposal. vote: for voting on a proposed governance action. When itemized, comes with an issuer field that documents the associated governance issuer.    A new field guardrails is now present on governance proposals of type treasuryWithdrawals and protocolParametersUpdate. It is either null or contains a script hash (blake2b, 28 bytes) that indicates the additional guardrails script that must successfully pass for the governance proposal to be considered valid.\n  The object returned from ledgerState/rewardAccountSummaries now contain an extra deposit field equals to the amount deposited and held by the associated stake credential.\n  A new query queryLedgerState/constitution to obtain the current on-chain constitution. This query is only available when the ledger is in the Conway era onwards.\n  Changed   Configuration files no longer contain mainnet_p2p, preprod_p2p, preview_p2p and sanchonet_p2p folders. The p2p configs are now replacing the default configurations; so we\u0026rsquo;re back to configuration folders for mainnet, preprod, preview and sanchonet.\n  The constitution hash is now wrapped in a singleton object guardrails, to better capture its meaning. It isn\u0026rsquo;t the hash of the constitution script (which is covered by the anchor already), but the hash of the additional script policy which controls governance proposals of certain actions (e.g. treasury withdrawals, protocol parameters).\n  Renamed all fields anchor to metadata in the Conway era objects to be more consistent with other occurences of metadata in previous eras.\n  Fixed a few minor JSON-schema oversights such as TransactionOutputReference\u0026rsquo;s index now being a UInt64 (instead of UInt32).\n  Removed  InternalLedgerTypeConversionError which can no longer occur.    [6.0.3] - 2024-02-02 Added  A new transaction submission / evaluation error (code: 3161) returned when a script evaluation goes beyond its allocated budget.  Changed   Mapped some internal errors to actual predicate failures. Before, Ogmios would simply return an InternalLedgerTypeConversionError with code 3999 in cases where it should have been returning a more meaningful error resulting from either an excessive script evaluation (see new introduced error 3161) or a failed attempt to create a script context for a given transaction.\n  Renamed types regarding Metadatum in the TypeScript client to provide more meaningful names.\n  Removed  N/A    [6.0.2] - 2024-01-30 Added  N/A  Changed  Fixed \u0026lsquo;preview\u0026rsquo; showing as \u0026lsquo;preprod\u0026rsquo; (and vice-versa) in error message on start-up when connecting to a wrong test network. Fixed parsing of base16-encoded CBOR transaction on ogmios inspect transaction; would wrongly expect an extra singleton object before that. Fixes identification of submit/evaluate transaction responses, now using the method field instead of relying on the mirror. Should fix clashes with other requests.  Removed  N/A    [6.0.1] - 2024-01-22 Added  Introduced a new runtime configuration flag --strict-rpc to allow removing the extra 'method' field provided in the server response. While the JSON-RPC specification doesn\u0026rsquo;t explicitly disallow the use of extra fields in the response, some libraries have proven being quite strict in the inputs they accept, resulting in errors when receiving Ogmios' responses. The flag is off by default.  Changed  Fixed various descriptions and oversights in the JSON specifications (and thus documentation). In particular, the Getting Started section on the website has been slightly reworked to be easier to navigate and to include information about configuring Ogmios.  Removed  N/A    [6.0.0] - 2024-01-10 Added   Integration with cardano-node==8.7.2 and cardano-ledger-conway==1.11.0.0. It adds (preliminary) support for the Conway era. This support only covers what is currently available in the Cardano node / ledger. However, since the implementation of this era isn\u0026rsquo;t finalized yet it will likely break in the future. New updates will be issued until Conway stabilizes.\n  Ogmios now accept queries via HTTP (POST). Request bodies are the same as those passed to the websocket and so are responses. In fact, most Ogmios queries follow a simple request/response pattern and are therefore well-suited to be run over HTTP. While there\u0026rsquo;s an obvious performance trade-off (especially for the local-chain-sync protocol), it is a reasonable approach for many queries (e.g. the local-state-query protocol).\n [!NOTE] The HTTP server and the WebSocket server are both mounted on the same port. So, it suffices to route HTTP requests through /. The JSON payload is the same.\n   Ability to retrieve any genesis configuration (Byron, Shelley, Alonzo or Conway) via the state-query protocol.\n  A new flag --metadata-detailed-schema (disabled by default) to control how the server returns JSON metadata. When set, the server will return a JSON description of the encoded data; when omitted, it\u0026rsquo;ll attempt to convert CBOR metadata as plain JSON object, and default to hex-encoded cbor otherwise. See also notes in ADR-017.\n  A new command inspect transaction to help with debugging the deserialization of transaction.\n  The health now contains an extra network and version. Also, beware that era names are now returned in lowercase (first letter used to be capitalised!).\n  sanchonet network to the list of well-known networks.\n  arm64 static executables for Linux are now available in the continuous delivery pipeline, and as release artifacts.\n  Changed   The server now return an internalError when an unexpected error occurs in the communication between Ogmios and the node. Before, Ogmios would simply log an exception and no response would be sent back to client applications. Now, clients correctly receive an unsuccessful response with the same id as present in the request. See #346.\n    Add an extra promise handler to cope with unexpected websocket disconnections when submitting messages to the server. See #346.\n  Escape the word \u0026lsquo;constructor\u0026rsquo; to constr when present as key in metadata, and when not using --metadata-detailed-schema. JavaScript (and thus TypeScript) forbids using that word as an object key.\n    Changed   ⚠️ BREAKING-CHANGE ⚠️ Many major changes in the interface. A complete migration guide is available in ADR-017, yet please refer to the API reference for details and exhaustiveness. Many representations have been made easier to parse and field names have been improved (more consistent across the entire API and better self-documented).\n [!NOTE] There are still many test vectors available for every element of the Ogmios API. Use them!\n   Ogmios will no longer retry connecting to a node that is configured for another network but exit with an non-zero code and a clear error message indicating the network mismatch.\n  The default dashboard on localhost has been greatly rework and simplified. It also better handles errors.\n  Responses from the server no longer includes raw binary cbor by default. This was the case in particular for transactions. This behavior can be restored by configuring the server with --include-cbor to always include binary version of some specific objects such as transactions. This flag can be declined in more fine-grained flags if necessary:\n --include-transaction-cbor --include-metadata-cbor --include-script-cbor  where --include-cbor turns all three flags at once.\n  Removed   ⚠️ BREAKING-CHANGE ⚠️ Compact mode is no more. Responses are more compact by default already and it is no longer possible to ask for a compact mode.\n  ⚠️ BREAKING-CHANGE ⚠️ Ogmios no longer returns null or empty fields. Where a field\u0026rsquo;s value would be null prior to v6.0.0, Ogmios now simply omit the field altogether. This is also true for most responses that return empty lists as well. All-in-all, please refer to the documentation / JSON-schema in case of doubts (fields that may be omitted are no longer marked as required).\n    [5.6.0] - 2023-02-02 Added   Add a new helper function unsafeMetatumAsJSON which converts a detailed metadata schema into plain JavaScript, whenever possible. For example:\n{ \u0026quot;list\u0026quot;: [ { \u0026quot;string\u0026quot;: \u0026quot;foo\u0026quot; }, { \u0026quot;int\u0026quot;: 42 } ] } → [\u0026quot;foo\u0026quot;, 42]\nThis should work for any CIP-0025 metadata, and a few other formats. Yet it is unsound in the general case since not every on-chain metadata can actually be represented as JavaScript objects.\n  Changed   Now targets ES2020.\n  Fixed a bug in the JSON parser where coins quantities from all eras prior to Mary would be parsed as Number instead of BigInt.\n  Removed N/A\n  [5.5.8] - 2023-01-25 Added N/A\nChanged   Bump internal packages to match cardano-node@1.35.4 dependencies set.\n  Bundle the docker image with more recent versions of the cardano-configurations.\n  Fix TxMonitorClient\u0026rsquo;s nextTx wrongly throwing an error when called with no argument. The signature of that method has also been reworked slightly to provide better usage at call-site.\n  Add missing required constraints in the JSON schema for Byron witness representation that caused TypeScript types to be generated as optional.\n  Removed N/A\n  [5.5.7] - 2022-10-27 Added   delegationAndRewards and nonMyopicMemberRewards queries now both accept credentials in the form of bech32 strings as parameters, with the following expected prefixes and semantic (according to CIP-0005:\n stake (resp. stake_test on test networks) for stake addresses stake_vkh for stake key hash digests script for stake script hash digests  See also #277.\n  Allow additionalUtxoSet to be passed as argument in the repl.\n  Changed  Fixed additionalUtxoSet being ignored in the TxSubmissionClient of the TypeScript client.  Removed N/A\n  [5.5.6] - 2022-10-21 Added   Prometheus metrics exported at /metrics endpoint\n  Schema definitions are now included in the 📘 API reference. This makes it a little easier to find a specific schema without having to drill into a messages definitions.\n  Changed   Fixed network synchronization reporting 0.99999 even when fully synchronized. There was sometimes a possible discrepancy between the ledger internal clock and Ogmios' clock, causing a few seconds of drift time.\n  Fixed a couple of data-types with fields parsed as number instead of bigint. See #274\n [!WARNING] This is technically an internal breaking-change, however it actually comes as a bug fix since this does not change the announced interface in the TypeScript schema (which was correctly indicated \u0026lsquo;bigint\u0026rsquo;). Still, this may cause issues with those using number where there will now be bigint.\n   Fixed browser detection for the IsomorphicWebSocket abstraction. See #273\n  Removed N/A\n  [5.5.5] - 2022-08-19 Added   Support for the TxMonitor mini-protocol in the REPL.\n  Link to a new Java client for Ogmios.\n  Changed  Fixed parsing of ScriptFailures coming out of the evaluateTx command. Before this patch, the client would simply throw undefined when such an error was encountered. They are now properly transcribed as EvaluateTxError.  Removed  testnet has been removed from the target networks by the Docker workflow; which means that until further notice, there will be no more Docker images pushed for testnet. However, support for preprod and preview environment has been added.    [5.5.4] - 2022-08-11 Added  Missing JSON specification (and therefore, documentation) for collectErrors. See #244.  Changed   Slot lengths are now encoded as floating numbers (double precision) instead of integers (still representing a number of seconds). However, to maintain backward-compatibility, integers value are encoded without decimal, as they used to. #245\n  Blocks' properties (header, headerHash, body) are no longer marked as optional in the JSON specification (and consequently, in the TypeScript SDK). #238\n  Removed N/A\n  [5.5.3] - 2022-07-31 Added N/A\nChanged   Bumped cardano-node\u0026rsquo;s version (continuous integration \u0026amp; docker image) to 1.35.2.\n  ⚠️ Fixed Plutus' data / datum serialization function. See 3f614c3c for details. As a consequence, some datums (either inline or in the witness set) that have been reported in the past (since v5.5.0) may have been wrong. Note that the datum hashes were however correct, so it is possible to identify the \u0026ldquo;corrupted\u0026rdquo; ones by trying to re-hash (blake2b-256) them and see whether they match their associated hash digest.\n  Changed the Docker image tagging\u0026rsquo;s scheme of cardano-node-ogmios to now include the cardano-node\u0026rsquo;s version. This allows to more easily bundle more recent version of cardano-node with old versions of Ogmios without the need to make a whole new release. This is in effect from v5.5.2 and onwards.\n   image repository tags     cardano-node-ogmios cardanosolutions/cardano-node-ogmios latestlatest-{NETWORK}v*.*.*_{CARDANO_NODE_VERSION}v*.*.*_{CARDANO_NODE_VERSION}-{NETWORK}   ogmios cardanosolutions/ogmios latestlatest-{NETWORK}v*.*.*v*.*.*-{NETWORK}      Fixed incongruous error message from the command-line when failing to parse protocol parameters from genesis files. The error reporting has been slightly improved to give a more fine-grained error per invalid parameter. See #242.\n  Removed N/A\n  [5.5.2] - 2022-07-11 Added N/A\nChanged   Bumped cardano-node\u0026rsquo;s version (continuous integration \u0026amp; docker image) to 1.35.1.\n  Remove superfluous string concatenation in UnknownResultError\u0026rsquo;s message. See #236.\n  Removed N/A\n  [5.5.1] - 2022-07-05 Added  New isBabbageProtocolParameters helper function, and extended support of the existing ones to Babbage. See #234.  Changed  Fixed Health endpoint wrongly reporting \u0026lsquo;Alonzo\u0026rsquo; while in the \u0026lsquo;Babbage era\u0026rsquo;. See #233.  Removed N/A\n  [5.5.0] - 2022-06-29 Added  Added Vasil/Babbage support, including:  A new block type babbage with:  New (optional) transaction fields references, collateralReturn, totalCollateral; New (optional) transaction output\u0026rsquo;s fields datum and script;   A new plutus:v2 script language;   New transaction error submission failures in the Babbage era:  mirNegativeTransfer: return when attempting to perform a negative MIR transfer from a reward pot to another; totalCollateralMismatch: returned when totalCollateral is set but does not match what is actually computed by the ledger (i.e. sum of collateral inputs minus collateral return); malformedReferenceScripts: returned when the script specified in an output isn\u0026rsquo;t actually a well-formed Plutus script; malformedScriptWitnesses, occurs when a script witness specified in the transaction does not properly deserialize to a Plutus script.   New script evaluation failures in the Babbage era:  corruptCostModelForLanguage: An artifact from a distant past. This is unused but somehow still present in the ledger internal definitions. Should be removed eventually.   New server evaluation failures:  NotEnoughSynced: Happens when attempting to evaluate execution units on a node that isn\u0026rsquo;t enough synchronized. This is, if the node is still in an era prior to Alonzo, evaluation of execution units won\u0026rsquo;t be possible. CannotCreateEvaluationContext: Happens when the ledger fails to create an evaluation context from a given transaction. This is mostly due to the transaction being malformed (e.g. wrong redeemer pointer, missing UTxO).    See the 📘 API reference for more details.\nChanged   Updated cardano-configurations to include the vasil-dev network and switch to cardano-world as a source instead of Hydra artifacts \u0026ndash; now being deprecated.\n  Partially fixed an issue causing websocket connection to be terminated by the server when p2p is enabled on the underlying node. Ogmios now has a workaround which makes the issue less likely, but the real fix belongs in the upstream networking stack. See #230, #208.\n  The missingRequiredScripts error now contains an extra field resolved that is a map of (pointer → script hash) that have been correctly resolved by said pointers.\n  The introduction of the Babbage era comes with some minor (albeit possibly breaking) changes and deprecations:\n  ⚠️ datums, redeemerData and plutus:v1 scripts are no longer encoded as base64 strings, but are encoded as base16 strings. The data payload remains however identical. This change is meant for more compatibility across the API since those data-types can now also be submitted to the server when evaluating execution units for transactions. Using base64 for input data here is a bit awkward since most existing interfaces in the ecosystem favor base16;\n  ⚠️ When passing transaction outputs to the server (e.g. when providing an additional UTxO for script evaluation), datum hashes in output must now be specified as datumHash (instead of datum). However, the server does a best-effort for the sake of backward compatibility and should still work if provided with a valid hash under datum. However, after the Vasil hard-fork, it\u0026rsquo;ll be possible to also pass inline-datums using datum, while datum hash digest are expected to be specified as datumHash. Said differently, existing applications relying on this functionality will keep working without a change on this release, but applications willing to make use of the new inline-datum functionality coming in Vasil must abide by the new notation;\n  ⚠️ Similarly, Alonzo transaction outputs will now contain a datumHash field, carrying the datum hash digest. However, they will also contain a datum field with the exact same value for backward compatibility reason. In Babbage however, transaction outputs will carry either datum or datumHash depending on the case; and datum will only contain inline datums;\n  ⚠️ The outputTooSmall errors from transaction submission will slightly change format for transactions submitted during the Babbage era. Instead of an array of outputs, it is an array of objects with output and minimumRequiredValue fields;\n  ⚠️ A slightly modified block header: leaderValue and nounce fields are gone and replaced by a single inputVrf field;\n  ⚠️ Few protocol parameters changes:\n  A new protocol parameter coinsPerUTxOByte comes to replace coinsPerUtxoWord with a slightly different semantic. coinsPerUTxOByte is meant to compute the minimum Lovelace requirement on transaction outputs, and is simply a coefficient in a linear function of the serialized (CBOR) output:\nminUTxOValue(output) = |serialise(output)| * coinsPerUTxOByte   The decentralizationParameter no longer exists. The block production is forever decentralized :tada:!\n  The extraEntropy no longer exists.\n      See the 📘 API reference for more details.\nRemoved   UnknownInputs and UncomputableSlotArithmetic errors have been removed from the top-level possible cases of EvaluationFailure. Instead, those errors are now comprised in the CannotCreateEvaluationContext case.\n  The corruptCostModelForLanguage error has been removed from the top-level possible cases of ScriptFailure. This one was effectively dead-code that couldn\u0026rsquo;t be reached and was there for completeness. The code has now been removed upstream.\n    [5.4.0] - 2022-05-22 Added  TypeScript client for the \u0026lsquo;TxMonitor\u0026rsquo; mini-protocol. Documentation available at https://ogmios.dev/typescript-client/tx-monitor/.  Changed   The server now returns slightly better faults when detecting a misuse of the TxMonitor protocol (e.g. when sending a HasTx before an AwaitAcquire).\n  The server now fails with an explicit error when given a Request containing a reflection field; reflection are only used in responses, while requests use mirror. See #217.\n    [5.3.0] - 2022-05-07 Added   In the Local-Tx-Monitor protocol, NextTx can now take an (optional) extra argument { \u0026quot;fields\u0026quot;: \u0026quot;all\u0026quot; } to instrument the server in returning not only a transaction id in NextTxResponse, but a full transaction object. See #190.\n  Transaction JSON objects from all eras now contains an extra field raw, which represents the raw serialized transaction (CBOR) as a base64-encoded text string. This is the case of the chain-sync protocol, but also for the tx-monitor protocol. The field is however absent in the ogmios.v1:compact mode. See #190.\n  Transaction JSON objects from the Alonzo era now contains an extra field inputSource which a string set to either inputs or collaterals. This captures the fact that since the introduction of Plutus scripts in Alonzo, some transactions may be recorded as failed transactions in the ledger. Those transactions do not successfully spend their inputs but instead, consume their collaterals as an input source to compensate block validators for their work.\n  Changed   The complete API reference for the server is available in a new form at: https://ogmios.dev/api/. This should make the various protocol messages easier to explore and provide a less awkward visualization of the server API than the previous TypeScript documentation. The old TypeScript documentation remains however available at: https://ogmios.dev/typescript/api/.\n  Upgrade internal dependencies to cardano-node@1.34.1\n  Fixed the supervisor script for the cardano-node-ogmios Docker image, which would wrongly ignore signals sent from the Docker daemon (e.g. docker container stop ...). See #168\n  The tx-submission client now only creates a single event listener to interact with the server. This solves the Node.js warning \u0026ldquo;possible memory leak detected\u0026rdquo; when firing many submission requests at once (and going beyond the internal default maxNumberOfListeners set by node.js on event emitters). See #197.\n  The options passed to the WebSocket constructors are now ignored on the browser, since they aren\u0026rsquo;t supported and were causing the constructor to \u0026ldquo;crash\u0026rdquo;. See #194.\n  ⚠️ Some schema type interface renaming:\n Tx → TxByron BlockBodyShelley → TxShelley BlockBodyAllegra → TxAllegra BlockBodyMary → TxMary BlockBodyAlonzo → TxAlonzo    Removed N/A\n  [5.2.0] - 2022-02-15 Added  Extended the local-tx-submission protocol with a new EvaluateTx query which evaluates execution units of scripts present in a transaction. This effectively piggybacks on the Alonzo\u0026rsquo;s tools from the cardano-ledger while providing a more user-friendly interface regarding network parameters. The API offers well-detailed errors and an interface similar to the SubmitTx. See discussion on #172.     New rewardsProvenance' query coming as a replacement for the now-deprecated rewardsProvenance query. See discussion on #171.      Support for the new evaluateTx query in the TxSubmissionClient \u0026amp; repl.\n  Support for the new rewardsProvenance' query as rewardsProvenanceNew in the StateQueryClient \u0026amp; repl.\n  Changed  Added transaction id as part of the successful response to a SubmitTx. While this is technically a breaking-change, it was introduced in a backward-compatible way. Existing applications using the existing SubmitTx query will see no change and will keep receiving successes as \u0026quot;SubmitSuccessful\u0026quot; text responses. However, queries which pass transactions using the submit field (instead of the currently expected bytes field) will receive, on success, an augmented response which contains a transaction id \u0026quot;SubmitSuccessful\u0026quot;: { \u0026quot;txId\u0026quot;: \u0026quot;...\u0026quot; }. See discussion on #174.     Improved error reporting for the SubmitTx protocol which should gives a little clearer errors for ill-formed transactions.     ⚠️ Renamed client\u0026rsquo;s TxSubmission/errors.ts into TxSubmission/submissionErrors.ts. Similarly, the submission are also now nested under a submissionErrors field in the TxSubmission top-level object.  Removed N/A\n  [5.1.0] - 2022-01-24 Added  New LocalTxMonitor support in Ogmios. See The user guide for more details.    ⚠️ This new protocol is NOT enabled in cardano-node@1.33.*. Until its inclusion in a next release, a custom build of cardano-node is required to include a more recent version of ouroboros-network which adds support for that protocol to the Ouroboros' mini-protocols; namely: 32af9168.\n  A version of cardano-node@1.33.0 patched with the necessary commits can be found at CardanoSolutions/cardano-node@1.33.0+local-tx-monitor.\n   New fields in the health object:  connectionStatus → \u0026quot;connected\u0026quot; or \u0026quot;disconnected\u0026quot;, to reflect status with the node. #154 currentEpoch → which returns the current known epoch of the linked node #164 slotInEpoch → which returns the relative number of slots elapsed in the current epoch #164       New ogmios health-check command, useful to perform simple health check on a running server. For example, to monitor a container via Docker health check mechanism: HEALTHCHECK --interval=10s --timeout=5s --retries=1 CMD /bin/ogmios health-check Bumped internal dependencies to Cardano\u0026rsquo;s 1.33.* eco-system.  Changed  networkSynchronization and currentEra can be null when the server isn\u0026rsquo;t connected to a node. #154 The Metrics trace is now correctly tagged with MetricsRuntimeStatsDisabled. Fixed an issue with the Docker monitoring scripts of cardano-node-ogmios, causing issues on restart. #159 Relax upper-bound constraint on required node.js engine. This should make it possible to install the TypeScript packages on more recent versions on node.js than the one specified on the repository.  Removed N/A\n  [5.0.0] - 2021-12-20 Added   New state-query systemStart to access the blockchain start time (UTC).\n  New state-query chainTip to access the blockchain current tip (may slightly differ from the ledgerTip which may be behind catching up).\n     New state-query blockHeight to access the blockchain current highest block number (or \u0026quot;origin\u0026quot; if the chain is just starting).     New state-query eraSummaries to access all era bounds and slotting parameters details, required for proper slot arithmetic.     Log-levels can now be configured per-component. For example, one can decrease the min severity for the health component while keeping the state-query logs at another.     Logs can now be shutdown completely via the special keyword off.     Static binaries for Linux are now produced by the Nix build and uploaded as build artifacts for the corresponding Github workflow (i.e. Nix).     Add support for systemStart, chainTip, blockHeight \u0026amp; eraSummaries in the client and repl.  Changed 🏢 Server  ⚠️ RelativeTime is no-longer serialised as a string (with s as suffix) but, as an integer representing the number of seconds.      ⚠️ Serialised Plutus scripts are now labelled either plutus:v1 or plutus:v2 (instead of plutus).\n  ⚠️ Some breaking changes in the SubmitTx errors returned by the server for the sake of consistency. All submission errors are now returned as singleton objects within an array. The key of each object indicates the type of error and the value gives additional details about the errors. This is also true for era-mismatch errors. Some errors used to be returned as plain strings, they are now wrapped as singleton object with null as a value; this is the case for:\n invalidMetadata mirNegativeTransferNotCurrentlyAllowed mirProducesNegativeUpdate mirTransferNotCurrentlyAllowed missingAtLeastOneInputUtxo missingCollateralInputs triesToForgeAda validationTagMismatch wrongCertificateType        Upgraded internal dependencies to Cardano eco-system 1.31.0\n  ⚠️ Lovelace is now a native BigInt.\n      ⚠️ getServerHealth\u0026rsquo;s connection argument is now wrapped into an object, mapped to the field connection. (see #135)\n  ⚠️ Replaced schema definitions for Hash16 and Hash64 with more precise type definitions. For hashes, definitions now follows a convention Digest[ALGORITHM]::PRE-IMAGE where ALGORITHM and PRE-IMAGE points to the corresponding has algorithm used to hash the PRE-IMAGE. The length of the digest is given by minLength and maxLength JSON-schema constraints. Consequently, TypeScript types / interfaces generated from the JSON-schema definitions have been altered.\n  Removed   ⚠️ Log level severities critical, alert and emergency have been removed. error is now the highest severity.\n  ⚠️ The Nix setup has been highly simplified, resulting in removal of the NixOS services configuration and probably some other stuff.\n    [4.2.1] - 2021-11-16 Added   N / A\nChanged  Fixed configuration parsing which would wrongly use Shelley\u0026rsquo;s slots per epoch instead of Byron\u0026rsquo;s. This had an impact on the reported slot number in the chain-sync protocol, where slot numbers would be wrongly offset by 432000 per epoch after the first epoch.  Removed N/A\n[4.2.0] - 2021-11-05 Added   Enabled Alonzo transaction in the submission protocol (oversight from previous releases). Doing so, explicit compiler warnings have been added to the relevant code to avoid overseeing this in the next upgrade.\n  Added query response and requests to logs trace, large responses are truncated (e.g. querying the entire UTXO or, informations about all stake pools).\n      Gracefully handled shutdown and process cleanup on SIGTERM.\n  Documented Mary last point to the points of interests for the chain-sync protocol.\n      Bumped cardano-node\u0026rsquo;s integration to 1.31.0\n  The State-Query client can now release acquired points to perform queries against the most recent tip (which was also the default when creating a client with no point).\n  Changed  Some internal rework and cleanup; mostly chasing dangling promises by avoiding attaching even handlers when not needed.  Removed N/A\n  [4.1.0] - 2021-09-08 Added   Generate and store test vectors for various JSON requests and responses. This should ease integration for many clients who seek for good coverage of the server inputs/outputs.\n  Documented example state queries in the user-guide.\n  The ConnectionConfig has an additional, optional, configuration parameter maxPayload to configure the maximum allowed message size in bytes. The default is chosen quite large as the utxo query can result in large payloads.\n  New helpers isByronEpochBoundaryBlock and isByronStandardBlock.\n  Changed  The StateQueryClient now wraps every query in a try/catch to cope with malformed queries leading to client fault results from the server. Type definitions for QueryResponse[poolIds] and QueryResponse[poolParameters] are no longer marked as \u0026ldquo;optional\u0026rdquo;. Fixed bug #125 where empty results of delegationAndRewards would cause the client to throw an exception. Handled some floating promises.  Removed N/A\n  [4.0.0] - 2021-09-06 Added  Integrated with the Cardano eco-system corresponding to cardano-node@1.29.0 (Alonzo!) \u0026amp; latest testnet(s).     New alonzo block type, with various additions related to Alonzo.      New state-queries:\n   Query Description     poolIds The list of all pool identifiers currently registered and active.   poolParameters Stake pool parameters submitted with registration certificates.   poolsRanking Retrieve stake pools ranking (a.k.a desirabilities).   rewardsProvenance Get details about rewards calculation for the ongoing epoch.      Added missing properties in Byron\u0026rsquo;s protocol parameters update. Somehow, an additionalProperties: true had slipped through and caused the tests to pass with an incomplete schema.\n  Nested logs are now also structured, in particular those coming from the Handshake or TxSubmission protocols. Before, any message from these layers where actually plain strings with unintelligible gibberish. Now, the submitted transaction payload is shown encoded as hexadecimals and errors are also serialized to json using the same model / codec as the one used for websockets. The handshake is also more verbose now clearly showing what version is being requested and what the node replies / select. All in all, better logs.\n  The Dockerfile now includes a build definition for building cardano-node and ogmios into the same image, which is the default and suggested mode of operation. To build an image with only Ogmios, use the build --target ogmios. Docker Hub now hosts two image repositories: cardanosolutions/cardano-node-ogmios and cardanosolutions/ogmios.\n  Docker Hub images are now tagged with a network suffix (e.g. -mainnet). In the case of mainnet, the -mainnet suffix is optional, and points to the same build as the defaults.\n  A new repository for hosting Cardano configurations of various services was created and is now used in Ogmios. Configuration for cardano-node (and therefore Ogmios) or, network genesis can be found in input-output-hk/cardano-configurations. Configurations are updated automatically by a nightly job to be always up-to-date. They can be pulled into projects as git submodules.\n  New possible errors from the transaction submission (stemming from the Alonzo integration):\n collateralHasNonAdaAssets collateralIsScript collateralTooSmall collectErrors datumsMismatch executionUnitsTooLarge extraDataMismatch extraRedeemers mirNegativeTransferNotCurrentlyAllowed mirProducesNegativeUpdate mirTransferNotCurrentlyAllowed missingDatumHashesForInputs missingRequiredDatums missingRequiredRedeemers missingRequiredSignatures outsideForecast poolMetadataHashTooBig tooManyCollateralInputs unspendableDatums unspendableScriptInputs validationTagMismatch    Compatibility with aforementioned server additions.\n  The ChainSyncClient now implements an in-memory queue to ensure requestNext responses are processed sequentially when there are async operations in the message handlers. This behaviour can be bypassed where sequential processsing is not required, by setting the new construction option sequential to false.\n  The StateQueryClient can now re-acquire new points at will, useful for long-running clients for which previously acquired points may expire.\n  The TypeScript client is now fully documented!\n  Changed   ⚠️ The utxo query can now accept a list TxIn as argument, and still supports list of Address. Note that lists can\u0026rsquo;t be heterogeneous and it\u0026rsquo;s not possible to mix TxIn and Address.\n  ⚠️ Asset quantities and transaction metadata\u0026rsquo;s integers are now parsed as native BigInt.\n  The memory and steps JSON representations for prices are no longer coins, but ratio (represented as strings in the API).\n  The moveInstantaneousRewards certificates have a new optional field value and not only a rewards map as before. When value is present, it signifies that rewards are moved to the other pot.\n  Auxiliary data\u0026rsquo;s scriptPreImages in Allegra \u0026amp; Mary has been replaced with a field scripts which has one field native. The value of native corresponds to what used to be the value of scriptPreImages. In Alonzo, scripts may also have another field plutus with a serialized Plutus script.\n  Transactions witnesses' address has been renamed into signatures, and the structure of the object has been changed to be a map from public keys to signatures (instead of an object with two field key \u0026amp; signature).\n  Transactions witnesses' script has been renamed into scripts.\n  Transaction submission errors' networkMismatch now returns an invalidEntities list of object in the form of { \u0026quot;type\u0026quot;: ..., \u0026quot;entity\u0026quot;: } where type is a text tag designating the type of entity for which there is a network identifier mismatch. Values can be address, rewardAccount and since Alonzo transactionBody. The entity field contains some details specific to the type of entity. Before, it used to be two distinct fields invalidAddresses and invalidRewardAccounts.\n  Empty transaction metadata are no longer materialized by an object with two null fields ({ \u0026quot;hash\u0026quot;: null, \u0026quot;body\u0026quot;: null }). Empty transaction metadata are now equal to null.\n  map metadatum in transactions' metadata are no longer materialized as a list of list of singleton objects: [[{ \u0026quot;k\u0026quot;: ... }, { \u0026quot;v\u0026quot;: ... }], ...] but instead, as a list of object with two fields k and v: [{ \u0026quot;k\u0026quot;: ..., \u0026quot;v\u0026quot;: ...}, ...]. This was an oversight from the encoder which was never intended to end up that way but happened to slip in because the schema for metadatum was not specified / documented (and therefore, also escaped testing). This is now documented properly.\n  The TxOut (and thus Utxo) model definitions have been unified and harmonized across all eras. That is, pre-Mary eras now also wrap Ada values in an object with a field \u0026quot;coins\u0026quot;: .... This reduces the discrepancy between eras for there\u0026rsquo;s now a single TxOut representation valid across all eras. Some fields are however optional and only present in some eras (e.g. datum starting from Alonzo)\n  ⚠️ State queries (resp. the StateQueryClient) now automatically runs queries against the last known tip if no explicit point is provided. It used to acquire a point on the first query which would eventually become too old. The behavior is now equivalent to acquiring a new point on every query!\n  ⚠️ SubmitTx no-longer returns Byron errors. Consequently, submit errors are no longer scoped under errors.byron or errors.shelley but simply errors.\n  ⚠️ Fixed proposedProtocolParameters query. All fields are actually required AND, more importantly, it can now return either Shelley protocol parameters or, Alonzo protocol parameters.\n  The ChainSyncClientMessageHandlers methods now must return a promise.\n  Various reworks and renaming of the TypeScript types\n AssetQuantity is now a native bigint Metadatum\u0026rsquo;s Int are now native bigint Type DelegationsAndRewards renamed into DelegationsAndRewardsByAccounts Type DelegationsAndRewards1 renamed into DelegationsAndRewards Type NonMyopicMemberRewards1 renamed into NonMyopicMemberRewards Type TxTooLarge1 renamed into TxTooLarge Type FeeTooSmall1 renamed into FeeTooSmall Type NetworkMismatch1 renamed into NetworkMismatch Type Proposal renamed into UpdateProposalShelley Types Utxo1, Utxo2, UtxoMary have been unified into a single Utxo type. Refer to server breaking changes for details. Type Tip \u0026amp; Point renamed into TipOrOrigin and PointOrOrigin. As a consequence, Tip1 and Point1 are now simply Tip and Point. Many types NullX merged into a single Null type Query types have been renamed from ledgerTip1 to GetLedgerTip and so forth for all queries.    Removed   datumsMismatch, a previously introduced error from the transaction submission has been removed / replaced.\n  SubmitTx can no longer return SubmitTxError[Byron]. All the child error types have been removed accordingly, namely:\n UtxoValidationError TxValidationError LovelaceError    ChainSyncClient no longer exposes a requestNext function. Instead you must invoke the callback provided as the second argument in each of rollBackward and rollForward handlers.\n  ChainSyncClient no longer exposes JSON-WSP reflection as there would be unexpected results given the first n messages would all share the same reflected value.\n    [3.2.0] - 2021-05-09 Added  New TypeScript client! The client comes in three packages:  An interactive REPL to play with Ogmios using the command-line. A generator to derive TypeScript type definitions from the JSON schema. The actual client library providing nice wrapper around the various protocol, in a typed way. The TypeScript client also includes a new battery of automated integration tests against the testnet.   Support for WebSocket sub-protocols, with currently one support sub-protocol: ogmios.compact.v1. When enabled, Ogmios will omit fields such as witnesses, proofs and signatures from responses to make responses smaller. Provide missing documentation / JSON-schema for:  JSON-WSP faults Allegra \u0026amp; Mary SubmitTx failures:   Allegra:\n expiredUtxo is replaced by outsideOfValidityInterval new error triesToForgeAda  Mary:\n valueNotConserved.consumed is now a Value (instead of a DeltaCoin) valueNotConserved.produced is now a Value (instead of a DeltaCoin) outputTooSmall items are now of type TxOut[Mary] new error tooManyAssetsInOutput       Continuous integration job checking for code style and lint on the server source code. The /health endpoint now returns two additional pieces of information:  A networkSynchronization percentage to indicate how far Ogmios / the node is from the network. A currentEra value to indicate the corresponding Cardano era Ogmios / the node is currently running in.   Nix support for building Ogmios (this also include a cabal.project to enable cabal support as well).  Changed  Rework Docker setup to not require an external snapshot image. Everything is now built in a single Dockerfile, but cache from DockerHub can be leveraged to reduce overall build time when building from scratch. Fixed typo in the JSON-schema w.r.t to the \u0026lsquo;Acquire\u0026rsquo; request (points → point), and introduce more automated test to catch this kind of errors more easily.  Removed ø\n  [3.1.0] - 2021-04-04 Added  Extend the local-state query protocol with support for \u0026lsquo;GetCompactGenesis\u0026rsquo;. Extend the local-state query protocol with support for \u0026lsquo;GetFilteredDelegationsAndRewards\u0026rsquo;. Add missing mint field to transaction\u0026rsquo;s body (added since mary). The documentation is now hosted on https://ogmios.dev.  Changed  Use \u0026lsquo;contentEncoding\u0026rsquo; over \u0026lsquo;format\u0026rsquo; in appropriate part of the JSON schema. Fix various errors in the JSON-schema definition \u0026amp; extend test suite coverage in consequence. Implement a \u0026lsquo;fast-bech32\u0026rsquo; encoding library, to speed-up Ogmios serialization of blocks beyond the Shelley era. Use faster (and recommended) JSON encoding techniques to speed up overall JSON serialization. Improve generated documentation from JSON schema by:  Providing titles to \u0026lsquo;oneOf\u0026rsquo; items Adding descriptions to top-level definitions Adding examples to top-level definitions   Customized API reference\u0026rsquo;s stylesheet to enhance readability. Upgrade dependency and code to work with GHC-8.10.4 (from GHC 8.6.5) Handle more gracefully unknown exceptions (avoid infinite fast loop of retries on errors). Handle more gracefully network mismatches (e.g. connecting Ogmios in testnet mode to a mainnet network) Repository reorganization:  \u0026lsquo;ogmios-server\u0026rsquo; renamed into \u0026lsquo;server\u0026rsquo; move Haskell-specific dotfiles and configuration files under \u0026lsquo;server\u0026rsquo; move \u0026lsquo;modules\u0026rsquo; under \u0026lsquo;server\u0026rsquo; move \u0026lsquo;Dockerfile\u0026rsquo; and \u0026lsquo;snapshot.Dockerfile\u0026rsquo; under \u0026lsquo;server\u0026rsquo;    Removed  Support for GHC-8.6.5 The docker image no longer shows git revision / version on \u0026lsquo;\u0026ndash;version\u0026rsquo;    [3.0.0] \u0026ndash; 2021-02-26 Added  Support for the Allegra era on the chain-sync, tx submission and state query protocols. Support for the Mary era on the chain-sync, tx submission and state query protocols. Support for multi-era state queries, or said differently, Ogmios can survive a hard-fork without being restarted or re-compiled. Allow clients to also make state queries based on the node\u0026rsquo;s tip (instead of passing an explicit point to acquire). Interactive dashboard leveraging Ogmios health\u0026rsquo;s endpoint and local state query protocol to show metrics in real-time. Automated smoke sanity tests executed on a running instance, running queries and chain-syncs across all eras. Various internal optimization, in particular with rewards to the chain-sync protocol (~14.000 blocks/s in Byron, ~2500 block/s in Shelley and beyond). Additional metrics for monitoring: current heap size, total messages, total unrouted messages and start time. Configurable HTTP server timeout from the command-line, with sensible defaults.  Changed  Improve error responses to invalid clients' requests (instead of generic error messages). Fixed various typos and clumsy wording in the user manual. Reworked internal architecture as a Three-Layer Haskell Cake. Changed internal dependencies for base16 and base64 encoding for better performances. Upgraded internal dependencies to the Cardano eco-system working with cardano-node@1.25.1 Improved error handling of the Ogmios server, in particular in case of connections lost with the underlying node. The server now returns an explicit client error when interleaving \u0026lsquo;FindIntersect\u0026rsquo; messages in-between pipelined \u0026lsquo;RequestNext\u0026rsquo;. Revised default compilation flags .  Removed N/A\n  [2.0.0-beta] \u0026ndash; 2020-10-31 Added  Support for the Shelley chain in the local-chain-sync protocol. Support for the local-state-query protocol. Health / Heartbeat endpoint for monitoring. Runtime and application metrics measured and served on endpoint (/health). Ogmios now includes an HTTP static server hosting both the WSP definition and, a /benchmark.html to run some quick benchmark / smoke test. Added additional configuration options via command-line or environment. Revised user manual with detailed step-by-step examples.  Changed  Several JSON fields renamed to increase consistency between Shelley and Byron. Improved logging, more messages and with more context. Improved error handling with regards to connection of websocket clients.  Removed N/A\nChanged N/A\n  [1.0.0-beta] \u0026ndash; 2020-04-04 Added   Initial release and support for:\n Chain Synchronization (no pipelining between cardano-node \u0026amp; ogmios) Local Transaction Submission    JSON-WSP version 1.0, full support with reflection.\n  Full docker stack via docker-compose.\n  Basic command-line and logging.\n  Changed N/A\nRemoved N/A\n"},{"uri":"https://ogmios.dev/faq/","title":"F.A.Q","tags":[],"description":"","content":"Can you explain Ogmios in one three sentences? Ogmios is a lightweight bridge interface for cardano-node. It offers a WebSockets API that enables local clients to speak Ouroboros' mini-protocols via JSON/RPC. Ogmios is a fast and lightweight solution that can be deployed alongside relays to create entry points on the Cardano network for various types of applications (e.g. wallets, explorers, chatbots, dashboards…)\nCan you explain Ogmios to me like I\u0026rsquo;m five? To understand what Ogmios is, you must first understand where it fits in Cardano landscape. Cardano is a network of programs (a.k.a nodes) connected to each other and exchanging messages to run the Cardano blockchain. A Cardano node has an interface that allows for other programs to interact with it (very much like buttons on a remote to control the TV). However, that interface relies on novel communication methods, that were designed in-house by the networking team at IOG. To this day, the only tooling that fully implement those unique communication methods is written in Haskell* (as if all the buttons on the remote control were in Chinese, but you only speak French). So to interact with a Cardano node, one has no other choice than to write a Haskell program, which is a bummer for many application developers.\nThis is where Ogmios comes into play. Ogmios is written in Haskell, so it can speak with Cardano nodes just fine. But it also translates all the interfaces provided by the node using communication methods that are more common and accessible to the vast majority of developers (namely, WebSockets \u0026amp; JSON). Ogmios is a sort of translator; instead of speaking to a Cardano node directly, applications can speak to Ogmios using a language they know, and Ogmios translates it to the node and back to the applications.\n (*) Since 2022, Pallas now provides most of the primitives also in Rust.\n Where does the name come from? Ogmios is a celtic deity of eloquence, language and learning. This relates to the way this project helps users communicate with Cardano. And while it doesn’t translate languages, it translates protocols to protocols.\nWhy do I care? Well, it depends. In essence, Ogmios doesn\u0026rsquo;t do much more than what the node itself does. It\u0026rsquo;s pretty much as low-level as things can get with the Cardano network. For many applications, this is too low in the abstraction layer and they would be better off using higher-level services like cardano-graphql, Rosetta, or Blockfrost.\nHowever, building such services demands to be able to interact with the blockchain using a more direct interface. This interface can be Ogmios. Currently, the choices given to services like these are limited: talk directly to the node using the Haskell client library, or use cardano-db-sync which is a component that talks to the node and dumps blockchain data in a PostgreSQL database. For those who don\u0026rsquo;t write Haskell, the choice is even more limited; down to a single option. Plus, like any solution, it comes with trade-offs. Deploying a cardano-db-sync instance can be quite heavy, requires extra space, and already forces applications to operate in some specific ways. Ogmios gives a lightweight alternative that is also much closer to what the node offers. It would be possible for example to re-implement cardano-db-sync in a different programming language using Ogmios.\nSo in the end, if you\u0026rsquo;re writing a DApp or an application that needs to interact with the Cardano blockchain only at a high level using pre-defined abstractions, then you probably don\u0026rsquo;t care. However, if you\u0026rsquo;re doing some low-level work, and need to access every bit of the protocol or, if you\u0026rsquo;re building a service on top of Cardano for which the blockchain itself is the right level of abstraction, then Ogmios is most likely a good fit for you.\nCan I build X using Ogmios? The short answer is: if you can build X with a Cardano node, then yes. Ogmios is as capable as the client interface for Cardano nodes. Can I build a wallet with Ogmios? Yes. Can I build an explorer with Ogmios? Yes. Can I build a smart-contract application backend with Ogmios? Yes. Anything available on-chain is available through Ogmios which has so far also transitioned through the 4 eras of Cardano. Ogmios' first release was a bit before the Shelley hard-fork, and its development followed the on-chain upgrades and protocol updates.\nWhat\u0026rsquo;s the overhead from running Ogmios? Almost none. Ogmios runs within a handful of megabytes of memory and its CPU usage is very much driven by whatever application you\u0026rsquo;ll be connecting to it. That is if your application is syncing the entire blockchain and sending thousands of messages per second to the underlying node, then of course your CPU will get pretty busy; not from Ogmios itself, however, but mostly from the underlying node and your client. In between, Ogmios acts as a bridge and passes messages around. Once a message has been passed, Ogmios forgets about it. That makes the memory footprint of Ogmios quite low, and its resource usages tightly linked to whatever application consumes data from it.\nWe secretly keep a hope that someday, many operators will deploy Ogmios alongside their relays. Enabling many application developers to interact with the Cardano blockchain seamlessly by connecting to a relay close to them.\nIs there any client for Ogmios? As a matter of fact, there is. A TypeScript client library and REPL is available on the same repository. This client is also a first-class citizen within this user-guide so make sure to check out the TypeScript Client section.\nSince then, there has been other clients built by the community:\n Kogmios (Kotlin) Ogmigo (Go)  Besides, it goes without saying that as an open-source project Ogmios welcomes contributions; especially on the client library and/or around tools built on top. Should you be working on a new client, let us know, we\u0026rsquo;re happy to help.\nDoes Ogmios require the PAB (Plutus Application Backend) to work? No it does not. The PAB is an application framework which provides DApp developers with an extra interface for running smart-contracts on Cardano; Ogmios is not a DApp, nor does it require any DApp functionality. Ogmios does however require a full cardano-node to work for it is merely an interface on top of it.\nCan I use Ogmios in a remote setup? Yes. The easiest way is probably by using a reverse-proxy like NGINX to also promote the WebSocket connection to a secure connection. A more interesting question however is: should you? Ogmios is an interface for the so-called local client protocols which are, by design, intended to be used in a local setup: where Ogmios and cardano-node are on the same host. It would be ill-advised to expose the server to many clients without any restriction as each client can drain a quite large amount of resources from the local node. This is however totally acceptable in a controlled environment, where for example, your own stack would leverage a single Ogmios instance to power few remote services.\nWhy do Ogmios returns JSON with integers larger than MAX_SAFE_INTEGER? JSON does support large integers by design. The default JavaScript JSON parser does not however. Thus, it is not a problem which lies on the server-side, but rather on \u0026ldquo;naive\u0026rdquo; JavaScript clients. For more details, have a look at this architectural decision record which explains how we handle large integers in the TypeScript client.\nIs Ogmios production ready? Ogmios is an open-source project which is being worked on in small steps when time allows. Its development started in 2020 and it has undergone several updates and iterations. We\u0026rsquo;ve got a mad passion for software quality and we put extensive efforts into making Ogmios of the highest quality. The server follows a well-known architecture and abides by battle-tested Haskell coding practices. As it should, Ogmios is of course deeply tested at several levels via continuous integration1.\nTests for the server include property-based testing of the core protocols2 3, property-based testing of the entire JSON interface validated against a JSON-schema specification4. Note that property tests all use generators which comes directly from the ouroboros-network and cardano-ledger-specs to ensure that Ogmios is always up-to-date with the Cardano eco-system. There are also various5 unit6 tests7 to cover basic functionalities.\nOn the other hand, the TypeScript client is used to perform end-to-end tests with tests running against the Cardano testnet8. The tests are executed both in a Node.js and browser context and the synchronization with the network is done via a Github action which leverages Ogmios' server.\nBeside, Ogmios also comes with structured logging and monitoring out of the box. Putting any monitoring solution on top like Prometheus is trivial.\nFinally, if you ventured through this page and user-guide, you have also noticed that the project is well-documented. And this includes the API reference, the ChangeLog as well as the architectural decisions going over rationales for decisions we made along the way.\nThus, is Ogmios production-ready? Yes. At least, this is as good as it gets for an open-source project. We\u0026rsquo;ve been incorporating feedback from various users over the past year which has been great so far. For the rest, everything is open-source licensed under MPL-2.0 and you\u0026rsquo;re the best judge.\nAre there any projects/companies using it? We\u0026rsquo;ve heard of a handful happy users! And it keeps growing!\n(Known) projects/companies using Ogmios          FiveBinaries Sundae Labs Input Output Global Jpg.store NEWM MLabs Minswap           Eternl RayNetwork DCSpark Spacebudz Cardano Foundation TxPipe Kora Labs           Maestro Blinklabs Pool.pm BloxBean Wing Riders Liqwid Labs Gimbalabs          Genius Yield Rosen Bridge EMURGO Indigo Protocol VacuumLabs Mutant NFT Dex Hunter         Nescrow Danogo Veralidity Multichain TosiDrop Wayup   (Known) open source projects using Ogmios  Blockfrost: An API service providing abstraction between you and Cardano blockchain data, taking away the burden of complexity, so you can focus on what really matters - developing your applications. Cardano-transaction-lib: A Purescript library for building smart contract transactions on Cardano Lucid: A library for creating Cardano transactions and off-chain code for Plutus contracts in JavaScript, Deno and Node.js. Nebula: A Cardano NFT marketplace contract including chain indexer and event listener for individual projects. Mesh: An open-source library to advance Web3 development on Cardano. PyCardano: A lightweight Cardano SDK in Python. Cardano-js-sdk: JavaScript SDK for interacting with Cardano, providing various key management options, with support for popular hardware wallets. Cardano (Java) client lib: A client library for Cardano in Java. This library simplifies the interaction with Cardano blockchain from a Java application. Yaci DevKit: A set of dev tools for development on Cardano. Lace: A light-wallet for Cardano. Marlowe (marlowe-runner): A smart-contract DSL for Cardano. Naumachia: Naumachia is a framework for writing Smart Contracts on the Cardano Blockchain using Rust! DenoSync: Deno WebSocket Chainsync client on top of Ogmios. NodeRunner: Tooling for setting up stacks of Cardano services. Translucent: A library for creating Cardano transactions and off-chain code for Plutus contracts in JavaScript.  Are you using Ogmios for a project? Let us know on Github!\n "},{"uri":"https://ogmios.dev/api/v6.8/","title":"Archive (v6.8.*)","tags":[],"description":"","content":""},{"uri":"https://ogmios.dev/api/v6.7/","title":"Archive (v6.7.*)","tags":[],"description":"","content":""},{"uri":"https://ogmios.dev/api/v6.6/","title":"Archive (v6.6.*)","tags":[],"description":"","content":""},{"uri":"https://ogmios.dev/api/v6.5/","title":"Archive (v6.5.*)","tags":[],"description":"","content":""},{"uri":"https://ogmios.dev/api/v6.4/","title":"Archive (v6.4.*)","tags":[],"description":"","content":""},{"uri":"https://ogmios.dev/api/v6.3/","title":"Archive (v6.3.*)","tags":[],"description":"","content":""},{"uri":"https://ogmios.dev/api/v6.2/","title":"Archive (v6.2.*)","tags":[],"description":"","content":""},{"uri":"https://ogmios.dev/api/v6.1/","title":"Archive (v6.1.*)","tags":[],"description":"","content":""},{"uri":"https://ogmios.dev/api/v6.0/","title":"Archive (v6.0.*)","tags":[],"description":"","content":""},{"uri":"https://ogmios.dev/api/v5.6/","title":"Archive (v5.6.*)","tags":[],"description":"","content":""},{"uri":"https://ogmios.dev/","title":"Overview","tags":[],"description":"","content":"Ogmios Ogmios is a lightweight bridge interface for cardano-node. It offers a WebSockets API that enables local clients to speak Ouroboros' mini-protocols via JSON/RPC.\n Need more information? Have a look at the Frequently Asked Questions!\n"},{"uri":"https://ogmios.dev/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://ogmios.dev/tags/","title":"Tags","tags":[],"description":"","content":""}]