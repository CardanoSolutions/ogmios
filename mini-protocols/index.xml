<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ouroboros Mini-Protocols on Ogmios</title><link>https://ogmios.dev/mini-protocols/</link><description>Recent content in Ouroboros Mini-Protocols on Ogmios</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://ogmios.dev/mini-protocols/index.xml" rel="self" type="application/rss+xml"/><item><title>Local Chain Sync</title><link>https://ogmios.dev/mini-protocols/local-chain-sync/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/mini-protocols/local-chain-sync/</guid><description>┌───────────┐ │ Intersect │◀══════════════════════════════╗ └─────┬─────┘ FindIntersect ║ │ ║ │ ┌──────────┐ │ Intersect.{Found,NotFound} │ │ └───────────────────────────────▶│ │ │ Idle │ ╔═══════════════════════════════════│ │ ║ RequestNext │ │⇦ START ║ └──────────┘ ▼ ▲ ┌──────┐ Roll.{Backward,Forward} │ │ Next ├────────────────────────────────────┘ └──────┘ Overview Clients that wish to synchronise blocks from the Cardano chain can use the Local Chain Sync protocol.
The protocol is stateful, which means that each connection between clients and Ogmios has a state: a cursor locating a point on the chain.</description></item><item><title>Local State Query</title><link>https://ogmios.dev/mini-protocols/local-state-query/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/mini-protocols/local-state-query/</guid><description>┌───────────────┐ ┌──────▶│ Idle │⇦ START │ └───┬───────────┘ │ │ ▲ │ Acquire │ │ Failure │ ▼ │ │ ┌───────────┴───┐ Release │ │ Acquiring │◀─────────────────┐ │ └───┬───────────┘ │ │ │ ▲ │ Result │ Acquired │ │ ReAcquire │ │ ▼ │ │ │ ┌───────────┴───┐ ┌────────┴───────┐ └───────┤ Acquired │────────▶│ Querying │ └───────────────┘ Query └────────────────┘ Overview The state query protocol is likely the most versatile of the three Ouroboros mini-protocols.</description></item><item><title>Local Tx Submission</title><link>https://ogmios.dev/mini-protocols/local-tx-submission/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/mini-protocols/local-tx-submission/</guid><description>┌──────────┐ │ Busy │◀═══════════════════════════════════════╗ └────┬─────┘ SubmitTx / EvaluateTx ║ │ ║ │ ┌──────────┐ │ │ │ │ │ │ │ SubmitTxResponse / EvaluateTxResponse │ Idle │ └────────────────────────────────────────▶│ │ │ │⇦ START └──────────┘ Overview Transaction submission is pretty simple &amp;amp; works by submitting an already serialized and signed transaction as one single message.
In case of success, Ogmios / the node returns an empty response. Otherwise, it returns an error with some details about what went wrong.</description></item><item><title>Local Tx Monitor</title><link>https://ogmios.dev/mini-protocols/local-tx-monitor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/mini-protocols/local-tx-monitor/</guid><description>START ⇓ ┌───────────────┐ ┌──────▶ │ Idle │⇒ DONE │ └───────┬───────┘ │ │ │ AwaitAcquire │ │ │ │ ▼ │ ┌───────────────┐ ReleaseMempool │ │ Acquiring │ │ └───┬───────────┘ │ │ ▲ │ Acquired │ │ │ │ │ AwaitAcquire │ ▼ │ │ ┌───────────┴───┐ └────────┤ Acquired │ └───┬───────────┘ │ ▲ HasTx|NextTx|SizeAndCapacity │ │ Reply (HasTx|NextTx|SizeAndCapacity) ▼ │ ┌───────────┴───┐ │ Busy │ └───────────────┘ Overview To inspect the node&amp;rsquo;s local mempool, one may rely on the local-tx-monitor mini-protocol.</description></item></channel></rss>