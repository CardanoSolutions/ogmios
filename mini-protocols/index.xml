<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mini-Protocols on Ogmios</title><link>https://ogmios.dev/mini-protocols/</link><description>Recent content in Mini-Protocols on Ogmios</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://ogmios.dev/mini-protocols/index.xml" rel="self" type="application/rss+xml"/><item><title>Chain synchronization</title><link>https://ogmios.dev/mini-protocols/local-chain-sync/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/mini-protocols/local-chain-sync/</guid><description>START ⇓ ┌───────────────┐ │ Idle │⇒ DONE └───────┬───────┘ │ │ findIntersection │ │ │ findIntersection │ ╭───────╮ ▼ │ │ ┌───────────┴───┐ │ │ Initialized │◀──╯ └───┬───────────┘ │ ▲ nextBlock │ │ ╰───────╯ Overview Clients that wish to synchronise blocks from the Cardano chain can use the chain synchronization mini-protocol.
The protocol is stateful, which means that each connection between clients and Ogmios has a state: a cursor locating a point on the chain.</description></item><item><title>Ledger state queries</title><link>https://ogmios.dev/mini-protocols/local-state-query/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/mini-protocols/local-state-query/</guid><description>queryLedgerState/* START queryNetwork/* ⇓ ╭────╮ releaseLedgerState ┌──────────────┴┐ │ ╭─────▶│ Idle │◀──╯ │ └───────┬───────┘ │ │ │ │ acquireLedgerState │ │ │ │ (re)acquireLedgerState │ ▼ ╭────────╮ │ ┌──────────┴────┐ │ ╰──────┤ Acquired │◀──╯ └───┬───────────┘ │ ▲ queryLedgerState/* │ │ queryNetwork/* │ │ ╰───────╯ Overview The state query protocol is likely the most versatile of the three Ouroboros mini-protocols. As a matter of fact, it allows for querying various types of information directly from the ledger.</description></item><item><title>Transaction submission</title><link>https://ogmios.dev/mini-protocols/local-tx-submission/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/mini-protocols/local-tx-submission/</guid><description>submitTransaction ╭────────╮ START │ │ ⇓ │ │ ┌────────────┴───┐ │ ╭──────┤ Idle │◀───╯ │ └────────────────┘ │ ▲ │ │ ╰────────╯ evaluateTransaction Overview Transaction submission is pretty simple &amp;amp; works by submitting an already serialized and signed transaction as one single message.
In case of success, Ogmios / the node returns an empty response. Otherwise, it returns an error with some details about what went wrong. Clients must thereby know how to construct valid transactions.</description></item><item><title>Mempool monitoring</title><link>https://ogmios.dev/mini-protocols/local-tx-monitor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/mini-protocols/local-tx-monitor/</guid><description>START ⇓ releaseMempool ┌───────────────┐ ╭─────▶│ Idle │⇒ DONE │ └───────┬───────┘ │ │ │ │ acquireMempool │ │ │ │ │ │ (re)acquireMempool │ │ ╭───────╮ │ ▼ │ │ │ ┌───────────┴───┐ │ ╰──────┤ Acquired │◀──╯ └───┬───────────┘ │ ▲ nextTransaction │ │ hasTransaction │ │ sizeOfMempool │ │ ╰───────╯ Overview To inspect the node&amp;rsquo;s local mempool, one may rely on the mempool monitoring mini-protocol. This protocol provides way to list all transactions sitting in the mempool, but also, to query the size of the mempool, the number of transactions currently in the mempool as well as the current capacity (based on network parameters).</description></item></channel></rss>