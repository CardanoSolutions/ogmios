{ "type": "object"
, "title": "ogmios"
, "$schema": "https://json-schema.org/draft-07/schema"
, "required":
  [ "RequestNext", "RequestNextResponse"
  , "FindIntersect", "FindIntersectResponse"
  , "SubmitTx", "SubmitTxResponse"
  , "EvaluateTx", "EvaluateTxResponse"
  , "Acquire", "AcquireResponse"
  , "Release","ReleaseResponse"
  , "AwaitAcquire", "AwaitAcquireResponse"
  , "NextTx", "NextTxResponse"
  , "HasTx", "HasTxResponse"
  , "SizeAndCapacity", "SizeAndCapacityResponse"
  , "Query"
  , "QueryResponse[blockHeight]"
  , "QueryResponse[chainTip]"
  , "QueryResponse[currentEpoch]"
  , "QueryResponse[currentProtocolParameters]"
  , "QueryResponse[delegationsAndRewards]"
  , "QueryResponse[eraStart]"
  , "QueryResponse[eraSummaries]"
  , "QueryResponse[genesisConfig]"
  , "QueryResponse[ledgerTip]"
  , "QueryResponse[nonMyopicMemberRewards]"
  , "QueryResponse[poolIds]"
  , "QueryResponse[poolParameters]"
  , "QueryResponse[poolsRanking]"
  , "QueryResponse[proposedProtocolParameters]"
  , "QueryResponse[rewardsProvenance]"
  , "QueryResponse[rewardsProvenance']"
  , "QueryResponse[stakeDistribution]"
  , "QueryResponse[systemStart]"
  , "QueryResponse[utxo]"
  , "Fault"
  ]
, "properties":

  { "RequestNext":
    { "type": "object"
    , "description": "Request next block from the current cardano-node's cursor."
    , "required": [ "type", "version", "servicename", "methodname" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/request" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "RequestNext" ]
        }
      , "args":
        { "type": "object"
        , "additionalProperties": false
        }
      , "mirror":
        { "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    }

  , "RequestNextResponse":
    { "type": "object"
    , "description": "Request next block from the current cardano-node's cursor."
    , "required": [ "type", "version", "servicename", "methodname", "result" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/response" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "RequestNext" ]
        }
      , "result":
        { "type": "object"
        , "oneOf":
          [ { "required": ["RollForward"]
            , "title": "RollForward"
            , "additionalProperties": false
            , "properties":
              { "RollForward":
                { "type": "object"
                , "additionalProperties": false
                , "required": [ "tip", "block" ]
                , "properties":
                  { "block": { "$ref": "#/definitions/Block" }
                  , "tip": { "$ref": "#/definitions/TipOrOrigin" }
                  }
                }
              }
            }
          , { "required": ["RollBackward"]
            , "title": "RollBackward"
            , "additionalProperties": false
            , "properties":
              { "RollBackward":
                { "type": "object"
                , "additionalProperties": false
                , "required": [ "tip", "point" ]
                , "properties":
                  { "point": { "$ref": "#/definitions/PointOrOrigin" }
                  , "tip": { "$ref": "#/definitions/TipOrOrigin" }
                  }
                }
              }
            }
          ]
        }
      , "reflection":
        { "description": "Any value that was set by a client request in the 'mirror' field."
        }
      }
    }

  , "FindIntersect":
    { "type": "object"
    , "description": "Ask cardano-node to find an intersection between its local chain and the given points."
    , "required": [ "type", "version", "servicename", "methodname" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/request" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "FindIntersect" ]
        }
      , "args":
        { "type": "object"
        , "additionalProperties": false
        , "properties":
          { "points":
            { "type": "array"
            , "items": { "$ref": "#/definitions/PointOrOrigin" }
            }
          }
        }
      , "mirror":
        { "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    }

  , "FindIntersectResponse":
    { "type": "object"
    , "required": [ "type", "version", "servicename", "methodname", "result" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/response" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "FindIntersect" ]
        }
      , "result":
        { "description": "Intersection found if any, alongside the cardano-node's current tip."
        , "oneOf":
          [ { "type": "object"
            , "title": "IntersectionFound"
            , "additionalProperties": false
            , "required": ["IntersectionFound"]
            , "properties":
              { "IntersectionFound":
                { "type": "object"
                , "additionalProperties": false
                , "required": [ "point", "tip" ]
                , "properties":
                  { "point": { "$ref": "#/definitions/PointOrOrigin" }
                  , "tip": { "$ref": "#/definitions/TipOrOrigin" }
                  }
                }
              }
            }
          , { "type": "object"
            , "title": "IntersectionNotFound"
            , "additionalProperties": false
            , "required": ["IntersectionNotFound"]
            , "properties":
              { "IntersectionNotFound":
                { "type": "object"
                , "additionalProperties": false
                , "required": [ "tip" ]
                , "properties":
                  { "tip": { "$ref": "#/definitions/TipOrOrigin" }
                  }
                }
              }
            }
          ]
        }
      , "reflection":
        { "description": "Any value that was set by a client request in the 'mirror' field."
        }
      }
    }

  , "SubmitTx":
    { "type": "object"
    , "description": "Submit a signed and serialized Utxo transaction to the network."
    , "required": [ "type", "version", "servicename", "methodname" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/request" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "SubmitTx" ]
        }
      , "args":
        { "type": "object"
        , "additionalProperties": false
        , "required": ["submit"]
        , "properties":
          { "submit":
            { "type": "string"
            , "description": "CBOR-serialized signed transaction, in base64 (or base16)"
            , "contentEncoding": "base64"
            , "pattern": "^[A-Za-z0-9+/]=?=?$"
            }
          }
        }
      , "mirror":
        { "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    }

  , "SubmitTxResponse":
    { "type": "object"
    , "required": [ "type", "version", "servicename", "methodname", "result" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/response" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "SubmitTx" ]
        }
      , "result":
        { "oneOf":
          [ { "type": "object"
            , "title": "SubmitSuccess"
            , "additionalProperties": false
            , "required": ["SubmitSuccess"]
            , "properties":
              { "SubmitSuccess":
                { "type": "object"
                , "additionalProperties": false
                , "required": [ "txId" ]
                , "properties":
                  { "txId": { "$ref": "#/definitions/TxId" }
                  }
                }
              }
            }
          , { "type": "object"
            , "title": "SubmitFail"
            , "additionalProperties": false
            , "required": ["SubmitFail"]
            , "properties":
              { "SubmitFail": { "$ref": "#/definitions/SubmitTxError" }
              }
            }
          ]
        }
      , "reflection":
        { "description": "Any value that was set by a client request in the 'mirror' field."
        }
      }
    }

  , "EvaluateTx":
    { "type": "object"
    , "description": "Evaluate execution units for which redeemers's budget hasn't yet been set."
    , "required": [ "type", "version", "servicename", "methodname" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/request" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "EvaluateTx" ]
        }
      , "args":
        { "type": "object"
        , "additionalProperties": false
        , "required": ["evaluate"]
        , "properties":
          { "evaluate":
            { "type": "string"
            , "description": "CBOR-serialized signed transaction, in base64 (or base16)"
            , "contentEncoding": "base64"
            , "pattern": "^[A-Za-z0-9+/]=?=?$"
            }
          , "additionalUtxoSet":
            { "$ref": "#/definitions/Utxo"
            }
          }
        }
      , "mirror":
        { "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    }

  , "EvaluateTxResponse":
    { "type": "object"
    , "required": [ "type", "version", "servicename", "methodname", "result" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/response" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "EvaluateTx" ]
        }
      , "result":
        { "oneOf":
          [ { "$ref": "#/definitions/EvaluationResult" }
          , { "$ref": "#/definitions/EvaluationFailure" }
          ]
        }
      , "reflection":
        { "description": "Any value that was set by a client request in the 'mirror' field."
        }
      }
    }

  , "Acquire":
    { "type": "object"
    , "description": "Acquire a point on chain from which run queries."
    , "required": [ "type", "version", "servicename", "methodname" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/request" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "Acquire" ]
        }
      , "args":
        { "type": "object"
        , "additionalProperties": false
        , "required": ["point"]
        , "properties":
          { "point": { "$ref": "#/definitions/PointOrOrigin" }
          }
        }
      , "mirror":
        { "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    }

  , "AcquireResponse":
    { "type": "object"
    , "description": "Response to an 'Acquire' request."
    , "required": [ "type", "version", "servicename", "methodname", "result" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/response" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "Acquire" ]
        }
      , "result":
        { "oneOf":
          [ { "type": "object"
            , "title": "AcquireSuccess"
            , "additionalProperties": false
            , "required": [ "AcquireSuccess" ]
            , "properties":
              { "AcquireSuccess":
                { "type": "object"
                , "additionalProperties": false
                , "required": ["point"]
                , "properties":
                  { "point": { "$ref": "#/definitions/PointOrOrigin" }
                  }
                }
              }
            }
          , { "type": "object"
            , "title": "AcquireFailure"
            , "additionalProperties": false
            , "required": [ "AcquireFailure" ]
            , "properties":
              { "AcquireFailure":
                { "type": "object"
                , "additionalProperties": false
                , "required": ["failure"]
                , "properties":
                  { "failure": { "$ref": "#/definitions/AcquireFailureDetails" }
                  }
                }
              }
            }
          ]
        }
      , "reflection":
        { "description": "Any value that was set by a client request in the 'mirror' field."
        }
      }
    }

  , "Release":
    { "type": "object"
    , "description": "Release a point on chain previously acquired."
    , "required": [ "type", "version", "servicename", "methodname" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/request" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "Release" ]
        }
      , "args":
        { "type": "object"
        , "additionalProperties": false
        }
      , "mirror":
        { "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    }

  , "ReleaseResponse":
    { "type": "object"
    , "description": "Response to a 'Release' request."
    , "required": [ "type", "version", "servicename", "methodname", "result" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/response" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "Release" ]
        }
      , "result":
        { "type": "string"
        , "enum": ["Released"]
        }
      , "reflection":
        { "description": "Any value that was set by a client request in the 'mirror' field."
        }
      }
    }

  , "AwaitAcquire":
    { "type": "object"
    , "description": "Acquire a mempool snapshot. This is blocking until a new (i.e different) snapshot is available."
    , "required": [ "type", "version", "servicename", "methodname" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/request" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "AwaitAcquire" ]
        }
      , "args":
        { "type": "object"
        , "additionalProperties": false
        }
      , "mirror":
        { "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    }

  , "AwaitAcquireResponse":
    { "type": "object"
    , "description": "Response to a 'AwaitAcquire' request."
    , "required": [ "type", "version", "servicename", "methodname", "result" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/response" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "AwaitAcquire" ]
        }
      , "result":
        { "type": "object"
        , "title": "AwaitAcquired"
        , "additionalProperties": false
        , "required": [ "AwaitAcquired" ]
        , "properties":
          { "AwaitAcquired":
            { "type": "object"
            , "additionalProperties": false
            , "required": [ "slot" ]
            , "properties":
              { "slot": { "$ref": "#/definitions/Slot" }
              }
            }
          }
        }
      , "reflection":
        { "description": "Any value that was set by a client request in the 'mirror' field."
        }
      }
    }

  , "NextTx":
    { "type": "object"
    , "description": "Request the next transaction from an acquired snapshot."
    , "required": [ "type", "version", "servicename", "methodname" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/request" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "NextTx" ]
        }
      , "args":
        { "type": "object"
        , "additionalProperties": false
        , "properties":
          { "fields":
            { "type": "string"
            , "enum": [ "all" ]
            }
          }
        }
      , "mirror":
        { "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    }

  , "NextTxResponse":
    { "type": "object"
    , "description": "Response to a 'NextTx' request."
    , "required": [ "type", "version", "servicename", "methodname", "result" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/response" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "NextTx" ]
        }
      , "result":
        { "oneOf":
          [ { "$ref": "#/definitions/TxId" }
          , { "$ref": "#/definitions/Tx[Alonzo]" }
          , { "$ref": "#/definitions/Null" }
          ]
        }
      , "reflection":
        { "description": "Any value that was set by a client request in the 'mirror' field."
        }
      }
    }

  , "HasTx":
    { "type": "object"
    , "description": "Ask whether a given transaction is present in the acquired mempool snapshot."
    , "required": [ "type", "version", "servicename", "methodname" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/request" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "HasTx" ]
        }
      , "args":
        { "type": "object"
        , "additionalProperties": false
        , "required": [ "id" ]
        , "properties":
          { "id": { "$ref": "#/definitions/TxId" }
          }
        }
      , "mirror":
        { "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    }

  , "HasTxResponse":
    { "type": "object"
    , "description": "Response to a 'HasTx' request."
    , "required": [ "type", "version", "servicename", "methodname", "result" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/response" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "HasTx" ]
        }
      , "result":
        { "type": "boolean"
        }
      , "reflection":
        { "description": "Any value that was set by a client request in the 'mirror' field."
        }
      }
    }

  , "SizeAndCapacity":
    { "type": "object"
    , "description": "Get size and capacities of the mempool (acquired snapshot)."
    , "required": [ "type", "version", "servicename", "methodname" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/request" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "SizeAndCapacity" ]
        }
      , "args":
        { "type": "object"
        , "additionalProperties": false
        }
      , "mirror":
        { "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    }

  , "SizeAndCapacityResponse":
    { "type": "object"
    , "description": "Response to a 'SizeAndCapacity' request."
    , "required": [ "type", "version", "servicename", "methodname", "result" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/response" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "SizeAndCapacity" ]
        }
      , "result":
        { "$ref": "#/definitions/MempoolSizeAndCapacity"
        }
      , "reflection":
        { "description": "Any value that was set by a client request in the 'mirror' field."
        }
      }
    }

  , "ReleaseMempool":
    { "type": "object"
    , "description": "Release a previously acquired mempool snapshot."
    , "required": [ "type", "version", "servicename", "methodname" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/request" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "ReleaseMempool" ]
        }
      , "args":
        { "type": "object"
        , "additionalProperties": false
        }
      , "mirror":
        { "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    }

  , "ReleaseMempoolResponse":
    { "type": "object"
    , "description": "Response to a 'ReleaseMempool' request."
    , "required": [ "type", "version", "servicename", "methodname", "result" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/response" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "ReleaseMempool" ]
        }
      , "result":
        { "type": "string"
        , "enum": ["Released"]
        }
      , "reflection":
        { "description": "Any value that was set by a client request in the 'mirror' field."
        }
      }
    }

  , "Query":
    { "type": "object"
    , "description": "Query the current ledger tip."
    , "required": [ "type", "version", "servicename", "methodname" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/request" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "Query" ]
        }
      , "args":
        { "type": "object"
        , "additionalProperties": false
        , "required": ["query"]
        , "properties":
          { "query":
            { "anyOf":
              [ { "type": "string"
                , "title": "GetEraStart"
                , "enum": ["eraStart"]
                }
              , { "type": "string"
                , "title": "GetEraSummaries"
                , "enum": ["eraSummaries"]
                }
              , { "type": "string"
                , "title": "GetLedgerTip"
                , "enum": ["ledgerTip"]
                }
              , { "type": "string"
                , "title": "GetCurrentEpoch"
                , "enum": ["currentEpoch"]
                }
              , { "type": "object"
                , "title": "GetNonMyopicMemberRewards"
                , "additionalProperties": false
                , "required": ["nonMyopicMemberRewards"]
                , "properties":
                  { "nonMyopicMemberRewards":
                    { "oneOf":
                      [ { "type": "array"
                        , "title": "Lovelaces"
                        , "items": { "$ref": "#/definitions/Lovelace" }
                        }
                      , { "type": "array"
                        , "title": "Credentials"
                        , "items": { "$ref": "#/definitions/Digest[Blake2b]::Credential" }
                        }
                      ]
                    }
                  }
                }
              , { "type": "object"
                , "title": "GetDelegationsAndRewards"
                , "additionalProperties": false
                , "required": ["delegationsAndRewards"]
                , "properties":
                  { "delegationsAndRewards":
                    { "type": "array"
                    , "items": { "$ref": "#/definitions/Digest[Blake2b]::Credential" }
                    }
                  }
                }
              , { "type": "string"
                , "title": "GetCurrentProtocolParameters"
                , "enum": ["currentProtocolParameters"]
                }
              , { "type": "string"
                , "title": "GetProposedProtocolParameters"
                , "enum": ["proposedProtocolParameters"]
                }
              , { "type": "string"
                , "title": "GetStakeDistribution"
                , "enum": ["stakeDistribution"]
                }
              , { "type": "string"
                , "title": "GetUtxo"
                , "enum": ["utxo"]
                }
              , { "type": "object"
                , "title": "GetUtxo[byAddress]"
                , "additionalProperties": false
                , "required": ["utxo"]
                , "properties":
                  { "utxo":
                    { "type": "array"
                    , "items": { "$ref": "#/definitions/Address" }
                    }
                  }
                }
              , { "type": "object"
                , "title": "GetUtxo[byTxIn]"
                , "additionalProperties": false
                , "required": ["utxo"]
                , "properties":
                  { "utxo":
                    { "type": "array"
                    , "items": { "$ref": "#/definitions/TxIn" }
                    }
                  }
                }
              , { "type": "string"
                , "title": "GetGenesisConfig"
                , "enum": ["genesisConfig"]
                }
              , { "type": "string"
                , "title": "GetRewardsProvenance (deprecated)"
                , "enum": ["rewardsProvenance"]
                }
              , { "type": "string"
                , "title": "GetRewardsProvenance'"
                , "enum": ["rewardsProvenance'"]
                }
              , { "type": "string"
                , "title": "GetPoolsRanking"
                , "enum": ["poolsRanking"]
                }
              , { "type": "string"
                , "title": "GetPoolIds"
                , "enum": ["poolIds"]
                }
              , { "type": "object"
                , "title": "GetPoolParameters"
                , "additionalProperties": false
                , "required": ["poolParameters"]
                , "properties":
                  { "poolParameters":
                    { "type": "array"
                    , "items":
                      { "oneOf":
                        [ { "$ref": "#/definitions/PoolId" }
                        , { "type": "string", "contentEncoding": "base16", "pattern": "^[0-9a-f]+$" }
                        ]
                      }
                    }
                  }
                }
              , { "type": "string"
                , "title": "GetChainTip"
                , "enum": ["chainTip"]
                }
              , { "type": "string"
                , "title": "GetBlockHeight"
                , "enum": ["blockHeight"]
                }
              , { "type": "string"
                , "title": "GetSystemStart"
                , "enum": ["systemStart"]
                }
              ]
            }
          }
        }
      , "mirror":
        { "description": "An arbitrary JSON value that will be mirrored back in the response."
        }
      }
    }

  , "QueryResponse[eraStart]":
    { "type": "object"
    , "required": [ "type", "version", "servicename", "methodname", "result" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/response" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "Query" ]
        }
      , "result":
        { "oneOf":
          [ { "$ref": "#/definitions/Bound" }
          , { "$ref": "#/definitions/QueryUnavailableInCurrentEra" }
          ]
        }
      , "reflection":
        { "description": "Any value that was set by a client request in the 'mirror' field."
        }
      }
    }

  , "QueryResponse[eraSummaries]":
    { "type": "object"
    , "required": [ "type", "version", "servicename", "methodname", "result" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/response" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "Query" ]
        }
      , "result":
        { "oneOf":
          [ { "$ref": "#/definitions/QueryUnavailableInCurrentEra" }
          , { "type": "array"
            , "items": { "$ref": "#/definitions/EraSummary" }
            }
          ]
        }
      , "reflection":
        { "description": "Any value that was set by a client request in the 'mirror' field."
        }
      }
    }

  , "QueryResponse[ledgerTip]":
    { "type": "object"
    , "required": [ "type", "version", "servicename", "methodname", "result" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/response" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "Query" ]
        }
      , "result":
        { "oneOf":
          [ { "$ref": "#/definitions/PointOrOrigin" }
          , { "$ref": "#/definitions/EraMismatch" }
          , { "$ref": "#/definitions/QueryUnavailableInCurrentEra" }
          ]
        }
      , "reflection":
        { "description": "Any value that was set by a client request in the 'mirror' field."
        }
      }
    }

  , "QueryResponse[currentEpoch]":
    { "type": "object"
    , "required": [ "type", "version", "servicename", "methodname", "result" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/response" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "Query" ]
        }
      , "result":
        { "oneOf":
          [ { "$ref": "#/definitions/Epoch" }
          , { "$ref": "#/definitions/EraMismatch" }
          , { "$ref": "#/definitions/QueryUnavailableInCurrentEra" }
          ]
        }
      , "reflection":
        { "description": "Any value that was set by a client request in the 'mirror' field."
        }
      }
    }

  , "QueryResponse[nonMyopicMemberRewards]":
    { "type": "object"
    , "required": [ "type", "version", "servicename", "methodname", "result" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/response" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "Query" ]
        }
      , "result":
        { "oneOf":
          [ { "$ref": "#/definitions/NonMyopicMemberRewards" }
          , { "$ref": "#/definitions/EraMismatch" }
          , { "$ref": "#/definitions/QueryUnavailableInCurrentEra" }
          ]
        }
      , "reflection":
        { "description": "Any value that was set by a client request in the 'mirror' field."
        }
      }
    }

  , "QueryResponse[delegationsAndRewards]":
    { "type": "object"
    , "required": [ "type", "version", "servicename", "methodname", "result" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/response" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "Query" ]
        }
      , "result":
        { "oneOf":
          [ { "type": "object"
            , "additionalProperties": { "$ref": "#/definitions/DelegationsAndRewards" }
            , "propertyNames": { "pattern": "^[0-9]+|[0-9a-f]+$" }
            , "title": "DelegationsAndRewardsByAccounts"
            }
          , { "$ref": "#/definitions/EraMismatch" }
          , { "$ref": "#/definitions/QueryUnavailableInCurrentEra" }
          ]
        }
      , "reflection":
        { "description": "Any value that was set by a client request in the 'mirror' field."
        }
      }
    }

  , "QueryResponse[currentProtocolParameters]":
    { "type": "object"
    , "required": [ "type", "version", "servicename", "methodname", "result" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/response" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "Query" ]
        }
      , "result":
        { "anyOf":
          [ { "$ref": "#/definitions/ProtocolParameters[Shelley]" }
          , { "$ref": "#/definitions/ProtocolParameters[Alonzo]" }
          , { "$ref": "#/definitions/EraMismatch" }
          , { "$ref": "#/definitions/QueryUnavailableInCurrentEra" }
          ]
        }
      , "reflection":
        { "description": "Any value that was set by a client request in the 'mirror' field."
        }
      }
    }

  , "QueryResponse[proposedProtocolParameters]":
    { "type": "object"
    , "required": [ "type", "version", "servicename", "methodname", "result" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/response" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "Query" ]
        }
      , "result":
        { "anyOf":
          [ { "type": "object"
            , "title": "ProposedProtocolParameters[Shelley]"
            , "propertyNames": { "contentEncoding": "bech32", "pattern": "^[0-9a-f]+$" }
            , "additionalProperties": { "$ref": "#/definitions/ProtocolParameters[Shelley]" }
            }
          , { "type": "object"
            , "title": "ProposedProtocolParameters[Alonzo]"
            , "propertyNames": { "contentEncoding": "bech32", "pattern": "^[0-9a-f]+$" }
            , "additionalProperties": { "$ref": "#/definitions/ProtocolParameters[Alonzo]" }
            }
          , { "$ref": "#/definitions/EraMismatch" }
          , { "$ref": "#/definitions/QueryUnavailableInCurrentEra" }
          ]
        }
      , "reflection":
        { "description": "Any value that was set by a client request in the 'mirror' field."
        }
      }
    }

  , "QueryResponse[stakeDistribution]":
    { "type": "object"
    , "required": [ "type", "version", "servicename", "methodname", "result" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/response" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "Query" ]
        }
      , "result":
        { "oneOf":
          [ { "$ref": "#/definitions/PoolDistribution" }
          , { "$ref": "#/definitions/EraMismatch" }
          , { "$ref": "#/definitions/QueryUnavailableInCurrentEra" }
          ]
        }
      , "reflection":
        { "description": "Any value that was set by a client request in the 'mirror' field."
        }
      }
    }

  , "QueryResponse[utxo]":
    { "type": "object"
    , "required": [ "type", "version", "servicename", "methodname", "result" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/response" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "Query" ]
        }
      , "result":
        { "oneOf":
          [ { "$ref": "#/definitions/Utxo" }
          , { "$ref": "#/definitions/EraMismatch" }
          , { "$ref": "#/definitions/QueryUnavailableInCurrentEra" }
          ]
        }
      , "reflection":
        { "description": "Any value that was set by a client request in the 'mirror' field."
        }
      }
    }

  , "QueryResponse[genesisConfig]":
    { "type": "object"
    , "required": [ "type", "version", "servicename", "methodname", "result" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/response" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "Query" ]
        }
      , "result":
        { "oneOf":
          [ { "$ref": "#/definitions/CompactGenesis" }
          , { "$ref": "#/definitions/EraMismatch" }
          , { "$ref": "#/definitions/QueryUnavailableInCurrentEra" }
          ]
        }
      , "reflection":
        { "description": "Any value that was set by a client request in the 'mirror' field."
        }
      }
    }

  , "QueryResponse[rewardsProvenance]":
    { "type": "object"
    , "required": [ "type", "version", "servicename", "methodname", "result" ]
    , "description": "This query is now deprecated. Use /rewardsProvenance'/ instead."
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/response" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "Query" ]
        }
      , "result":
        { "oneOf":
          [ { "$ref": "#/definitions/RewardsProvenance" }
          , { "$ref": "#/definitions/EraMismatch" }
          , { "$ref": "#/definitions/QueryUnavailableInCurrentEra" }
          ]
        }
      , "reflection":
        { "description": "Any value that was set by a client request in the 'mirror' field."
        }
      }
    }

  , "QueryResponse[rewardsProvenance']":
    { "type": "object"
    , "required": [ "type", "version", "servicename", "methodname", "result" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/response" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "Query" ]
        }
      , "result":
        { "oneOf":
          [ { "$ref": "#/definitions/RewardsProvenance'" }
          , { "$ref": "#/definitions/EraMismatch" }
          , { "$ref": "#/definitions/QueryUnavailableInCurrentEra" }
          ]
        }
      , "reflection":
        { "description": "Any value that was set by a client request in the 'mirror' field."
        }
      }
    }

  , "QueryResponse[poolIds]":
    { "type": "object"
    , "required": [ "type", "version", "servicename", "methodname", "result" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/response" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "Query" ]
        }
      , "result":
        { "oneOf":
          [ { "type": "array"
            , "items": { "$ref": "#/definitions/PoolId" }
            }
          , { "$ref": "#/definitions/EraMismatch" }
          , { "$ref": "#/definitions/QueryUnavailableInCurrentEra" }
          ]
        }
      , "reflection":
        { "description": "Any value that was set by a client request in the 'mirror' field."
        }
      }
    }

  , "QueryResponse[poolParameters]":
    { "type": "object"
    , "required": [ "type", "version", "servicename", "methodname", "result" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/response" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "Query" ]
        }
      , "result":
        { "oneOf":
          [ { "type": "object"
            , "propertyNames": { "$ref": "#/definitions/PoolId" }
            , "additionalProperties": { "$ref": "#/definitions/PoolParameters" }
            }
          , { "$ref": "#/definitions/EraMismatch" }
          , { "$ref": "#/definitions/QueryUnavailableInCurrentEra" }
          ]
        }
      , "reflection":
        { "description": "Any value that was set by a client request in the 'mirror' field."
        }
      }
    }

  , "QueryResponse[poolsRanking]":
    { "type": "object"
    , "required": [ "type", "version", "servicename", "methodname", "result" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/response" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "Query" ]
        }
      , "result":
        { "oneOf":
          [ { "$ref": "#/definitions/PoolsRanking" }
          , { "$ref": "#/definitions/EraMismatch" }
          , { "$ref": "#/definitions/QueryUnavailableInCurrentEra" }
          ]
        }
      , "reflection":
        { "description": "Any value that was set by a client request in the 'mirror' field."
        }
      }
    }

  , "QueryResponse[blockHeight]":
    { "type": "object"
    , "required": [ "type", "version", "servicename", "methodname", "result" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/response" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "Query" ]
        }
      , "result":
        { "oneOf":
          [ { "$ref": "#/definitions/BlockNoOrOrigin" }
          , { "$ref": "#/definitions/QueryUnavailableInCurrentEra" }
          ]
        }
      , "reflection":
        { "description": "Any value that was set by a client request in the 'mirror' field."
        }
      }
    }

  , "QueryResponse[chainTip]":
    { "type": "object"
    , "required": [ "type", "version", "servicename", "methodname", "result" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/response" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "Query" ]
        }
      , "result":
        { "oneOf":
          [ { "$ref": "#/definitions/PointOrOrigin" }
          , { "$ref": "#/definitions/QueryUnavailableInCurrentEra" }
          ]
        }
      , "reflection":
        { "description": "Any value that was set by a client request in the 'mirror' field."
        }
      }
    }

  , "QueryResponse[systemStart]":
    { "type": "object"
    , "required": [ "type", "version", "servicename", "methodname", "result" ]
    , "additionalProperties": false
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/response" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "methodname":
        { "type": "string"
        , "enum": [ "Query" ]
        }
      , "result":
        { "oneOf":
          [ { "$ref": "#/definitions/UtcTime" }
          , { "$ref": "#/definitions/QueryUnavailableInCurrentEra" }
          ]
        }
      , "reflection":
        { "description": "Any value that was set by a client request in the 'mirror' field."
        }
      }
    }

  , "Fault":
    { "type": "object"
    , "description": "A fault in the JSON-WSP protocol. This is returned by the server when a request from clients is deemed invalid or, when the server was unable to reply to a well-formed request."
    , "required": [ "type", "version", "servicename", "fault" ]
    , "additionalProperties": false
    , "examples":
      [ { "type": "jsonwsp/fault"
        ,  "version": "1.0"
        , "servicename": "ogmios"
        , "fault":
          { "string": "Invalid request: invalid query."
          , "code": "client"
          }
        }
      ]
    , "properties":
      { "type":
        { "type": "string"
        , "enum": [ "jsonwsp/fault" ]
        }
      , "version":
        { "type": "string"
        , "enum": [ "1.0" ]
        }
      , "servicename":
        { "type": "string"
        , "enum": [ "ogmios" ]
        }
      , "fault":
        { "type": "object"
        , "required": [ "code", "string" ]
        , "additionalProperties": false
        , "properties":
          { "code":
            { "type": "string"
            , "description": "An error code telling about the nature of the fault."
            , "enum": [ "incompatible", "server", "client" ]
            }
          , "string":
            { "type": "string"
            , "description": "A descriptive error message giving hints about the fault."
            }
          }
        }
      }
    }
  }

, "definitions":
  { "AcquireFailureDetails":
    { "type": "string"
    , "enum": [ "pointTooOld", "pointNotOnChain" ]
    }

  , "Address":
    { "type": "string"
    , "description": "A Cardano address (either legacy format or new format)."
    , "contentEncoding": "bech32|base58"
    , "pattern": "[1-9A-HJ-NP-Za-km-z]*"
    , "examples":
      [ "addr1q9d34spgg2kdy47n82e7x9pdd6vql6d2engxmpj20jmhuc2047yqd4xnh7u6u5jp4t0q3fkxzckph4tgnzvamlu7k5psuahzcp"
      , "DdzFFzCqrht8mbSTZHqpM2u4HeND2mdspsaBhdQ1BowPJBMzbDeBMeKgqdoKqo1D4sdPusEdZJVrFJRBBxX1jUEofNDYCJSZLg8MkyCE"
      ]
    }

  , "AddressAttributes":
    { "type": "string"
    , "description": "Extra attributes carried by Byron addresses (network magic and/or HD payload)."
    , "contentEncoding": "base64"
    }

  , "AssetQuantity":
    { "type": "integer"
    , "description": "A number of asset, can be negative went burning assets."
    }

  , "AuxiliaryData":
    { "type": "object"
    , "additionalProperties": false
    , "required": [ "hash", "body" ]
    , "properties":
      { "hash": { "$ref": "#/definitions/Digest[Blake2b]::AuxiliaryDataBody" }
      , "body": { "$ref": "#/definitions/AuxiliaryDataBody" }
      }
    }

  , "AuxiliaryDataBody":
    { "type": "object"
    , "additionalProperties": false
    , "properties":
      { "blob": { "$ref": "#/definitions/Metadata" }
      , "scripts":
        { "type": "array"
        , "items": { "$ref": "#/definitions/Script" }
        }
      }
    }

  , "Block":
    { "description": "A Cardano Block, which can take different forms depending on the era."
    , "oneOf":
      [ { "type": "object"
        , "required": [ "byron" ]
        , "title": "byron"
        , "additionalProperties": false
        , "properties":
          { "byron": { "$ref": "#/definitions/Block[Byron]" }
          }
        }
      , { "type": "object"
        , "required": [ "shelley" ]
        , "title": "shelley"
        , "additionalProperties": false
        , "properties":
          { "shelley": { "$ref": "#/definitions/Block[Shelley]" }
          }
        }
      , { "type": "object"
        , "required": [ "allegra" ]
        , "title": "allegra"
        , "additionalProperties": false
        , "properties":
          { "allegra": { "$ref": "#/definitions/Block[Allegra]" }
          }
        }
      , { "type": "object"
        , "required": [ "mary" ]
        , "title": "mary"
        , "additionalProperties": false
        , "properties":
          { "mary": { "$ref": "#/definitions/Block[Mary]" }
          }
        }
      , { "type": "object"
        , "required": [ "alonzo" ]
        , "title": "alonzo"
        , "additionalProperties": false
        , "properties":
          { "alonzo": { "$ref": "#/definitions/Block[Alonzo]" }
          }
        }
      ]
    }

  , "Block[Byron]":
    { "description": "A block in the Byron era. Most blocks are stanard blocks, but once at the beginning of each era is an additional epoch boundary block (a.k.a. EBB)"
    , "oneOf":
      [ { "required": [ "hash", "header", "body" ]
        , "title": "standard block"
        , "additionalProperties": false
        , "examples":
          [ { "hash": "70efc0c5cd2438d79676ed2e6a2dbb03b878e4420eeb03be899a66ea4edb9125"
            , "header":
              { "protocolMagicId": 1097911063
              , "prevHash": "f7b488614495a8edc61aae5d368ef09f4c18156f57634a1465dcf6483cae2b5b"
              , "slot": 11029
              , "blockHeight": 9999
              , "protocolVersion":
                { "major": 0
                , "minor": 0
                , "patch": 0
                }
              , "softwareVersion":
                { "appName": "cardano-sl"
                , "number": 0
                }
              , "proof":
                { "utxo":
                  { "number": 0
                  , "root": "0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"
                  , "witnessesHash": "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b"
                  }
                , "delegation": "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b"
                , "update": "4e66280cd94d591072349bec0a3090a53aa945562efb6d08d56e53654b0e4098"
                }
              , "genesisKey": "cb51d29ab94e50d9a144d4f426564cec700dee4d9e857aacf91d3b689374d81f742a452818cf2489c16dfc186f6e9c76b7df40845b7c450785f02d8809767575"
              , "signature":
                { "dlgCertificate":
                  { "epoch": 0
                  , "issuerVk": "cb51d29ab94e50d9a144d4f426564cec700dee4d9e857aacf91d3b689374d81f742a452818cf2489c16dfc186f6e9c76b7df40845b7c450785f02d8809767575"
                  , "delegateVk": "7ec249d890d0aaf9a81207960c163ae2d6ac5e715ca6b96d5860e50d9f2b2b2a1d568faa87c9cc8bfd433a3224a96ec5d101b4b6e9db008db8857f49bae294b2"
                  , "signature": "owS/RbRPvMx49UuQFKay1DVGMev/I1rrsucaFb3Vgr43lDhMG6cTuZ7wV2bpK49Diy/FrzSfK7FuheN4CqhMBw=="
                  }
                , "signature": "gi2uNsjBab7lBHnNgsPwofcgKC+i2FYZrlrx/vaQze1actNwHh3vnrvz3PMRDWszeP82/iwIN54nANEhTv9EAg=="
                }
              }
            , "body":
              { "txPayload": []
              , "dlgPayload": []
              , "updatePayload":
                { "proposal": null
                , "votes": []
                }
              }
            }
          ]
        , "properties":
          { "hash": { "$ref": "#/definitions/Digest[Blake2b]::Block[*].header" }
          , "header":
            { "type": "object"
            , "additionalProperties": false
            , "required": [ "blockHeight", "genesisKey", "prevHash", "proof", "protocolMagicId", "protocolVersion", "signature", "slot", "softwareVersion" ]
            , "$omitted-if-compact": ["proof", "signature"]
            , "properties":
              { "blockHeight": { "$ref": "#/definitions/BlockNo" }
              , "genesisKey": { "$ref": "#/definitions/GenesisVerificationKey" }
              , "prevHash": { "$ref": "#/definitions/Digest[Blake2b]::Block[*].header" }
              , "proof": { "$ref": "#/definitions/BlockProof" }
              , "protocolMagicId": { "$ref": "#/definitions/ProtocolMagicId" }
              , "protocolVersion": { "$ref": "#/definitions/ProtocolVersion" }
              , "signature": { "$ref": "#/definitions/BlockSignature" }
              , "slot": { "$ref": "#/definitions/Slot" }
              , "softwareVersion": { "$ref": "#/definitions/SoftwareVersion" }
              }
            }
          , "body":
            { "type": "object"
            , "additionalProperties": false
            , "required": [ "txPayload", "dlgPayload", "updatePayload" ]
            , "$omitted-if-compact": ["dlgPayload"]
            , "properties":
              { "txPayload":
                { "type": "array"
                , "items": { "$ref": "#/definitions/Tx[Byron]" }
                }
              , "dlgPayload":
                { "type": "array"
                , "items": { "$ref": "#/definitions/DlgCertificate"}
                }
              , "updatePayload":
                { "type": "object"
                , "additionalProperties": false
                , "required": [ "proposal", "votes" ]
                , "$omitted-if-compact": ["votes"]
                , "properties":
                  { "proposal":
                    { "oneOf":
                      [ { "$ref": "#/definitions/Null"}
                      , { "type": "object"
                        , "title": "UpdateProposal[Byron]"
                        , "additionalProperties": false
                        , "required": [ "body", "issuer", "signature" ]
                        , "properties":
                          { "body":
                            { "type": "object"
                            , "additionalProperties": false
                            , "required": [ "protocolVersion", "parametersUpdate", "softwareVersion", "metadata" ]
                            , "properties":
                              { "protocolVersion": { "$ref": "#/definitions/ProtocolVersion" }
                              , "softwareVersion": { "$ref": "#/definitions/SoftwareVersion" }
                              , "metadata":
                                { "type": "object"
                                , "additionalProperties": { "type": "string" }
                                }
                              , "parametersUpdate": { "$ref": "#/definitions/ProtocolParameters[Byron]" }
                              }
                            }
                          , "issuer": { "$ref": "#/definitions/IssuerVrfVerificationKey" }
                          , "signature": { "$ref": "#/definitions/IssuerSignature" }
                          }
                        }
                      ]
                    }
                  , "votes":
                    { "type": "array"
                    , "items": { "$ref": "#/definitions/Vote" }
                    }
                  }
                }
              }
            }
          }
        }
      , { "required": [ "hash", "header" ]
        , "title": "epoch boundary block"
        , "additionalProperties": false
        , "properties":
          { "hash": { "$ref": "#/definitions/Digest[Blake2b]::Block[*].header" }
          , "header":
            { "type": "object"
            , "additionalProperties": false
            , "required": [ "blockHeight", "epoch", "prevHash" ]
            , "properties":
              { "blockHeight": { "$ref": "#/definitions/BlockNo" }
              , "epoch": { "$ref": "#/definitions/Epoch" }
              , "prevHash": { "$ref": "#/definitions/Digest[Blake2b]::Block[*].header" }
              }
            }
          }
        }
      ]
    }

  , "Block[Shelley]":
    { "type": "object"
    , "additionalProperties": false
    , "examples":
      [ { "body":
          [ { "id": "9fdc525c20bc00d9dfa9d14904b65e01910c0dfe3bb39865523c1e20eaeb0903"
            , "body":
              { "inputs":
                [ { "txId": "b984f9c8b36f3fc2d6a5ae5cd7e9741419399d182e5fa1112d94555d40dd3406"
                  , "index": 0
                  }
                ]
              , "outputs":
                [ { "address": "addr1qx8gq5rhhrwt0tp3s8qexqglp9tpwruvtfvswplf4juwjqtdqmlq5k5vkmftes6jtqw75cntkke0vmkls4nckte0576st3e6s6"
                  , "value": 97825743
                  }
                ]
              , "certificates":
                [ { "stakeKeyRegistration": "6d06fe0a5a8cb6d2bcc352581dea626bb5b2f66edf85678b2f2fa7b5"
                  }
                , { "stakeDelegation":
                    { "delegator": "6d06fe0a5a8cb6d2bcc352581dea626bb5b2f66edf85678b2f2fa7b5"
                    , "delegatee": "pool1pshqcksxywy68lt04lw6uf35f4yssekh5dx2mxqmyrukke2z5y3"
                    }
                  }
                ]
              , "withdrawals": {}
              , "fee": 174257
              , "timeToLive": 4700420
              , "update": null
              }
            , "witness":
              { "signatures":
                { "386020d73807f285ba3259efacd9fbea1939ebd97dc2ddc3b178d427e5a047f6": "5bckfySir7f4G+SV83UPw0+42qqFcEU+sdmK+uejnx6gn6OFMckasHBY8xPWabJ9w5xMmD8sRJ5VC7bNsUU0Ag=="
                , "de735ba8771f521b50bc3130c4a7d6f0784df718d3ed3ca32befd9a4650c2e8a": "KHlV88SX+sODj4EqHW7U1wxLL2nVuq/wg43rdaarckroEZc3k1h7YcH0CyAoBvy5+xv6aZ6clDvceeUliD6RCw=="
                }
              , "scripts": {}
              , "bootstrap": []
              }
            , "metadata": null
            }
          ]
        , "header":
          { "blockHeight": 4500510
          , "slot": 4693240
          , "prevHash": "286b7c1c47393c7d12abcc1c5d94fea4300f987cd76fe27ec2147dca18e6a8e6"
          , "issuerVk": "5fddeedade2714d6db2f9e1104743d2d8d818ecddc306e176108db14caadd441"
          , "issuerVrf": "axwYeh90N9B55BQwtqn8eymybovJxGco5VE6kwTyIm8="
          , "nonce":
            { "output": "GTPlGb3NpwZxuBsnoXhkvHoZvs+D9UsDCwb6WTLBm8lu3gKOOwSdStwGxaGIE7+FAcPXaOJTcUNw2rm48N9RwA=="
            , "proof": "XHi/02KfvJqpg7x7yVQTZBYXZPxRapD2fhBMZWYlZIGQrMrjGeScmIPIYR4VvyYUJ/cthOLGcxhTpR8z1kfLX0QRzwO7vRSuZl/uMs4E3go="
            }
          , "leaderValue":
            { "output": "wrqii+3nrDTTquWVCIwn8lPt52duurZ++RyfZQtlwUssRJnQybirFrRRNUETpA7sXPzu66j2X9qt7nvHjGB7DQ=="
            , "proof": "ooR9VQrP8yl2Iu3+v03l5F42rETNzGVljB3OsEYUDMp+iC4LZRmu+6wcfeM4y5qCyr42PPtAaaebnHRV/1oHJNqSyW+2iRuoKywh0X3uKgk="
            }
          , "blockSize": 426
          , "blockHash": "ca26d2d83980492d433751b388423196c5d86219e206be6895b7c169c957e987"
          , "opCert":
            { "hotVk": "BUxG5N9t61Y1poqk9d7xRXOnAeqTfDzeCE9unqDE8Ww="
            , "count": 0
            , "kesPeriod": 0
            , "sigma": "SA6eoFShv4vC+6Z9JVlr/rPIuXLHuUOJlT4BFcFgWj0xUYjVCcVTz9ImxIPGNeuCemDXW9mEhWoK+42KNDWcBw=="
            }
          , "protocolVersion":
            { "major": 2
            , "minor": 0
            }
          , "signature": "W6pICB+fcHajaybaN4l3Llep5/Olun1rtKucRlnNZgrpS+i7Y0Y2mgQpNztXe5VvHCUl/M8YcpowUxTLRusLBTLjNz4SlRg4XfBcIOrcDNWcbl+koOXPdX5DUyZqVIWeHlWkxgZWqX+ARwnMV+//wGBs4M86ngLLMr+BrkWyXniZrw+Bt63Yf/cqpyTznauI/I24ZBWnV9cfbmu7zQPaSzEVzDmNgX4JJhznWolFxgqhNNRfYobkNOBu5cycu5Gff8G6EQJnq51Uz0TFN7kQXTM6YVJlwkaXWLwBNayUGzW5KbQ1rChYjAbQ5N+uNpoK6Iff+7hDWW81UgsK+yu0XJM1gXrfgmsNyOL0h2JINXrfAUaBALBUBYnLmi3h0Vmn45SRP40QyuDAmd/hu7S5SUCUY2S7K97p+ZA5bgPqZ8FqjO3W7SfAgpgIKa0gJFRLBiNm03TWRPxNDAq6eIfvBnFlf0QD9WPtuFif84Z9UnyBZuIyZPY4v65Ksy+TZLCCc0w0Z4xWfY3Bo1vvMLsD1OHABYMtt7MbKxW48GgfYTheM3izQfZrbHIiUsYZDCGnVyThud1efl+p9K81nks9IQ=="
          }
        , "headerHash": "3a85a47e2fdd8350667fe6a858018318b9c200c4d62f8d85c8aaf0fb273572d5"
        }
      ]
    , "properties":
      { "body":
        { "type": "array"
        , "items": { "$ref": "#/definitions/Tx[Shelley]" }
        }
      , "headerHash": { "$ref": "#/definitions/Digest[Blake2b]::Block[*].header" }
      , "header":
        { "type": "object"
        , "additionalProperties": false
        , "required":
          [ "blockHeight","slot","prevHash","issuerVk","issuerVrf","leaderValue"
          , "blockSize", "blockHash","opCert","protocolVersion","signature"
          ]
        , "$omitted-if-compact": ["signature", "nonce", "leaderValue", "opCert", "protocolVersion"]
        , "properties":
          { "blockHeight": { "$ref": "#/definitions/BlockNo" }
          , "slot": { "$ref": "#/definitions/Slot" }
          , "prevHash": { "$ref": "#/definitions/Digest[Blake2b]::Block[*].header" }
          , "issuerVk": { "$ref": "#/definitions/VerificationKey" }
          , "issuerVrf": { "$ref": "#/definitions/IssuerVrfVerificationKey" }
          , "nonce": { "$ref": "#/definitions/CertifiedVrf" }
          , "leaderValue": { "$ref": "#/definitions/CertifiedVrf" }
          , "blockSize": { "$ref": "#/definitions/BlockSize" }
          , "blockHash": { "$ref": "#/definitions/Digest[Blake2b]::Block[*].body" }
          , "opCert": { "$ref": "#/definitions/OpCert" }
          , "protocolVersion": { "$ref": "#/definitions/ProtocolVersion" }
          , "signature": { "$ref": "#/definitions/IssuerSignature" }
          }
        }
      }
    }

  , "Block[Allegra]":
    { "type": "object"
    , "additionalProperties": false
    , "examples":
      [ { "body":
          [ { "id": "9fdc525c20bc00d9dfa9d14904b65e01910c0dfe3bb39865523c1e20eaeb0903"
            , "body":
              { "inputs":
                [ { "txId": "b984f9c8b36f3fc2d6a5ae5cd7e9741419399d182e5fa1112d94555d40dd3406"
                  , "index": 0
                  }
                ]
              , "outputs":
                [ { "address": "addr1qx8gq5rhhrwt0tp3s8qexqglp9tpwruvtfvswplf4juwjqtdqmlq5k5vkmftes6jtqw75cntkke0vmkls4nckte0576st3e6s6"
                  , "value": 97825743
                  }
                ]
              , "certificates":
                [ { "stakeKeyRegistration": "6d06fe0a5a8cb6d2bcc352581dea626bb5b2f66edf85678b2f2fa7b5"
                  }
                , { "stakeDelegation":
                    { "delegator": "6d06fe0a5a8cb6d2bcc352581dea626bb5b2f66edf85678b2f2fa7b5"
                    , "delegatee": "pool1pshqcksxywy68lt04lw6uf35f4yssekh5dx2mxqmyrukke2z5y3"
                    }
                  }
                ]
              , "withdrawals": {}
              , "fee": 174257
              , "timeToLive": 4700420
              , "update": null
              }
            , "witness":
              { "signatures":
                { "386020d73807f285ba3259efacd9fbea1939ebd97dc2ddc3b178d427e5a047f6": "5bckfySir7f4G+SV83UPw0+42qqFcEU+sdmK+uejnx6gn6OFMckasHBY8xPWabJ9w5xMmD8sRJ5VC7bNsUU0Ag=="
                , "de735ba8771f521b50bc3130c4a7d6f0784df718d3ed3ca32befd9a4650c2e8a": "KHlV88SX+sODj4EqHW7U1wxLL2nVuq/wg43rdaarckroEZc3k1h7YcH0CyAoBvy5+xv6aZ6clDvceeUliD6RCw=="
                }
              , "scripts": {}
              , "bootstrap": []
              }
            , "metadata": null
            }
          ]
        , "header":
          { "blockHeight": 4500510
          , "slot": 4693240
          , "prevHash": "286b7c1c47393c7d12abcc1c5d94fea4300f987cd76fe27ec2147dca18e6a8e6"
          , "issuerVk": "5fddeedade2714d6db2f9e1104743d2d8d818ecddc306e176108db14caadd441"
          , "issuerVrf": "axwYeh90N9B55BQwtqn8eymybovJxGco5VE6kwTyIm8="
          , "nonce":
            { "output": "GTPlGb3NpwZxuBsnoXhkvHoZvs+D9UsDCwb6WTLBm8lu3gKOOwSdStwGxaGIE7+FAcPXaOJTcUNw2rm48N9RwA=="
            , "proof": "XHi/02KfvJqpg7x7yVQTZBYXZPxRapD2fhBMZWYlZIGQrMrjGeScmIPIYR4VvyYUJ/cthOLGcxhTpR8z1kfLX0QRzwO7vRSuZl/uMs4E3go="
            }
          , "leaderValue":
            { "output": "wrqii+3nrDTTquWVCIwn8lPt52duurZ++RyfZQtlwUssRJnQybirFrRRNUETpA7sXPzu66j2X9qt7nvHjGB7DQ=="
            , "proof": "ooR9VQrP8yl2Iu3+v03l5F42rETNzGVljB3OsEYUDMp+iC4LZRmu+6wcfeM4y5qCyr42PPtAaaebnHRV/1oHJNqSyW+2iRuoKywh0X3uKgk="
            }
          , "blockSize": 426
          , "blockHash": "ca26d2d83980492d433751b388423196c5d86219e206be6895b7c169c957e987"
          , "opCert":
            { "hotVk": "BUxG5N9t61Y1poqk9d7xRXOnAeqTfDzeCE9unqDE8Ww="
            , "count": 0
            , "kesPeriod": 0
            , "sigma": "SA6eoFShv4vC+6Z9JVlr/rPIuXLHuUOJlT4BFcFgWj0xUYjVCcVTz9ImxIPGNeuCemDXW9mEhWoK+42KNDWcBw=="
            }
          , "protocolVersion":
            { "major": 2
            , "minor": 0
            }
          , "signature": "W6pICB+fcHajaybaN4l3Llep5/Olun1rtKucRlnNZgrpS+i7Y0Y2mgQpNztXe5VvHCUl/M8YcpowUxTLRusLBTLjNz4SlRg4XfBcIOrcDNWcbl+koOXPdX5DUyZqVIWeHlWkxgZWqX+ARwnMV+//wGBs4M86ngLLMr+BrkWyXniZrw+Bt63Yf/cqpyTznauI/I24ZBWnV9cfbmu7zQPaSzEVzDmNgX4JJhznWolFxgqhNNRfYobkNOBu5cycu5Gff8G6EQJnq51Uz0TFN7kQXTM6YVJlwkaXWLwBNayUGzW5KbQ1rChYjAbQ5N+uNpoK6Iff+7hDWW81UgsK+yu0XJM1gXrfgmsNyOL0h2JINXrfAUaBALBUBYnLmi3h0Vmn45SRP40QyuDAmd/hu7S5SUCUY2S7K97p+ZA5bgPqZ8FqjO3W7SfAgpgIKa0gJFRLBiNm03TWRPxNDAq6eIfvBnFlf0QD9WPtuFif84Z9UnyBZuIyZPY4v65Ksy+TZLCCc0w0Z4xWfY3Bo1vvMLsD1OHABYMtt7MbKxW48GgfYTheM3izQfZrbHIiUsYZDCGnVyThud1efl+p9K81nks9IQ=="
          }
        , "headerHash": "3a85a47e2fdd8350667fe6a858018318b9c200c4d62f8d85c8aaf0fb273572d5"
        }
      ]
    , "properties":
      { "body":
        { "type": "array"
        , "items": { "$ref": "#/definitions/Tx[Allegra]" }
        }
      , "headerHash": { "$ref": "#/definitions/Block[Shelley]/properties/headerHash" }
      , "header": { "$ref": "#/definitions/Block[Shelley]/properties/header" }
      }
    }

  , "Block[Mary]":
    { "type": "object"
    , "additionalProperties": false
    , "examples":
      [ { "body":
          [ { "id": "85070fae1939d851fb50cb64d5c8c043fff628530f02a0a56575738926205de3"
            , "body":
              { "inputs":
                [ { "txId": "89e229cfe25fa75e8e09da42bd7d7f2308dead431ceae59d0f0707cb833fe46a"
                  , "index": 0
                  }
                ]
              , "outputs":
                [ { "address": "addr1q9d34spgg2kdy47n82e7x9pdd6vql6d2engxmpj20jmhuc2047yqd4xnh7u6u5jp4t0q3fkxzckph4tgnzvamlu7k5psuahzcp"
                  , "value":
                    { "coins": 104699792
                    , "assets": {}
                    }
                  }
                , { "address": "addr1q8lmu79hgm3sppz8dta3aftf0cwh2v2eja56wqvzqy4jj0zjt7qgvj7saxdxve35c4ehuxuam4czlz9fw6ls7zr4as9s609d7u"
                  , "value":
                    { "coins": 3000000
                    , "assets":
                      { "5d9d887de76a2c9d057b3e5d34d5411f7f8dc4d54f0c06e8ed2eb4a9.494e4459": 35000000000000
                      }
                    }
                  }
                ]
              , "certificates": []
              , "withdrawals": {}
              , "fee": 403300
              , "validityInterval":
                { "invalidBefore": null
                , "invalidHereafter": 23279333
                }
              , "update": null
              , "mint":
                { "coins": 0
                , "assets": {}
                }
              }
            , "witness":
              { "signatures":
                { "a900560b6c0964492849eb5311acac881edeb8d2282122b895fd418243c92f4e": "3TLin5vgz4dQDomhMjW9q4VIQD/X6Q9ECWkA8kVOz/c8R2c4mO1P1+LD/9n2ouHOANNC5ZgzwV2ojAVpZw4IBA=="
                , "5c19b9b0dd58b782dcac33cdc925f74c1385d8aae5912f7e1040a2d24a47e4eb": "qjqis5n/XGVp5PCIe0h8h/+ZO6rdIClBfzb7SEaaG4kAuY+zMAnfA57oxcLI6MA81rJ/nVct7FDtLKEHjimlDg=="
                }
              , "scripts": {}
              , "bootstrap": []
              }
            , "metadata":
              { "hash": "69453cc9796ac4987abcdcbfcf087b287d9f5d698aa32960e542cd97baf00429"
              , "body":
                { "blob":
                  { "411":
                    { "list":
                      [ { "string": "Minted by Andrew from BCSH!"
                        }
                      ]
                    }
                  }
                , "scripts": []
                }
              }
            }
          ]
          , "header":
            { "blockHeight": 5416746
            , "slot": 23272147
            , "prevHash": "d7e88e5abb70d9a8c2ff37fe2d7d9a08be91e8821751b8d34ffbb9364f497787"
            , "issuerVk": "a35f527080d2f9184347b43b4f5205557ca9a86a2e4fb3225ae4f477b81d90fb"
            , "issuerVrf": "4mSfHroaqvbOqZtUoDtJm7t+9rOv4f8/j91ugsw0LiE="
            , "nonce":
              { "output": "dRdKKUTP8dXczeALMgi6Ld4JlQPp36PbHJqoEMCGpTfXvpevh1bOuTg5ITV6M551E8QpoI6Jzwy2oNHTVlswNQ=="
              , "proof": "yB84OdAnPSjaRBAasHk1Njw4Edmq2wIcJB9e5U10kRuGkLjW5zclz2NPlUdRVrtcLpJLc/W7L9pUYsdolQ8b/BXXp8w0oiMdUp+UgJ7s4QY="
              }
            , "leaderValue":
              { "output": "AALyNsHBmH7EvBsY+WLGB6A07OJOfjrBiYpv313+TvE0JfuHjdaPHaH7C17sJTem37ZN4p5hiOQe2OFwXOe3bA=="
              , "proof": "DehTPTyVgmoGJFcg1YGFjRNkPX5r9FdR2OPW1cLM9UPPq5PMBRcjmzJ+BiJL2Tjj2XkWeUTERVWCBjAV4e2/JCBaZcAgh2kigeU123UbcQg="
            }
            , "blockSize": 426
            , "blockHash": "a36fca2d54d6dc88d7fd417adfde656749ace8f4a86f3c6918eb1edf29deab45"
            , "opCert":
              { "hotVk": "igqoraJVCnAvSbGkMIpLK55ojLSxPNjrFo5d2ZIqsRE="
              , "count": 0
              , "kesPeriod": 155
              , "sigma": "/VtuaWMMmmxa904U5W2LpgAF7JhJBpbZAuBKbjYsc+70rqsv04Y1/JwmoWU7yt0UviliC2J9ZiAfVSDDox3HDQ=="
              }
            , "protocolVersion":
              { "major": 4
              , "minor": 0
              }
            , "signature": "W8DDcf7hD05oAHd5NEIBG9kdMUNeybuEl32lzm7Cbb5FgQiksJib4OH3M06khy2QkJZV9IkVoWjfcJuVBpaWA8VxBwf1xEXVEOOgj9AxV8JkVlhVJNZ3h59aAoIome/CK+LScYQWytbOAZV6peVVfFpCu2AjXwx02xFPPXHy6PEBLz/jxJSu3TR+Wb1sEqNyxaSjUwanWjTszF5YjTquuK9upuHw6kLP2fNcDLvOxK/1TcbUWDmuK47L3eyOYWs52+bMuAFyeDDpNAPMc9zdq0uTteRQATY5dqpUh/X3nLKzrIHbVXLwTMk2ep6uiuVSeDePI1Q6xPx2AbILk4MlU2l0am5yQn6hjw9DwGKPZaFI+tSFPxWhjdrUmkvKYM3a9pZ94ehmjNe2ArREStq5LPqkGv7tPoYC1FaXIEypD+WHILrBv02D1rZ8lm25eWDXwcEYXdoDJ82/ULBvf3h3Ix9PtLD8B8dHbchxKlTYpdGptIIGueR9XZoxEFZfl0C2x+w4IwZvoQCBO+nATUq7VilE6DSwg5eoZH3pvoOvRFLkR7Q5q1aUyuJi1ZMoaQacZ10TPpkVeoIx3NFFK81Daw=="
            }
          , "headerHash": "6e15e485f3cf61492ca8150039647fe4be80eb43fcac5a536c170fbabc6a12f2"
        }
      ]
    , "properties":
      { "body":
        { "type": "array"
        , "items": { "$ref": "#/definitions/Tx[Mary]" }
        }
      , "headerHash": { "$ref": "#/definitions/Block[Shelley]/properties/headerHash" }
      , "header": { "$ref": "#/definitions/Block[Shelley]/properties/header" }
      }
    }

  , "Block[Alonzo]":
    { "type": "object"
    , "additionalProperties": false
    , "examples": []
    , "properties":
      { "body":
        { "type": "array"
        , "items": { "$ref": "#/definitions/Tx[Alonzo]" }
        }
      , "headerHash": { "$ref": "#/definitions/Block[Shelley]/properties/headerHash" }
      , "header": { "$ref": "#/definitions/Block[Shelley]/properties/header" }
      }
    }

  , "BlockNo":
    { "type": "integer"
    , "description": "A block number, the i-th block to be minted is number i."
    , "minimum": 0
    , "maximum": 18446744073709552999
    }

  , "BlockNoOrOrigin":
    { "oneOf":
      [ { "$ref": "#/definitions/BlockNo" }
      , { "$ref": "#/definitions/Origin" }
      ]
    }

  , "BlockProof":
    { "type": "object"
    , "additionalProperties": false
    , "required": [ "utxo", "delegation", "update" ]
    , "properties":
      { "utxo":
        { "type": "object"
        , "additionalProperties": false
        , "required": [ "number", "root", "witnessesHash" ]
        , "properties":
          { "number": { "$ref": "#/definitions/UInt32" }
          , "root": { "$ref": "#/definitions/Digest[Blake2b]::MerkleRoot" }
          , "witnessesHash": { "$ref": "#/definitions/Digest[Blake2b]::Block[Byron].body.txPayload[].witness" }
          }
        }
      , "delegation": { "$ref": "#/definitions/Digest[Blake2b]::Block[Byron].body.dlgPayload" }
      , "update": { "$ref": "#/definitions/Digest[Blake2b]::Block[Byron].body.updatePayload" }
      }
    }

  , "BlockSignature":
    { "type": "object"
    , "additionalProperties": false
    , "required": [ "dlgCertificate", "signature" ]
    , "properties":
      { "dlgCertificate": { "$ref": "#/definitions/DlgCertificate" }
      , "signature": { "$ref": "#/definitions/IssuerSignature" }
      }
    }

  , "BlockSize":
    { "type": "integer"
    , "description": "The size of the block in bytes."
    , "minimum": 0
    , "maximum": 18446744073709552999
    }

  , "BootstrapWitness":
    { "type": "object"
    , "examples":
      [ { "signature": "ZGdic3hnZ3RvZ2hkanB0ZXR2dGtjb2N2eWZpZHFxZ2d1cmpocmhxYWlpc3BxcnVlbGh2eXBxeGVld3ByeWZ2dw=="
        , "key": "deeb8f82f2af5836ebbc1b450b6dbf0b03c93afe5696f10d49e8a8304ebfac01"
        , "addressAttributes": "cA=="
        , "chainCode": "b6dbf0b03c93afe5696f10d49e8a8304ebfac01deeb8f82f2af5836ebbc1b450"
        }
      , { "signature": "KYCDveFX76KYEg6Axad/RG5+b5QbJdtYQSNA6kPjqsHh5cIwYPQyqquLJcwo9uDDfqUNmu7n2NUG+o7t2a1Hjg=="
        , "key": "0c02af01eaacc939b3d0d817f4eb57d323ea5686cb1fecb8de821df1296b84a7"
        , "chainCode": null
        , "addressAttributes": null
        }
      ]
    , "additionalProperties": false
    , "properties":
      { "signature": { "$ref": "#/definitions/Signature" }
      , "chainCode":
        { "oneOf":
          [ { "$ref": "#/definitions/ChainCode" }
          , { "$ref": "#/definitions/Null"}
          ]
        }
      , "addressAttributes":
        { "oneOf":
          [ { "$ref": "#/definitions/AddressAttributes" }
          , { "$ref": "#/definitions/Null"}
          ]
        }
      , "key": { "$ref": "#/definitions/VerificationKey" }
      }
    }

  , "Bound":
    { "type": "object"
    , "description": "An era bound which captures the time, slot and epoch at which the era start. The time is relative to the start time of the network."
    , "additionalProperties": false
    , "required": ["time", "slot", "epoch"]
    , "properties":
      { "time": { "$ref": "#/definitions/RelativeTime" }
      , "slot": { "$ref": "#/definitions/Slot" }
      , "epoch": { "$ref": "#/definitions/Epoch" }
      }
    }

  , "Certificate":
    { "oneOf":
      [ { "type": "object"
        , "description": "A stake delegation certificate, from a delegator to a stake pool."
        , "title": "stakeDelegation"
        , "additionalProperties": false
        , "required": ["stakeDelegation"]
        , "properties":
          { "stakeDelegation":
            { "type": "object"
            , "additionalProperties": false
            , "required": ["delegator", "delegatee"]
            , "properties":
              { "delegator": { "$ref": "#/definitions/Digest[Blake2b]::Credential" }
              , "delegatee": { "$ref": "#/definitions/PoolId" }
              }
            }
          }
        , "examples":
          [ { "stakeDelegation":
              { "delegator": "6d06fe0a5a8cb6d2bcc352581dea626bb5b2f66edf85678b2f2fa7b5"
              , "delegatee": "pool1pshqcksxywy68lt04lw6uf35f4yssekh5dx2mxqmyrukke2z5y3"
              }
            }
          ]
        }
      , { "type": "object"
        , "description": "A stake key registration certificate."
        , "title": "stakeKeyRegistration"
        , "additionalProperties": false
        , "required": ["stakeKeyRegistration"]
        , "properties":
          { "stakeKeyRegistration": { "$ref": "#/definitions/Digest[Blake2b]::Credential" }
          }
        , "examples":
          [ { "stakeKeyRegistration": "6d06fe0a5a8cb6d2bcc352581dea626bb5b2f66edf85678b2f2fa7b5"
            }
          ]
        }
      , { "type": "object"
        , "description": "A stake key de-registration certificate."
        , "title": "stakeKeyDeregistration"
        , "additionalProperties": false
        , "required": ["stakeKeyDeregistration"]
        , "properties":
          { "stakeKeyDeregistration": { "$ref": "#/definitions/Digest[Blake2b]::Credential" }
          }
        , "examples":
          [ { "stakeKeyDeregistration": "6d06fe0a5a8cb6d2bcc352581dea626bb5b2f66edf85678b2f2fa7b5"
            }
          ]
        }
      , { "type": "object"
        , "description": "A pool registration certificate."
        , "title": "poolRegistration"
        , "additionalProperties": false
        , "required": ["poolRegistration"]
        , "properties":
          { "poolRegistration": { "$ref": "#/definitions/PoolParameters" }
          }
        , "examples":
          [ { "poolRegistration":
              { "id": "pool1agk62kg0s9606v78exurl53mqsdu44d6qeuzypur5e7ku6gpgzp"
              , "vrf": "c91697932cef010ced94eae6854436f8f30a18dbcd16e9176514f9612816023e"
              , "pledge": 458907757199
              , "cost": 340000000
              , "margin": "499/10000"
              , "rewardAccount": "stake1uy3kcacyk50twxlzluarxwy0wv0nzyt42ecruehek9k5m8g08gvjy"
              , "owners":
                [ "236c7704b51eb71be2ff3a33388f731f31117556703e66f9b16d4d9d"
                ]
              , "relays":
                [ { "port": 3001
                  , "ipv4": "54.163.147.116"
                  , "ipv6": null
                  }
                ]
              , "metadata":
                { "url": "https://www.sophias-pool.com/poolInfo"
                , "hash": "abb6c63334b2c5d107802f932479fc146454a632e886f2b4276d6d00c1d023a2"
                }
              }
            }
          ]
        }
      , { "type": "object"
        , "description": "A pool retirement certificate."
        , "additionalProperties": false
        , "title": "poolRetirement"
        , "required": ["poolRetirement"]
        , "properties":
          { "poolRetirement":
            { "type": "object"
            , "additionalProperties": false
            , "required": ["poolId", "retirementEpoch"]
            , "properties":
              { "retirementEpoch": { "$ref": "#/definitions/Epoch" }
              , "poolId": { "$ref": "#/definitions/PoolId" }
              }
            }
          }
        , "examples":
          [ { "poolRetirement":
              { "poolId": "pool14cq225dlh7qy7tcc35fgrkr9yyprlk4cppytjmdv7e0gwm4w9q6"
              , "retirementEpoch": 237
              }
            }
          ]
        }
      , { "type": "object"
        , "title": "genesisDelegation"
        , "additionalProperties": false
        , "required": ["genesisDelegation"]
        , "properties":
          { "genesisDelegation":
            { "type": "object"
            , "additionalProperties": false
            , "required": ["delegateKeyHash","verificationKeyHash","vrfVerificationKeyHash"]
            , "properties":
              { "delegateKeyHash": { "$ref": "#/definitions/Digest[Blake2b]::VerificationKey" }
              , "verificationKeyHash": { "$ref": "#/definitions/Digest[Blake2b]::VerificationKey" }
              , "vrfVerificationKeyHash": { "$ref": "#/definitions/Digest[Blake2b]::VrfVerificationKey" }
              }
            }
          }
        }
      , { "type": "object"
        , "title": "moveInstantaneousRewards"
        , "description": "Either `value` or `rewards` will be present, but never both."
        , "additionalProperties": false
        , "required": ["moveInstantaneousRewards"]
        , "properties":
          { "moveInstantaneousRewards":
            { "type": "object"
            , "additionalProperties": false
            , "required": ["pot"]
            , "properties":
              { "rewards": { "$ref": "#/definitions/Rewards" }
              , "value":  { "$ref": "#/definitions/Lovelace" }
              , "pot": { "$ref": "#/definitions/RewardPot" }
              }
            }
          }
        }
      ]
    }

  , "CertifiedVrf":
    { "type": "object"
    , "additionalProperties": false
    , "properties":
      { "proof": { "$ref": "#/definitions/VrfProof" }
      , "output": { "$ref": "#/definitions/VrfOutput" }
      }
    }

  , "ChainCode":
    { "type": "string"
    , "description": "An Ed25519-BIP32 chain-code for key deriviation."
    , "contentEncoding": "base16"
    }

  , "CompactGenesis":
    { "type": "object"
    , "description": "A compact (without genesis UTxO) representation of the genesis configuration."
    , "additionalProperties": false
    , "required":
      [ "systemStart"
      , "networkMagic"
      , "network"
      , "activeSlotsCoefficient"
      , "securityParameter"
      , "epochLength"
      , "slotsPerKesPeriod"
      , "maxKesEvolutions"
      , "slotLength"
      , "updateQuorum"
      , "maxLovelaceSupply"
      , "protocolParameters"
      ]
    , "properties":
      { "systemStart": { "$ref": "#/definitions/UtcTime" }
      , "networkMagic": { "$ref": "#/definitions/NetworkMagic" }
      , "network": { "$ref": "#/definitions/Network" }
      , "activeSlotsCoefficient": { "$ref": "#/definitions/Ratio" }
      , "securityParameter": { "$ref": "#/definitions/UInt64" }
      , "epochLength": { "$ref": "#/definitions/Epoch" }
      , "slotsPerKesPeriod": { "$ref": "#/definitions/UInt64" }
      , "maxKesEvolutions": { "$ref": "#/definitions/UInt64" }
      , "slotLength": { "$ref": "#/definitions/SlotLength" }
      , "updateQuorum": { "$ref": "#/definitions/UInt64" }
      , "maxLovelaceSupply": { "$ref": "#/definitions/UInt64" }
      , "protocolParameters": { "$ref": "#/definitions/ProtocolParameters[Shelley]" }
      }
    , "examples":
      [ { "systemStart": "2017-09-23T21:44:51Z"
        , "networkMagic": 764824073
        , "network": "mainnet"
        , "activeSlotsCoefficient": "1/20"
        , "securityParameter": 2160
        , "epochLength": 432000
        , "slotsPerKesPeriod": 129600
        , "maxKesEvolutions": 62
        , "slotLength": 1
        , "updateQuorum": 5
        , "maxLovelaceSupply": 45000000000000000
        , "protocolParameters":
          { "minFeeCoefficient": 44
          , "minFeeConstant": 155381
          , "maxBlockBodySize": 65536
          , "maxBlockHeaderSize": 1100
          , "maxTxSize": 16384
          , "stakeKeyDeposit": 2000000
          , "poolDeposit": 500000000
          , "poolRetirementEpochBound": 18
          , "desiredNumberOfPools": 150
          , "poolInfluence": "3/10"
          , "monetaryExpansion": "3/1000"
          , "treasuryExpansion": "1/5"
          , "decentralizationParameter": "1/1"
          , "extraEntropy": "neutral"
          , "protocolVersion":
            { "major": 2
            , "minor": 0
            }
          , "minUtxoValue": 1000000
          , "minPoolCost": 340000000
          }
        }
      ]
    }

  , "CostModels":
    { "type": "object"
    , "additionalProperties": { "$ref": "#/definitions/CostModel" }
    , "propertyNames": { "$ref": "#/definitions/Language" }
    , "examples":
      [ { "plutus:v1":
          { "k": 14
          , "a": 123
          }
        }
      ]
    }

  , "CostModel":
    { "type": "object"
    , "additionalProperties": { "$ref": "#/definitions/Int64" }
    }

  , "Datum":
    { "type": "string"
    , "contentEncoding": "base64"
    , "pattern": "^[A-Za-z0-9+/]*=?=?$"
    }

  , "DelegationsAndRewards":
    { "type": "object"
    , "additionalProperties": false
    , "properties":
      { "delegate": { "$ref": "#/definitions/PoolId" }
      , "rewards": { "$ref": "#/definitions/Lovelace" }
      }
    , "examples":
      [ { "bc1597ad71c55d2d009a9274b3831ded155118dd769f5376decc1369":
          { "delegate": "pool1kchver88u3kygsak8wgll7htr8uxn5v35lfrsyy842nkscrzyvj"
          , "rewards": 219558722
          }
        }
      ]
    }

  , "Digest[Blake2b]::AuxiliaryDataBody":
    { "type": "string"
    , "description": "A Blake2b 32-byte digest of an 'AuxiliaryDataBody', serialised as CBOR."
    , "contentEncoding": "base16"
    , "minLength": 64
    , "maxLength": 64
    }

  , "Digest[Blake2b]::Block[*].body":
    { "type": "string"
    , "description": "A Blake2b 32-byte digest of an era-independent block body."
    , "contentEncoding": "base16"
    , "minLength": 64
    , "maxLength": 64
    }

  , "Digest[Blake2b]::Block[*].header":
    { "type": "string"
    , "description": "A Blake2b 32-byte digest of an era-independent block header, serialised as CBOR."
    , "contentEncoding": "base16"
    , "minLength": 64
    , "maxLength": 64
    }

  , "Digest[Blake2b]::Block[Byron].body.dlgPayload":
    { "type": "string"
    , "description": "A Blake2b 32-byte digest of a Byron delegation payload, CBOR-encoded."
    , "contentEncoding": "base16"
    , "minLength": 64
    , "maxLength": 64
    }

  , "Digest[Blake2b]::Block[Byron].body.txPayload[].witness":
    { "type": "string"
    , "description": "A Blake2b 32-byte digest of a Byron transaction witness set, CBOR-encoded."
    , "contentEncoding": "base16"
    , "minLength": 64
    , "maxLength": 64
    }

  , "Digest[Blake2b]::Block[Byron].body.updatePayload":
    { "type": "string"
    , "description": "A Blake2b 32-byte digest of a Byron update payload, CBOR-encoded."
    , "contentEncoding": "base16"
    , "minLength": 64
    , "maxLength": 64
    }

  , "Digest[Blake2b]::Credential":
    { "type": "string"
    , "description": "A Blake2b 28-byte digest of a verification key or a script."
    , "contentEncoding": "base16"
    , "minLength": 56
    , "maxLength": 56
    }

  , "Digest[Blake2b]::Datum":
    { "type": "string"
    , "description": "A Blake2b 32-byte digest of a serialized datum, CBOR-encoded."
    , "contentEncoding": "base16"
    , "minLength": 64
    , "maxLength": 64
    }

  , "Digest[Blake2b]::MerkleRoot":
    { "type": "string"
    , "description": "A Blake2b 32-byte digest of a Merkle tree (or all block's transactions) root hash."
    , "contentEncoding": "base16"
    , "minLength": 64
    , "maxLength": 64
    }

  , "Digest[Blake2b]::Nonce":
    { "type": "string"
    , "description": "A Blake2b 32-byte digest of some arbitrary to make a nonce."
    , "contentEncoding": "base16"
    , "minLength": 64
    , "maxLength": 64
    }

  , "Digest[Blake2b]::PoolMetadata":
    { "type": "string"
    , "description": "A Blake2b 32-byte digest of stake pool (canonical) JSON metadata."
    , "contentEncoding": "base16"
    }

  , "Digest[Blake2b]::Script":
    { "type": "string"
    , "description": "A Blake2b 32-byte digest of a phase-1 or phase-2 script, CBOR-encoded."
    , "contentEncoding": "base16"
    , "minLength": 56
    , "maxLength": 56
    }

  , "Digest[Blake2b]::ScriptIntegrity":
    { "type": "string"
    , "description": "A Blake2b 32-byte digest of a script-integrity hash (i.e redeemers, datums and cost model, CBOR-encoded)."
    , "contentEncoding": "base16"
    , "minLength": 64
    , "maxLength": 64
    }

  , "Digest[Blake2b]::VerificationKey":
    { "type": "string"
    , "description": "A Blake2b 28-byte digest of an Ed25519 verification key."
    , "contentEncoding": "base16"
    , "minLength": 56
    , "maxLength": 56
    }

  , "Digest[Blake2b]::VrfVerificationKey":
    { "type": "string"
    , "description": "A Blake2b 32-byte digest of a VRF verification key."
    , "contentEncoding": "base16"
    , "minLength": 64
    , "maxLength": 64
    }

  , "DlgCertificate":
    { "type": "object"
    , "description": "A (Byron) delegation certificate."
    , "additionalProperties": false
    , "required": [ "epoch", "issuerVk", "delegateVk", "signature" ]
    , "properties":
      { "epoch": { "$ref": "#/definitions/Epoch" }
      , "issuerVk": { "$ref": "#/definitions/GenesisVerificationKey" }
      , "delegateVk": { "$ref": "#/definitions/GenesisVerificationKey" }
      , "signature": { "$ref": "#/definitions/IssuerSignature" }
      }
    }

  , "Epoch":
    { "type": "integer"
    , "description": "An epoch number or length."
    , "minimum": 0
    , "maximum": 18446744073709552000
    }

  , "Era":
    { "type": "string"
    , "enum": ["Byron", "Shelley", "Allegra", "Mary", "Alonzo"]
    }

  , "EraMismatch":
    { "type": "object"
    , "description": "An era mismatch between a client request and the era the ledger is in. This may occur when running queries on a syncing node and/or when the node is crossing an era."
    , "additionalProperties": false
    , "required": [ "eraMismatch" ]
    , "properties":
      { "eraMismatch":
        { "type": "object"
        , "additionalProperties": false
        , "required": [ "queryEra", "ledgerEra" ]
        , "properties":
          { "queryEra": { "$ref": "#/definitions/Era" }
          , "ledgerEra": { "$ref": "#/definitions/Era" }
          }
        }
      }
    }

  , "EraParameters":
    { "type": "object"
    , "description": "Parameters that can vary across hard forks."
    , "additionalProperties": false
    , "required": [ "epochLength", "slotLength", "safeZone" ]
    , "properties":
      { "epochLength": { "$ref": "#/definitions/Epoch" }
      , "slotLength": { "$ref": "#/definitions/SlotLength" }
      , "safeZone":
        { "oneOf":
          [ { "$ref": "#/definitions/SafeZone" }
          , { "type": "null" }
          ]
        }
      }
    }

  , "EraSummary":
    { "type": "object"
    , "description": "Summary of the confirmed parts of the ledger."
    , "additionalProperties": false
    , "required": [ "start", "end", "parameters" ]
    , "properties":
      { "start": { "$ref": "#/definitions/Bound" }
      , "end":
        { "oneOf":
          [ { "$ref": "#/definitions/Bound" }
          , { "type": "null" }
          ]
        }
      , "parameters": { "$ref": "#/definitions/EraParameters" }
      }
    }

  , "EvaluationFailure":
    { "type": "object"
    , "additionalProperties": false
    , "required": [ "EvaluationFailure" ]
    , "properties":
      { "EvaluationFailure":
        { "oneOf":
            [ { "$ref": "#/definitions/EvaluationFailure[ScriptFailures]" }
            , { "$ref": "#/definitions/EvaluationFailure[UnknownInputs]" }
            , { "$ref": "#/definitions/EvaluationFailure[IncompatibleEra]" }
            , { "$ref": "#/definitions/EvaluationFailure[UncomputableSlotArithmetic]" }
            , { "$ref": "#/definitions/EvaluationFailure[AdditionalUtxoOverlap]" }
            ]
        }
      }
    }

  , "EvaluationFailure[ScriptFailures]":
    { "type": "object"
    , "additionalProperties": false
    , "required": [ "ScriptFailures" ]
    , "properties":
      { "ScriptFailures":
        { "type": "object"
        , "propertyNames": { "$ref": "#/definitions/RedeemerPointer" }
        , "additionalProperties": { "$ref": "#/definitions/ScriptFailure" }
        }
      }
    }

  , "EvaluationFailure[UnknownInputs]":
    { "type": "object"
    , "additionalProperties": false
    , "required": [ "UnknownInputs" ]
    , "properties":
      { "UnknownInputs":
        { "type": "array"
        , "items": { "$ref": "#/definitions/TxIn" }
        }
      }
    }

  , "EvaluationFailure[IncompatibleEra]":
    { "type": "object"
    , "description": "Returned when trying to evaluate execution units of a pre-Alonzo transaction. Note that this isn't possible with Ogmios because transactions are always de-serialized as Alonzo transactions."
    , "additionalProperties": false
    , "required": [ "IncompatibleEra" ]
    , "properties":
      { "IncompatibleEra":
        { "type": "string"
        , "description": "The era in which the transaction has been identified."
        , "enum": [ "Byron", "Shelley", "Allegra", "Mary" ]
        }
      }
    }

  , "EvaluationFailure[UncomputableSlotArithmetic]":
    { "type": "object"
    , "description": "May happen when evaluating a transaction with validity bounds that goes past the foreseeable end of the current era (i.e. near a hardfork)."
    , "additionalProperties": false
    , "required": [ "UncomputableSlotArithmetic" ]
    , "properties":
      { "UncomputableSlotArithmetic":
        { "type": "string"
        , "description": "An error message, possibly meaningful but likely unreadable."
        }
      }
    }

  , "EvaluationFailure[AdditionalUtxoOverlap]":
    { "type": "object"
    , "description": "Happens when providing an additional UTXO set which overlaps with the UTXO on-chain."
    , "additionalProperties": false
    , "required": [ "AdditionalUtxoOverlap" ]
    , "properties":
      { "AdditionalUtxoOverlap":
        { "type": "array"
        , "items": { "$ref": "#/definitions/TxIn" }
        }
      }
    }

  , "EvaluationResult":
    { "type": "object"
    , "additionalProperties": false
    , "required": [ "EvaluationResult" ]
    , "properties":
      { "EvaluationResult":
        { "type": "object"
        , "propertyNames": { "$ref": "#/definitions/RedeemerPointer" }
        , "additionalProperties": { "$ref": "#/definitions/ExUnits" }
        }
      }
    }

  , "ExUnits":
    { "type": "object"
    , "additionalProperties": false
    , "required": [ "memory", "steps" ]
    , "properties":
      { "memory": { "$ref": "#/definitions/UInt64" }
      , "steps": { "$ref": "#/definitions/UInt64" }
      }
    }

  , "GenesisVerificationKey":
    { "type": "string"
    , "description": "An Ed25519-BIP32 Byron genesis delegate verification key with chain-code."
    , "contentEncoding": "base16"
    , "minLength": 128
    , "maxLength": 128
    }

  , "IndividualPoolRewardsProvenance":
    { "type": "object"
    , "additionalProperties": false
    , "required":
      [ "totalMintedBlocks"
      , "totalStakeShare"
      , "activeStakeShare"
      , "ownerStake"
      , "parameters"
      , "pledgeRatio"
      , "maxRewards"
      , "apparentPerformance"
      , "totalRewards"
      , "leaderRewards"
      ]
    , "properties":
      { "totalMintedBlocks":
          { "$ref": "#/definitions/UInt64"
          , "description": "The number of blocks the pool produced."
          }
      , "totalStakeShare":
          { "$ref": "#/definitions/Ratio"
          , "description": "The stake pool's stake share (portion of the total stake)."
          }
      , "activeStakeShare":
          { "$ref": "#/definitions/Ratio"
          , "description": "The stake pool's active stake share (portion of the active stake)."
          }
      , "ownerStake":
          { "$ref": "#/definitions/OwnerStake"
          }
      , "parameters":
          { "$ref": "#/definitions/PoolParameters" }
      , "pledgeRatio":
          { "$ref": "#/definitions/Ratio"
          , "description": "The stake pool's pledge ratio (over its total stake)."
          }
      , "maxRewards":
          { "$ref": "#/definitions/Lovelace"
          , "description": "The maximum number of Lovelace this stake pool can earn."
          }
      , "apparentPerformance":
          { "$ref": "#/definitions/Ratio"
          , "description": "The stake pool's apparent performance according to Section 5.5.2 of the Shelley Design Spec."
          }
      , "totalRewards":
          { "$ref": "#/definitions/Lovelace"
          , "description": "The total Lovelace earned by the stake pool."
          }
      , "leaderRewards":
          { "$ref": "#/definitions/Lovelace"
          , "description": "The total Lovelace earned by the stake pool leader."
          }
      }
    }

  , "Int64":
    { "type": "integer"
    , "minimum": -9223372036854775808
    , "maximum": 9223372036854775807
    }

  , "InvalidEntity":
    { "oneOf":
      [ { "type": "object"
        , "additionalProperties": false
        , "required": [ "type", "entity" ]
        , "properties":
          { "type":
            { "type": "string"
            , "enum": [ "address" ]
            }
          , "entity": { "$ref": "#/definitions/Address" }
          }
        }
      , { "type": "object"
        , "additionalProperties": false
        , "required": [ "type", "entity" ]
        , "properties":
          { "type":
            { "type": "string"
            , "enum": [ "poolRegistration" ]
            }
          , "entity": { "$ref": "#/definitions/PoolId" }
          }
        }
      , { "type": "object"
        , "additionalProperties": false
        , "required": [ "type", "entity" ]
        , "properties":
          { "type":
            { "type": "string"
            , "enum": [ "rewardAccount" ]
            }
          , "entity": { "$ref": "#/definitions/RewardAccount" }
          }
        }
      ]
    }

  , "IssuerVrfVerificationKey":
    { "type": "string"
    , "description": "A key identifying a block issuer."
    , "contentEncoding": "base64"
    }

  , "IssuerSignature":
    { "type": "string"
    , "description": "Signature proving a block was issued by a given issuer VRF key."
    , "contentEncoding": "base64"
    }

  , "Language":
    { "type": "string"
    , "enum": [ "plutus:v1", "plutus:v2" ]
    }

  , "Lovelace":
    { "type": "integer"
    , "description": "A number of lovelace, possibly large when summed up."
    }

  , "LovelaceDelta":
    { "type": "integer"
    , "description": "An amount, possibly negative, in Lovelace (1e6 Lovelace = 1 Ada)."
    , "minimum": -9223372036854775808
    , "maximum": 9223372036854775807
    }

  , "KesVerificationKey":
    { "type": "string"
    , "contentEncoding": "base64"
    }

  , "MempoolSizeAndCapacity":
    { "type": "object"
    , "additionalProperties": false
    , "required": [ "capacity", "currentSize", "numberOfTxs" ]
    , "properties":
      { "capacity": { "$ref": "#/definitions/UInt32" }
      , "currentSize": { "$ref": "#/definitions/UInt32" }
      , "numberOfTxs": { "$ref": "#/definitions/UInt32" }
      }
    }

  , "Metadata":
    { "type": "object"
    , "propertyNames": { "pattern": "^-?[0-9]+$" }
    , "examples":
      [ { "42":
          { "int": 14
          }
        }
      , { "42":
          { "string": "Some Text"
          }
        }
      , { "42":
          { "list":
            [ { "int": 1 }
            , { "int": 2 }
            , { "int": 3 }
            ]
          }
        , "1337":
          { "list":
            [ { "string": "MyString" }
            , { "map":
                [ { "k": { "string": "signature" }
                  , "v": { "bytes": "b359cedd0ccb" }
                  }
                , { "k":
                    { "list":
                      [ { "string": "keys can also" }
                      , { "string": "be compound objects" }
                      ]
                    }
                  , "v":
                    { "int": -42
                    }
                  }
                ]
              }
            ]
          }
        }
      ]
    , "additionalProperties": { "$ref": "#/definitions/Metadatum" }
    }

  , "Metadatum":
    { "oneOf":
      [ { "type": "object"
        , "title": "int"
        , "additionalProperties": false
        , "required": ["int"]
        , "properties":
          { "int":
              { "type": "integer"
              }
          }
        }
      , { "type": "object"
        , "title": "string"
        , "additionalProperties": false
        , "required": ["string"]
        , "properties":
          { "string":
              { "type": "string"
              }
          }
        }
      , { "type": "object"
        , "title": "bytes"
        , "additionalProperties": false
        , "required": ["bytes"]
        , "properties":
          { "bytes":
            { "type": "string"
            , "contentEncoding": "base16"
            , "pattern": "^[0-9a-f]*$"
            }
          }
        }
      , { "type": "object"
        , "title": "list"
        , "additionalProperties": false
        , "required": ["list"]
        , "properties":
          { "list":
            { "type": "array"
            , "items": { "$ref": "#/definitions/Metadatum" }
            }
          }
        }
      , { "type": "object"
        , "title": "map"
        , "additionalProperties": false
        , "required": ["map"]
        , "properties":
          { "map":
            { "type": "array"
            , "items": { "$ref": "#/definitions/MetadatumMap" }
            }
          }
        }
      ]
    }

  , "MetadatumMap":
    { "type": "object"
    , "additionalProperties": false
    , "required": ["k", "v"]
    , "properties":
      { "k": { "$ref": "#/definitions/Metadatum" }
      , "v": { "$ref": "#/definitions/Metadatum" }
      }
    }

  , "Network":
    { "type": "string"
    , "description": "A network target, as defined since the Shelley era."
    , "enum": [ "mainnet", "testnet" ]
    }

  , "NetworkMagic":
    { "type": "integer"
    , "description": "A magic number for telling networks apart. (e.g. 764824073)"
    , "minimum": 0
    , "maximum": 4294967296
    , "examples":
      [ 764824073
      ]
    }

  , "Nonce":
    { "oneOf":
      [ { "type": "string"
        , "enum": ["neutral"]
        , "title": "neutral"
        }
      , { "$ref": "#/definitions/Digest[Blake2b]::Nonce" }
      ]
    }

  , "NonMyopicMemberRewards":
    { "type": "object"
    , "description": "Rewards that can be expected assuming a pool is fully saturated. Such rewards are said non-myopic, in opposition to short-sighted rewards looking at immediate benefits. Keys of the map can be either Lovelace amounts or account credentials depending on the query."
    , "propertyNames": { "pattern": "^[0-9]+|[0-9a-f]+$" }
    , "additionalProperties":
      { "type": "object"
      , "propertyNames": { "contentEncoding": "bech32", "pattern": "^[0-9a-f]+$" }
      , "additionalProperties":
        { "type": "number"
        , "minimum": 0
        }
      }
    , "examples":
      [ { "1000000":
          { "pool1qqqqqdk4zhsjuxxd8jyvwncf5eucfskz0xjjj64fdmlgj735lr9": 688
          , "pool1qqqqpanw9zc0rzh0yp247nzf2s35uvnsm7aaesfl2nnejaev0uc": 676
          , "pool1qqqqzyqf8mlm70883zht60n4q6uqxg4a8x266sewv8ad2grkztl": 0
          , "pool1qqqqrwzy7njvjq9wph7usj5gghm3py9c97688ek8pgc7uem9cfz": 653
          }
        , "bc1597ad71c55d2d009a9274b3831ded155118dd769f5376decc1369":
          { "pool1qgmwcxs8d8qmr0vtvsqd9u8gugrventh5dcqukmu79e2sgfuu8t": 96946024
          , "pool1qfzjwrtupyvzx0atp5pa3m82v7s8z2eqyqffa0grpyf4j349h6r": 0
          , "pool1qfxukshs4fkcrflzdnxa2fdza5lfvew3y6echg8ckaa4q8m5hyf": 103181546
          }
        }
      ]
    }

  , "Null":
    { "type": "null"
    }

  , "NullableUInt64":
    { "oneOf":
      [ { "$ref": "#/definitions/UInt64" }
      , { "$ref": "#/definitions/Null"}
      ]
    }

  , "NullableRatio":
    { "oneOf":
      [ { "$ref": "#/definitions/Ratio" }
      , { "$ref": "#/definitions/Null"}
      ]
    }

  , "OpCert":
    { "type": "object"
    , "description": "Certificate identifying a stake pool operator."
    , "additionalProperties": false
    , "properties":
      { "count": { "$ref": "#/definitions/UInt64" }
      , "sigma": { "$ref": "#/definitions/Signature" }
      , "kesPeriod": { "$ref": "#/definitions/UInt64" }
      , "hotVk": { "$ref": "#/definitions/KesVerificationKey" }
      }
    }

  , "Origin":
    { "type": "string"
    , "description": "The origin of the blockchain. This point is special in the sense that it doesn't point to any existing slots, but is preceding any existing other point."
    , "title": "origin"
    , "enum": [ "origin" ]
    }

  , "OwnerStake":
    { "type": "integer"
    , "description": "The number of Lovelace owned by the stake pool owners. If this value is not at least as large as the 'pledgeRatio', the stake pool will not earn any rewards for the given epoch."
    }

  , "PointOrOrigin":
    { "oneOf":
      [ { "type": "object"
        , "description": "A point on the chain, identified by a slot and a block header hash."
        , "title": "point"
        , "additionalProperties": false
        , "required": [ "slot", "hash" ]
        , "properties":
          { "slot": { "$ref": "#/definitions/Slot" }
          , "hash": { "$ref": "#/definitions/Digest[Blake2b]::Block[*].header" }
          }
        }
      , { "$ref": "#/definitions/Origin" }
      ]
    }

  , "PolicyId":
    { "$ref": "#/definitions/Digest[Blake2b]::Script"
    }

  , "PoolDistribution":
    { "type": "object"
    , "description": "Distribution of stake across registered stake pools. Each key in the map corresponds to a pool id."
    , "propertyNames": { "$ref": "#/definitions/PoolId" }
    , "additionalProperties":
      { "type": "object"
      , "additionalProperties": false
      , "required": ["stake", "vrf"]
      , "properties":
        { "stake": { "$ref": "#/definitions/Ratio" }
        , "vrf": { "$ref": "#/definitions/Digest[Blake2b]::VrfVerificationKey" }
        }
      }
    , "examples":
      [ { "pool1qqqqqdk4zhsjuxxd8jyvwncf5eucfskz0xjjj64fdmlgj735lr9":
          { "stake": "64666784451745/32381463809418351"
          , "vrf": "6de7605b2afd7e205318fc8b4329d26439b5b179b4746fea12f1ce50395f5d9e"
          }
        , "pool1qqqqpanw9zc0rzh0yp247nzf2s35uvnsm7aaesfl2nnejaev0uc":
          { "stake": "7072561631906/10793821269806117"
          , "vrf": "bb862fcc397de6c06dea9a9ad8442a3d17826e01799a79b861fc083341eaed3d"
          }
        }
      ]
    }

  , "PoolId":
    { "type": "string"
    , "description": "A Blake2b 32-byte digest of a pool's verification key."
    , "contentEncoding": "bech32"
    , "pattern": "^pool1[0-9a-z]*$"
    , "examples":
      [ "pool1qqqqpanw9zc0rzh0yp247nzf2s35uvnsm7aaesfl2nnejaev0uc"
      , "pool1qqqqqdk4zhsjuxxd8jyvwncf5eucfskz0xjjj64fdmlgj735lr9"
      ]
    }

  , "PoolParameters":
    { "type": "object"
    , "additionalProperties": false
    , "required": ["owners","cost","margin","pledge","vrf","metadata","id","relays","rewardAccount"]
    , "properties":
      { "owners":
        { "type": "array"
        , "items": { "$ref": "#/definitions/Digest[Blake2b]::VerificationKey" }
        }
      , "cost": { "$ref": "#/definitions/Lovelace" }
      , "margin": { "$ref": "#/definitions/Ratio" }
      , "pledge": { "$ref": "#/definitions/Lovelace" }
      , "vrf": { "$ref": "#/definitions/Digest[Blake2b]::VrfVerificationKey" }
      , "metadata":
        { "oneOf":
          [ { "$ref": "#/definitions/Null"}
          , { "type": "object"
            , "title": "poolMetadata"
            , "additionalProperties": false
            , "required": ["hash","url"]
            , "properties":
              { "hash": { "$ref": "#/definitions/Digest[Blake2b]::PoolMetadata" }
              , "url":
                { "type": "string"
                , "format": "uri"
                }
              }
            }
          ]
        }
      , "id": { "$ref": "#/definitions/PoolId" }
      , "relays":
        { "type": "array"
        , "items": { "$ref": "#/definitions/Relay" }
        }
      , "rewardAccount": { "$ref": "#/definitions/RewardAccount" }
      }
    }

  , "PoolsRanking":
    { "type": "object"
    , "propertyNames": { "$ref": "#/definitions/PoolId" }
    , "additionalProperties":
      { "type": "object"
      , "additionalProperties": false
      , "required":
        [ "score"
        , "estimatedHitRate"
        ]
      , "properties":
        { "score": { "type": "number" }
        , "estimatedHitRate": { "type": "number" }
        }
      }
    , "examples":
      [ { "pool15erywju02scjv9gxkmp885c8catf5n4ke9459h2299fq57u9c3e":
          { "estimatedHitRate": 0.46007879047717787
          , "score": 0.46007879047717787
          }
        , "pool1uzn3gvvcztplwua6qnk966elln264kzsq6q9kprmpqj5zytzn03":
          { "estimatedHitRate": 0.4434403878475427
          , "score": 0.4434403878475427
          }
        }
      ]
    }

  , "Prices":
    { "type": "object"
    , "additionalProperties": false
    , "required": [ "memory", "steps" ]
    , "properties":
      { "memory": { "$ref": "#/definitions/Ratio" }
      , "steps": { "$ref": "#/definitions/Ratio" }
      }
    }

  , "ProtocolMagicId":
    { "type": "integer"
    , "minimum": 0
    , "maximum": 4294967295
    , "examples":
      [ 764824073
      ]
    }

  , "ProtocolParameters[Byron]":
    { "type": "object"
    , "additionalProperties": false
    , "required":
      [ "heavyDlgThreshold"
      , "maxBlockSize"
      , "maxHeaderSize"
      , "maxProposalSize"
      , "maxTxSize"
      , "mpcThreshold"
      , "scriptVersion"
      , "slotDuration"
      , "unlockStakeEpoch"
      , "updateProposalThreshold"
      , "updateProposalTimeToLive"
      , "updateVoteThreshold"
      , "txFeePolicy"
      , "softforkRule"
      ]
    , "properties":
      { "heavyDlgThreshold": { "$ref": "#/definitions/NullableRatio" }
      , "maxBlockSize": { "$ref": "#/definitions/NullableUInt64" }
      , "maxHeaderSize": { "$ref": "#/definitions/NullableUInt64" }
      , "maxProposalSize": { "$ref": "#/definitions/NullableUInt64" }
      , "maxTxSize": { "$ref": "#/definitions/NullableUInt64" }
      , "mpcThreshold": { "$ref": "#/definitions/NullableRatio" }
      , "scriptVersion": { "$ref": "#/definitions/NullableUInt64" }
      , "slotDuration": { "$ref": "#/definitions/NullableUInt64" }
      , "unlockStakeEpoch": { "$ref": "#/definitions/NullableUInt64" }
      , "updateProposalThreshold": { "$ref": "#/definitions/NullableRatio" }
      , "updateProposalTimeToLive": { "$ref": "#/definitions/NullableUInt64" }
      , "updateVoteThreshold": { "$ref": "#/definitions/NullableRatio" }
      , "txFeePolicy":
        { "oneOf":
          [ { "$ref": "#/definitions/TxFeePolicy" }
          , { "$ref": "#/definitions/Null"}
          ]
        }
      , "softforkRule":
        { "oneOf":
          [ { "$ref": "#/definitions/SoftForkRule" }
          , { "$ref": "#/definitions/Null"}
          ]
        }
      }
    }

  , "ProtocolParameters[Shelley]":
    { "type": "object"
    , "additionalProperties": false
    , "required":
      [ "minFeeCoefficient"
      , "minFeeConstant"
      , "maxBlockBodySize"
      , "maxBlockHeaderSize"
      , "maxTxSize"
      , "stakeKeyDeposit"
      , "poolDeposit"
      , "poolRetirementEpochBound"
      , "desiredNumberOfPools"
      , "poolInfluence"
      , "monetaryExpansion"
      , "treasuryExpansion"
      , "decentralizationParameter"
      , "minUtxoValue"
      , "minPoolCost"
      , "extraEntropy"
      , "protocolVersion"
      ]
    , "properties":
      { "minFeeCoefficient": { "$ref": "#/definitions/NullableUInt64" }
      , "minFeeConstant": { "$ref": "#/definitions/NullableUInt64" }
      , "maxBlockBodySize": { "$ref": "#/definitions/NullableUInt64" }
      , "maxBlockHeaderSize": { "$ref": "#/definitions/NullableUInt64" }
      , "maxTxSize": { "$ref": "#/definitions/NullableUInt64" }
      , "stakeKeyDeposit": { "$ref": "#/definitions/NullableUInt64" }
      , "poolDeposit": { "$ref": "#/definitions/NullableUInt64" }
      , "poolRetirementEpochBound": { "$ref": "#/definitions/NullableUInt64" }
      , "desiredNumberOfPools": { "$ref": "#/definitions/NullableUInt64" }
      , "poolInfluence": { "$ref": "#/definitions/NullableRatio" }
      , "monetaryExpansion": { "$ref": "#/definitions/NullableRatio" }
      , "treasuryExpansion": { "$ref": "#/definitions/NullableRatio" }
      , "decentralizationParameter": { "$ref": "#/definitions/NullableRatio" }
      , "minUtxoValue": { "$ref": "#/definitions/NullableUInt64" }
      , "minPoolCost": { "$ref": "#/definitions/NullableUInt64" }
      , "extraEntropy":
        { "oneOf":
          [ { "$ref": "#/definitions/Nonce" }
          , { "$ref": "#/definitions/Null"}
          ]
        }
      , "protocolVersion":
        { "oneOf":
          [ { "$ref": "#/definitions/ProtocolVersion" }
          , { "$ref": "#/definitions/Null"}
          ]
        }
      }
    }

  , "ProtocolParameters[Alonzo]":
    { "type": "object"
    , "additionalProperties": false
    , "required":
      [ "minFeeCoefficient"
      , "minFeeConstant"
      , "maxBlockBodySize"
      , "maxBlockHeaderSize"
      , "maxTxSize"
      , "stakeKeyDeposit"
      , "poolDeposit"
      , "poolRetirementEpochBound"
      , "desiredNumberOfPools"
      , "poolInfluence"
      , "monetaryExpansion"
      , "treasuryExpansion"
      , "decentralizationParameter"
      , "minPoolCost"
      , "coinsPerUtxoWord"
      , "maxValueSize"
      , "collateralPercentage"
      , "maxCollateralInputs"
      , "extraEntropy"
      , "protocolVersion"
      , "costModels"
      , "prices"
      , "maxExecutionUnitsPerTransaction"
      , "maxExecutionUnitsPerBlock"
      ]
    , "properties":
      { "minFeeCoefficient": { "$ref": "#/definitions/NullableUInt64" }
      , "minFeeConstant": { "$ref": "#/definitions/NullableUInt64" }
      , "maxBlockBodySize": { "$ref": "#/definitions/NullableUInt64" }
      , "maxBlockHeaderSize": { "$ref": "#/definitions/NullableUInt64" }
      , "maxTxSize": { "$ref": "#/definitions/NullableUInt64" }
      , "stakeKeyDeposit": { "$ref": "#/definitions/NullableUInt64" }
      , "poolDeposit": { "$ref": "#/definitions/NullableUInt64" }
      , "poolRetirementEpochBound": { "$ref": "#/definitions/NullableUInt64" }
      , "desiredNumberOfPools": { "$ref": "#/definitions/NullableUInt64" }
      , "poolInfluence": { "$ref": "#/definitions/NullableRatio" }
      , "monetaryExpansion": { "$ref": "#/definitions/NullableRatio" }
      , "treasuryExpansion": { "$ref": "#/definitions/NullableRatio" }
      , "decentralizationParameter": { "$ref": "#/definitions/NullableRatio" }
      , "minPoolCost": { "$ref": "#/definitions/NullableUInt64" }
      , "coinsPerUtxoWord": { "$ref": "#/definitions/NullableUInt64" }
      , "maxValueSize": { "$ref": "#/definitions/NullableUInt64" }
      , "collateralPercentage": { "$ref": "#/definitions/NullableUInt64" }
      , "maxCollateralInputs": { "$ref": "#/definitions/NullableUInt64" }
      , "extraEntropy":
        { "oneOf":
          [ { "$ref": "#/definitions/Nonce" }
          , { "$ref": "#/definitions/Null"}
          ]
        }
      , "protocolVersion":
        { "oneOf":
          [ { "$ref": "#/definitions/ProtocolVersion" }
          , { "$ref": "#/definitions/Null"}
          ]
        }
      , "costModels":
        { "oneOf":
          [ { "$ref": "#/definitions/CostModels" }
          , { "$ref": "#/definitions/Null"}
          ]
        }
      , "prices":
        { "oneOf":
          [ { "$ref": "#/definitions/Prices" }
          , { "$ref": "#/definitions/Null"}
          ]
        }
      , "maxExecutionUnitsPerTransaction":
        { "oneOf":
          [ { "$ref": "#/definitions/ExUnits" }
          , { "$ref": "#/definitions/Null"}
          ]
        }
      , "maxExecutionUnitsPerBlock":
        { "oneOf":
          [ { "$ref": "#/definitions/ExUnits" }
          , { "$ref": "#/definitions/Null"}
          ]
        }
      }
    }

  , "ProtocolVersion":
    { "type": "object"
    , "additionalProperties": false
    , "required": [ "major", "minor" ]
    , "properties":
      { "major": { "$ref": "#/definitions/UInt32" }
      , "minor": { "$ref": "#/definitions/UInt32" }
      , "patch": { "$ref": "#/definitions/UInt32" }
      }
    }

  , "QueryUnavailableInCurrentEra":
    { "type": "string"
    , "description": "The requested query is not available in the current node era. It could be that the node is not fully synced."
    , "enum": [ "QueryUnavailableInCurrentEra" ]
    }

  , "Ratio":
    { "type": "string"
    , "description": "A ratio of two integers, to express exact fractions."
    , "pattern": "^-?[0-9]+/[0-9]+$"
    , "examples":
      [ "2/3"
      , "7/8"
      ]
    }

  , "Redeemer":
    { "type": "object"
    , "examples":
      [ { "executionUnits":
          { "memory": 2
          , "steps": 2
          }
        , "redeemer": "ggRCqSQ="
        }
      ]
    , "additionalProperties": false
    , "required": [ "redeemer", "executionUnits" ]
    , "properties":
      { "redeemer": { "$ref": "#/definitions/RedeemerData" }
      , "executionUnits": { "$ref": "#/definitions/ExUnits" }
      }
    }

  , "RedeemerData":
    { "type": "string"
    , "contentEncoding": "base64"
    , "description": "Plutus data, CBOR-serialised."
    }

  , "RedeemerPointer":
    { "type": "string"
    , "pattern": "^(spend|mint|certificate|withdrawal):[0-9]+$"
    }

  , "RelativeTime":
    { "type": "integer"
    , "description": "A time in seconds relative to another one (typically, system start or era start)."
    , "minimum": 0
    , "maximum": 18446744073709552999
    }

  , "Relay":
    { "oneOf":
      [ { "type": "object"
        , "title": "by address"
        , "additionalProperties": false
        , "required": ["ipv4","ipv6","port"]
        , "properties":
          { "ipv4":
            { "oneOf":
              [ { "type": "string" }
              , { "$ref": "#/definitions/Null"}
              ]
            }
          , "ipv6":
            { "oneOf":
              [ { "type": "string" }
              , { "$ref": "#/definitions/Null"}
              ]
            }
          , "port":
            { "oneOf":
              [ { "type": "integer"
                , "minimum": 0
                , "maximum": 65535
                }
              , { "$ref": "#/definitions/Null" }
              ]
            }
          }
        }
      , { "type": "object"
        , "title": "by name"
        , "additionalProperties": false
        , "required": ["hostname","port"]
        , "properties":
          { "hostname": { "type": "string" }
          , "port":
            { "oneOf":
              [ { "type": "integer"
                , "minimum": 0
                , "maximum": 65535
                }
              , { "$ref": "#/definitions/Null" }
              ]
            }
          }
        }
      ]
    }

  , "Rewards":
    { "type": "object"
    , "additionalProperties": { "$ref": "#/definitions/LovelaceDelta" }
    , "propertyNames": "[0-9a-f]{56}$"
    , "examples":
      [ { "6d06fe0a5a8cb6d2bcc352581dea626bb5b2f66edf85678b2f2fa7b5": 123456789
        }
      ]
    }

  , "RewardAccount":
    { "type": "string"
    , "description": "A reward account, also known as 'stake address'."
    , "contentEncoding": "bech32"
    , "pattern": "^stake(_test)?1[0-9a-z]+$"
    , "examples":
      [ "stake1ux7pt9adw8z46tgqn2f8fvurrhk325gcm4mf75mkmmxpx6gae9mzv"
      ]
    }

  , "RewardInfoPool":
    { "type": "object"
    , "additionalProperties": false
    , "required": [ "stake", "ownerStake", "approximatePerformance", "poolParameters" ]
    , "properties":
      { "stake": { "$ref": "#/definitions/Lovelace" }
      , "ownerStake": { "$ref": "#/definitions/OwnerStake" }
      , "approximatePerformance":
        { "type": "number"
        , "description": "Number of blocks produced divided by expected number of blocks (based on stake and epoch progress). Can be larger than 1.0 for pools that get lucky."
        , "minimum": 0
        }
      , "poolParameters":
        { "type": "object"
        , "description": "Some of the pool parameters relevant for the reward calculation."
        , "additionalProperties": false
        , "required": [ "cost", "margin", "pledge" ]
        , "properties":
          { "cost": { "$ref": "#/definitions/Lovelace" }
          , "margin": { "$ref": "#/definitions/Ratio" }
          , "pledge": { "$ref": "#/definitions/Lovelace" }
          }
        }
      }
    }

  , "RewardPot":
    { "type": "string"
    , "description": "Source of rewards as defined by the protocol parameters."
    , "enum": ["reserves", "treasury"]
    }

  , "RewardsProvenance'":
    { "type": "object"
    , "description": "Details about how rewards are calculated for the ongoing epoch."
    , "additionalProperties": false
    , "required": [ "desiredNumberOfPools", "poolInfluence", "totalRewards", "activeStake", "pools" ]
    , "properties":
      { "desiredNumberOfPools":
        { "type": "integer"
        , "description": "Desired number of stake pools."
        , "minimum": 0
        , "maximum": 18446744073709552999
        }
      , "poolInfluence":
        { "type": "string"
        , "description": "Influence of the pool owner's pledge on rewards, as a ratio of two integers."
        , "pattern": "^-?[0-9]+/[0-9]+$"
        , "examples":
          [ "2/3"
          , "7/8"
          ]
        }
      , "totalRewards":
        { "type": "integer"
        , "description": "Total rewards available for the given epoch."
        , "minimum": 0
        , "maximum": 18446744073709552999
        }
      , "activeStake":
        { "type": "integer"
        , "description": "The total amount of staked Lovelace during this epoch."
        , "minimum": 0
        , "maximum": 18446744073709552999
        }
      , "pools":
        { "type": "object"
        , "additionalProperties": { "$ref": "#/definitions/RewardInfoPool" }
        , "propertyNames": { "$ref": "#/definitions/PoolId" }
        }
      }
    }

  , "RewardsProvenance":
    { "type": "object"
    , "description": "Details about how rewards are calculated for the ongoing epoch."
    , "examples":
      [ { "pools":
          { "pool1uzn3gvvcztplwua6qnk966elln264kzsq6q9kprmpqj5zytzn03":
            { "leaderRewards": 952
            , "totalMintedBlocks": 710
            , "apparentPerformance": "18812959026/99805300093"
            , "totalStakeShare": "522895940905/1291880908953"
            , "parameters":
              { "owners": []
              , "cost": 697
              , "margin": "1/1"
              , "pledge": 137
              , "vrf": "03170a2e7597b7b7e3d84c05391d139a62b157e78786d8c082f29dcf4c111314"
              , "metadata":
                { "hash": "62797465737472696e67"
                , "url": "https://..."
                }
              , "id": "pool1uzn3gvvcztplwua6qnk966elln264kzsq6q9kprmpqj5zytzn03"
              , "relays": []
              , "rewardAccount": "stake1u8s2w9p3nqfv8amnhgzwchtt8l7dt2kc2qrgqkcy0vyz2sgltd8xl"
              }
            , "maxRewards": 772
            , "totalRewards": 177
            , "pledgeRatio": "1890420803177/2397524606197"
            , "ownerStake": 766
            , "activeStakeShare": "3637271273329/4596544940606"
            }
          }
        , "totalMintedBlocks": 1
        , "rewardsGap": 752
        , "totalExpectedBlocks": 1
        , "activeStake": 844
        , "maxLovelaceSupply": 981
        , "treasuryTax": 819
        , "epochLength": 12432
        , "decentralizationParameter": "144984708469/1172194782596"
        , "availableRewards": 622
        , "mintedBlocks": {}
        , "totalRewards": 281
        , "incentive": 204
        }
      ]
    , "additionalProperties": false
    , "required":
      [ "epochLength"
      , "decentralizationParameter"
      , "maxLovelaceSupply"
      , "mintedBlocks"
      , "totalMintedBlocks"
      , "totalExpectedBlocks"
      , "incentive"
      , "rewardsGap"
      , "availableRewards"
      , "totalRewards"
      , "treasuryTax"
      , "activeStake"
      , "pools"
      ]
    , "properties":
      { "epochLength": { "$ref": "#/definitions/Epoch" }
      , "decentralizationParameter": { "$ref": "#/definitions/Ratio" }
      , "maxLovelaceSupply": { "$ref": "#/definitions/Lovelace" }
      , "mintedBlocks":
        { "type": "object"
        , "description": "Number of blocks minted by each pool."
        , "additionalProperties": { "$ref": "#/definitions/UInt64" }
        , "propertyNames": { "$ref": "#/definitions/PoolId" }
        }
      , "totalMintedBlocks":
          { "$ref": "#/definitions/Int64"
          , "description": "The total number of blocks minted during the given epoch."
          }
      , "totalExpectedBlocks":
          { "$ref": "#/definitions/Int64"
          , "description": "The number of blocks expected to be produced during the given epoch."
          }
      , "incentive":
          { "$ref": "#/definitions/Lovelace"
          , "description": "The maximum amount of Lovelace which can be removed from the reserves to be given out as rewards for the given epoch."
          }
      , "rewardsGap":
          { "$ref": "#/definitions/Lovelace"
          , "description": "The difference between the 'availableRewards' and what was actually distributed."
          }
      , "availableRewards":
          { "$ref": "#/definitions/Lovelace"
          , "description": "The total Lovelace available for rewards for the given epoch, equal to 'totalRewards' less 'treasuryTax'."
          }
      , "totalRewards":
          { "$ref": "#/definitions/Lovelace"
          , "description": "The reward pot for the given epoch, equal to the 'incentive' plus the fee pot."
          }
      , "treasuryTax":
          { "$ref": "#/definitions/Lovelace"
          , "description": "The amount of Lovelace taken for the treasury for the given epoch."
          }
      , "activeStake":
          { "$ref": "#/definitions/Lovelace"
          , "description": "The amount of Lovelace that is delegated during the given epoch."
          }
      , "pools":
        { "type": "object"
        , "additionalProperties": { "$ref": "#/definitions/IndividualPoolRewardsProvenance" }
        , "propertyNames": { "$ref": "#/definitions/PoolId" }
        }
      }
    }

  , "SafeZone":
    { "type": "integer"
    , "description": "Number of slots from the tip of the ledger in which it is guaranteed that no hard fork can take place. This should be (at least) the number of slots in which we are guaranteed to have k blocks."
    , "minimum": 0
    , "maximum": 18446744073709552999
    }

  , "Script":
    { "oneOf":
      [ { "type": "object"
        , "title": "Native"
        , "additionalProperties": false
        , "required": [ "native" ]
        , "properties":
          { "native": { "$ref": "#/definitions/Script[Native]" }
          }
        }
      , { "type": "object"
        , "title": "Plutus"
        , "additionalProperties": false
        , "required": [ "plutus:v1" ]
        , "properties":
          { "plutus:v1": { "$ref": "#/definitions/Script[Plutus]" }
          }
        }
      , { "type": "object"
        , "title": "Plutus"
        , "additionalProperties": false
        , "required": [ "plutus:v2" ]
        , "properties":
          { "plutus:v2": { "$ref": "#/definitions/Script[Plutus]" }
          }
        }
      ]
    }

  , "Script[Native]":
    { "description": "A phase-1 monetary script. Timelocks constraints are only supported since Allegra."
    , "examples":
        [ "3c07030e36bfff7cd2f004356ef320f3fe3c07030e7cd2f004356437"
        , { "all":
            [ "ec09e5293d384637cd2f004356ef320f3fe3c07030e36bfffe67e2e2"
            , "3c07030e36bfff7cd2f004356ef320f3fe3c07030e7cd2f004356437"
            ]
          }
        , { "any":
            [ "3c07030e36bfffe67e2e2ec09e5293d384637cd2f004356ef320f3fe"
            , { "all":
                [ "ec09e5293d384637cd2f004356ef320f3fe3c07030e36bfffe67e2e2"
                , "3c07030e36bfff7cd2f004356ef320f3fe3c07030e7cd2f004356437"
                , { "expiresAt": 1234 }
                ]
              }
            , { "2":
                [ "ec09e5293d384637cd2f004356ef320f3fe3c07030e36bfffe67e2e2"
                , "3c07030e36bfff7cd2f004356ef320f3fe3c07030e7cd2f004356437"
                , { "all":
                    [ "3c07030e36bfffe67e2e2ec09e5293d384637cd2f004356ef320f3fe"
                    , { "startsAt": 5436 }
                    ]
                  }
                ]
              }
            ]
          }
        ]
    , "anyOf":
      [ { "$ref": "#/definitions/Digest[Blake2b]::VerificationKey" }
      , { "type": "object"
        , "title": "any"
        , "additionalProperties": false
        , "required": ["any"]
        , "properties":
          { "any":
            { "type": "array"
            , "items": { "$ref": "#/definitions/Script[Native]" }
            }
          }
        }
      , { "type": "object"
        , "title": "all"
        , "additionalProperties": false
        , "required": ["all"]
        , "properties":
          { "all":
            { "type": "array"
            , "items": { "$ref": "#/definitions/Script[Native]" }
            }
          }
        }
      , { "type": "object"
        , "title": "NOf"
        , "propertyNames": { "pattern": "^[0-9]+$" }
        , "additionalProperties":
          { "type": "array"
          , "items": { "$ref": "#/definitions/Script[Native]" }
          }
        }
      , { "type": "object"
        , "title": "expiresAt"
        , "additionalProperties": false
        , "required": [ "expiresAt" ]
        , "properties":
          { "expiresAt": { "$ref": "#/definitions/Slot" }
          }
        }
      , { "type": "object"
        , "title": "startsAt"
        , "additionalProperties": false
        , "required": [ "startsAt" ]
        , "properties":
          { "startsAt": { "$ref": "#/definitions/Slot" }
          }
        }
      ]
    }

  , "Script[Plutus]":
    { "type": "string"
    , "description": "A phase-2 Plutus script; or said differently, a serialized Plutus-core program."
    , "contentEncoding": "base64"
    , "pattern": "^[A-Za-z0-9+/]*=?=?$"
    }

  , "ScriptFailure":
    { "type": "array"
    , "description": "Errors whcih may occur when evaluating an on-chain script."
    , "items":
      { "oneOf":
        [ { "$ref": "#/definitions/SubmitTxError[extraRedeemers]" }
        , { "$ref": "#/definitions/SubmitTxError[missingRequiredDatums]" }
        , { "$ref": "#/definitions/ScriptFailure[missingRequiredScripts]" }
        , { "$ref": "#/definitions/ScriptFailure[validatorFailed]" }
        , { "$ref": "#/definitions/ScriptFailure[unknownInputReferencedByRedeemer]" }
        , { "$ref": "#/definitions/ScriptFailure[nonScriptInputReferencedByRedeemer]" }
        , { "$ref": "#/definitions/ScriptFailure[illFormedExecutionBudget]" }
        , { "$ref": "#/definitions/ScriptFailure[noCostModelForLanguage]" }
        ]
      }
    }

  , "ScriptFailure[missingRequiredScripts]":
    { "title": "missingRequiredScripts"
    , "description": "Missing scripts required for validating script inputs."
    , "type": "object"
    , "additionalProperties": false
    , "required": [ "missingRequiredScripts" ]
    , "properties":
      { "missingRequiredScripts":
        { "type": "object"
        , "additionalProperties": false
        , "required": [ "missing" ]
        , "properties":
          { "missing":
            { "type": "array"
            , "items": { "$ref": "#/definitions/RedeemerPointer" }
            }
          }
        }
      }
    }

  , "ScriptFailure[validatorFailed]":
    { "title": "validatorFailed"
    , "description": "Plutus interpreter error. Returns additional traces produced by the validator."
    , "type": "object"
    , "additionalProperties": false
    , "required": [ "validatorFailed" ]
    , "properties":
      { "validatorFailed":
        { "type": "object"
        , "additionalProperties": false
        , "required": [ "error", "traces" ]
        , "properties":
          { "error": { "type": "string" }
          , "traces":
            { "type": "array"
            , "items": { "type": "string" }
            }
          }
        }
      }
    }

  , "ScriptFailure[unknownInputReferencedByRedeemer]":
    { "title": "unknownInputReferencedByRedeemer"
    , "description": "Non-existing input referenced by a redeemer pointer."
    , "type": "object"
    , "additionalProperties": false
    , "required": [ "unknownInputReferencedByRedeemer" ]
    , "properties":
      { "unknownInputReferencedByRedeemer": { "$ref": "#/definitions/TxIn" }
      }
    }

  , "ScriptFailure[nonScriptInputReferencedByRedeemer]":
    { "title": "nonScriptInputReferencedByRedeemer"
    , "description": "Input not locked by a Plutus referenced by a redeemer pointer."
    , "type": "object"
    , "additionalProperties": false
    , "required": [ "nonScriptInputReferencedByRedeemer" ]
    , "properties":
      { "nonScriptInputReferencedByRedeemer": { "$ref": "#/definitions/TxIn" }
      }
    }

  , "ScriptFailure[illFormedExecutionBudget]":
    { "title": "illFormedExecutionBudget"
    , "description": "Invalid execution budget set for a redeemer. In principle, cannot happen in the context of Ogmios."
    , "type": "object"
    , "additionalProperties": false
    , "required": [ "illFormedExecutionBudget" ]
    , "properties":
      { "illFormedExecutionBudget":
        { "oneOf":
          [ { "$ref": "#/definitions/ExUnits" }
          , { "$ref": "#/definitions/Null" }
          ]
        }
      }
    }

  , "ScriptFailure[noCostModelForLanguage]":
    { "title": "noCostModelForLanguage"
    , "description": "Input locked by a script which language has no cost model in current protocol parameters. In principle, cannot happen in the context of Ogmios."
    , "type": "object"
    , "additionalProperties": false
    , "required": [ "noCostModelForLanguage" ]
    , "properties":
      { "noCostModelForLanguage": { "$ref": "#/definitions/Language" }
      }
    }

  , "ScriptPurpose":
    { "oneOf":
      [ { "title": "spend"
        , "type": "object"
        , "additionalProperties": false
        , "required": [ "spend" ]
        , "properties":
          { "spend": { "$ref": "#/definitions/TxIn" }
          }
        }
      , { "title": "mint"
        , "type": "object"
        , "additionalProperties": false
        , "required": [ "mint" ]
        , "properties":
          { "mint": { "$ref": "#/definitions/PolicyId" }
          }
        }
      , { "title": "certificate"
        , "type": "object"
        , "additionalProperties": false
        , "required": [ "certificate" ]
        , "properties":
          { "certificate": { "$ref": "#/definitions/Certificate" }
          }
        }
      , { "title": "withdrawal"
        , "type": "object"
        , "additionalProperties": false
        , "required": [ "withdrawal" ]
        , "properties":
          { "withdrawal": { "$ref": "#/definitions/RewardAccount" }
          }
        }
      ]
    }

  , "Signature":
    { "type": "string"
    , "description": "A signature coming from an Ed25519 or Ed25519-BIP32 signing key."
    , "contentEncoding": "base64"
    }

  , "Slot":
    { "type": "integer"
    , "description": "An absolute slot number."
    , "minimum": 0
    , "maximum": 18446744073709552000
    }

  , "SlotLength":
    { "type": "integer"
    , "description": "A slot length, in seconds."
    , "maximum": 18446744073709552000
    }

  , "SoftwareVersion":
    { "type": "object"
    , "additionalProperties": false
    , "required": [ "appName", "number" ]
    , "properties":
      { "appName": { "type": "string" }
      , "number": { "$ref": "#/definitions/UInt32" }
      }
    }

  , "SoftForkRule":
    { "type": "object"
    , "additionalProperties": false
    , "required": [ "initThreshold", "minThreshold", "decrementThreshold" ]
    , "properties":
      { "initThreshold": { "$ref": "#/definitions/NullableRatio" }
      , "minThreshold": { "$ref": "#/definitions/NullableRatio" }
      , "decrementThreshold": { "$ref": "#/definitions/NullableRatio" }
      }
    }

  , "SubmitTxError":
    { "type": "array"
    , "items":
      { "oneOf":
        [ { "$ref": "#/definitions/EraMismatch" }
        , { "$ref": "#/definitions/SubmitTxError[invalidWitnesses]" }
        , { "$ref": "#/definitions/SubmitTxError[missingVkWitnesses]" }
        , { "$ref": "#/definitions/SubmitTxError[missingScriptWitnesses]" }
        , { "$ref": "#/definitions/SubmitTxError[scriptWitnessNotValidating]" }
        , { "$ref": "#/definitions/SubmitTxError[insufficientGenesisSignatures]" }
        , { "$ref": "#/definitions/SubmitTxError[missingTxMetadata]" }
        , { "$ref": "#/definitions/SubmitTxError[missingTxMetadataHash]" }
        , { "$ref": "#/definitions/SubmitTxError[txMetadataHashMismatch]" }
        , { "$ref": "#/definitions/SubmitTxError[badInputs]" }
        , { "$ref": "#/definitions/SubmitTxError[expiredUtxo]" }
        , { "$ref": "#/definitions/SubmitTxError[outsideOfValidityInterval]" }
        , { "$ref": "#/definitions/SubmitTxError[txTooLarge]" }
        , { "$ref": "#/definitions/SubmitTxError[missingAtLeastOneInputUtxo]" }
        , { "$ref": "#/definitions/SubmitTxError[invalidMetadata]" }
        , { "$ref": "#/definitions/SubmitTxError[feeTooSmall]" }
        , { "$ref": "#/definitions/SubmitTxError[valueNotConserved]" }
        , { "$ref": "#/definitions/SubmitTxError[networkMismatch]" }
        , { "$ref": "#/definitions/SubmitTxError[outputTooSmall]" }
        , { "$ref": "#/definitions/SubmitTxError[tooManyAssetsInOutput]" }
        , { "$ref": "#/definitions/SubmitTxError[addressAttributesTooLarge]" }
        , { "$ref": "#/definitions/SubmitTxError[triesToForgeAda]" }
        , { "$ref": "#/definitions/SubmitTxError[delegateNotRegistered]" }
        , { "$ref": "#/definitions/SubmitTxError[unknownOrIncompleteWithdrawals]" }
        , { "$ref": "#/definitions/SubmitTxError[stakePoolNotRegistered]" }
        , { "$ref": "#/definitions/SubmitTxError[wrongRetirementEpoch]" }
        , { "$ref": "#/definitions/SubmitTxError[wrongPoolCertificate]" }
        , { "$ref": "#/definitions/SubmitTxError[stakeKeyAlreadyRegistered]" }
        , { "$ref": "#/definitions/SubmitTxError[poolCostTooSmall]" }
        , { "$ref": "#/definitions/SubmitTxError[poolMetadataHashTooBig]" }
        , { "$ref": "#/definitions/SubmitTxError[stakeKeyNotRegistered]" }
        , { "$ref": "#/definitions/SubmitTxError[rewardAccountNotExisting]" }
        , { "$ref": "#/definitions/SubmitTxError[rewardAccountNotEmpty]" }
        , { "$ref": "#/definitions/SubmitTxError[wrongCertificateType]" }
        , { "$ref": "#/definitions/SubmitTxError[unknownGenesisKey]" }
        , { "$ref": "#/definitions/SubmitTxError[alreadyDelegating]" }
        , { "$ref": "#/definitions/SubmitTxError[insufficientFundsForMir]" }
        , { "$ref": "#/definitions/SubmitTxError[tooLateForMir]" }
        , { "$ref": "#/definitions/SubmitTxError[mirTransferNotCurrentlyAllowed]" }
        , { "$ref": "#/definitions/SubmitTxError[mirNegativeTransferNotCurrentlyAllowed]" }
        , { "$ref": "#/definitions/SubmitTxError[mirProducesNegativeUpdate]" }
        , { "$ref": "#/definitions/SubmitTxError[duplicateGenesisVrf]" }
        , { "$ref": "#/definitions/SubmitTxError[nonGenesisVoters]" }
        , { "$ref": "#/definitions/SubmitTxError[updateWrongEpoch]" }
        , { "$ref": "#/definitions/SubmitTxError[protocolVersionCannotFollow]" }
        , { "$ref": "#/definitions/SubmitTxError[missingRequiredRedeemers]" }
        , { "$ref": "#/definitions/SubmitTxError[missingRequiredDatums]" }
        , { "$ref": "#/definitions/SubmitTxError[unspendableDatums]" }
        , { "$ref": "#/definitions/SubmitTxError[extraDataMismatch]" }
        , { "$ref": "#/definitions/SubmitTxError[missingRequiredSignatures]" }
        , { "$ref": "#/definitions/SubmitTxError[unspendableScriptInputs]" }
        , { "$ref": "#/definitions/SubmitTxError[extraRedeemers]" }
        , { "$ref": "#/definitions/SubmitTxError[missingDatumHashesForInputs]" }
        , { "$ref": "#/definitions/SubmitTxError[missingCollateralInputs]" }
        , { "$ref": "#/definitions/SubmitTxError[collateralTooSmall]" }
        , { "$ref": "#/definitions/SubmitTxError[collateralIsScript]" }
        , { "$ref": "#/definitions/SubmitTxError[collateralHasNonAdaAssets]" }
        , { "$ref": "#/definitions/SubmitTxError[tooManyCollateralInputs]" }
        , { "$ref": "#/definitions/SubmitTxError[executionUnitsTooLarge]" }
        , { "$ref": "#/definitions/SubmitTxError[outsideForecast]" }
        , { "$ref": "#/definitions/SubmitTxError[validationTagMismatch]" }
        , { "$ref": "#/definitions/SubmitTxError[collectErrors]" }
        , { "$ref": "#/definitions/SubmitTxError[extraScriptWitnesses]" }
        ]
      }
    }

  , "SubmitTxError[invalidWitnesses]":
    { "type": "object"
    , "title": "invalidWitnesses"
    , "additionalProperties": false
    , "required": ["invalidWitnesses"]
    , "properties":
      { "invalidWitnesses":
        { "type": "array"
        , "items": { "$ref": "#/definitions/VerificationKey" }
        }
      }
    }

  , "SubmitTxError[missingVkWitnesses]":
    { "type": "object"
    , "title": "missingVkWitnesses"
    , "additionalProperties": false
    , "required": [ "missingVkWitnesses" ]
    , "properties":
      { "missingVkWitnesses":
        { "type": "array"
        , "items": { "$ref": "#/definitions/Digest[Blake2b]::VerificationKey" }
        }
      }
    }

  , "SubmitTxError[missingScriptWitnesses]":
    { "type": "object"
    , "title": "missingScriptWitnesses"
    , "additionalProperties": false
    , "required": [ "missingScriptWitnesses" ]
    , "properties":
      { "missingScriptWitnesses":
        { "type": "array"
        , "items": { "$ref": "#/definitions/Digest[Blake2b]::Script" }
        }
      }
    }

  , "SubmitTxError[scriptWitnessNotValidating]":
    { "type": "object"
    , "title": "scriptWitnessNotValidating"
    , "additionalProperties": false
    , "required": [ "scriptWitnessNotValidating" ]
    , "properties":
      { "scriptWitnessNotValidating":
        { "type": "array"
        , "items": { "$ref": "#/definitions/Digest[Blake2b]::Script" }
        }
      }
    }

  , "SubmitTxError[insufficientGenesisSignatures]":
    { "type": "object"
    , "title": "insufficientGenesisSignatures"
    , "additionalProperties": false
    , "required": [ "insufficientGenesisSignatures" ]
    , "properties":
      { "insufficientGenesisSignatures":
        { "type": "array"
        , "items": { "$ref": "#/definitions/Digest[Blake2b]::VerificationKey" }
        }
      }
    }

  , "SubmitTxError[missingTxMetadata]":
    { "type": "object"
    , "title": "missingTxMetadata"
    , "additionalProperties": false
    , "required": [ "missingTxMetadata" ]
    , "properties":
      { "missingTxMetadata": { "$ref": "#/definitions/Digest[Blake2b]::AuxiliaryDataBody" }
      }
    }

  , "SubmitTxError[missingTxMetadataHash]":
    { "type": "object"
    , "title": "missingTxMetadataHash"
    , "additionalProperties": false
    , "required": [ "missingTxMetadataHash" ]
    , "properties":
      { "missingTxMetadataHash": { "$ref": "#/definitions/Digest[Blake2b]::AuxiliaryDataBody" }
      }
    }

  , "SubmitTxError[txMetadataHashMismatch]":
    { "type": "object"
    , "title": "txMetadataHashMismatch"
    , "additionalProperties": false
    , "required": [ "txMetadataHashMismatch" ]
    , "properties":
      { "txMetadataHashMismatch":
        { "type": "object"
        , "additionalProperties": false
        , "required": [ "includedHash", "expectedHash" ]
        , "properties":
          { "includedHash": { "$ref": "#/definitions/Digest[Blake2b]::AuxiliaryDataBody" }
          , "expectedHash": { "$ref": "#/definitions/Digest[Blake2b]::AuxiliaryDataBody" }
          }
        }
      }
    }

  , "SubmitTxError[badInputs]":
    { "type": "object"
    , "title": "badInputs"
    , "additionalProperties": false
    , "required": [ "badInputs" ]
    , "properties":
      { "badInputs":
        { "type": "array"
        , "items": { "$ref": "#/definitions/TxIn" }
        }
      }
    }

  , "SubmitTxError[expiredUtxo]":
    { "type": "object"
    , "title": "expiredUtxo"
    , "description": "Only in Shelley. Replaced with 'outsideOfValidityInterval' since Allegra."
    , "additionalProperties": false
    , "required": [ "expiredUtxo" ]
    , "properties":
      { "expiredUtxo":
        { "type": "object"
        , "additionalProperties": false
        , "required": [ "currentSlot", "transactionTimeToLive" ]
        , "properties":
          { "currentSlot": { "$ref": "#/definitions/Slot" }
          , "transactionTimeToLive": { "$ref": "#/definitions/Slot" }
          }
        }
      }
    }

  , "SubmitTxError[outsideOfValidityInterval]":
    { "type": "object"
    , "title": "outsideOfValidityInterval"
    , "description": "Since Allegra. Replaces 'expiredUtxo'."
    , "additionalProperties": false
    , "required": [ "outsideOfValidityInterval" ]
    , "properties":
      { "outsideOfValidityInterval":
        { "type": "object"
        , "additionalProperties": false
        , "required": [ "currentSlot", "interval" ]
        , "properties":
          { "currentSlot": { "$ref": "#/definitions/Slot" }
          , "interval": { "$ref": "#/definitions/ValidityInterval" }
          }
        }
      }
    }

  , "SubmitTxError[txTooLarge]":
    { "type": "object"
    , "title": "txTooLarge"
    , "additionalProperties": false
    , "required": [ "txTooLarge" ]
    , "properties":
      { "txTooLarge":
        { "type": "object"
        , "additionalProperties": false
        , "required": [ "maximumSize", "actualSize" ]
        , "properties":
          { "maximumSize": { "$ref": "#/definitions/Int64" }
          , "actualSize": { "$ref": "#/definitions/Int64" }
          }
        }
      }
    }

  , "SubmitTxError[missingAtLeastOneInputUtxo]":
    { "type": "object"
    , "title": "missingAtLeastOneInputUtxo"
    , "additionalProperties": false
    , "required": [ "missingAtLeastOneInputUtxo" ]
    , "properties":
      { "missingAtLeastOneInputUtxo":
        { "type": "null"
        }
      }
    }

  , "SubmitTxError[invalidMetadata]":
    { "type": "object"
    , "title": "invalidMetadata"
    , "additionalProperties": false
    , "required": [ "invalidMetadata" ]
    , "properties":
      { "invalidMetadata":
        { "type": "null"
        }
      }
    }

  , "SubmitTxError[feeTooSmall]":
    { "type": "object"
    , "title": "feeTooSmall"
    , "additionalProperties": false
    , "required": [ "feeTooSmall" ]
    , "properties":
      { "feeTooSmall":
        { "type": "object"
        , "additionalProperties": false
        , "required": [ "requiredFee", "actualFee" ]
        , "properties":
          { "requiredFee": { "$ref": "#/definitions/Lovelace" }
          , "actualFee": { "$ref": "#/definitions/Lovelace" }
          }
        }
      }
    }

  , "SubmitTxError[valueNotConserved]":
    { "type": "object"
    , "title": "valueNotConserved"
    , "description": "Returns 'Value' since Mary, and 'LovelaceDelta' before."
    , "additionalProperties": false
    , "required": [ "valueNotConserved" ]
    , "properties":
      { "valueNotConserved":
        { "type": "object"
        , "additionalProperties": false
        , "required": [ "consumed", "produced" ]
        , "properties":
          { "consumed":
            { "oneOf":
                [ { "$ref": "#/definitions/LovelaceDelta" }
                , { "$ref": "#/definitions/Value" }
                ]
            }
          , "produced":
            { "oneOf":
                [ { "$ref": "#/definitions/LovelaceDelta" }
                , { "$ref": "#/definitions/Value" }
                ]
            }
          }
        }
      }
    }

  , "SubmitTxError[networkMismatch]":
    { "type": "object"
    , "title": "networkMismatch"
    , "additionalProperties": false
    , "required": [ "networkMismatch" ]
    , "properties":
      { "networkMismatch":
        { "type": "object"
        , "additionalProperties": false
        , "required": [ "expectedNetwork", "invalidEntities" ]
        , "properties":
          { "expectedNetwork": { "$ref": "#/definitions/Network" }
          , "invalidEntities":
            { "type": "array"
            , "items": { "$ref": "#/definitions/InvalidEntity" }
            }
          }
        }
      }
    }

  , "SubmitTxError[outputTooSmall]":
    { "type": "object"
    , "title": "outputTooSmall"
    , "additionalProperties": false
    , "required": [ "outputTooSmall" ]
    , "properties":
      { "outputTooSmall":
        { "type": "array"
        , "items":{ "$ref": "#/definitions/TxOut" }
        }
      }
    }

  , "SubmitTxError[tooManyAssetsInOutput]":
    { "type": "object"
    , "title": "tooManyAssetsInOutput"
    , "description": "Only since Mary."
    , "additionalProperties": false
    , "required": [ "tooManyAssetsInOutput" ]
    , "properties":
      { "tooManyAssetsInOutput":
        { "type": "array"
        , "items": { "$ref": "#/definitions/TxOut" }
        }
      }
    }

  , "SubmitTxError[addressAttributesTooLarge]":
    { "type": "object"
    , "title": "addressAttributesTooLarge"
    , "additionalProperties": false
    , "required": [ "addressAttributesTooLarge" ]
    , "properties":
      { "addressAttributesTooLarge":
        { "type": "array"
        , "items": { "$ref": "#/definitions/Address" }
        }
      }
    }

  , "SubmitTxError[triesToForgeAda]":
    { "type": "object"
    , "title": "triesToForgeAda"
    , "additionalProperties": false
    , "required": [ "triesToForgeAda" ]
    , "properties":
      { "triesToForgeAda":
        { "type": "null"
        }
      }
    , "description": "Only since Mary."
    }

  , "SubmitTxError[delegateNotRegistered]":
    { "type": "object"
    , "title": "delegateNotRegistered"
    , "additionalProperties": false
    , "required": [ "delegateNotRegistered" ]
    , "properties":
      { "delegateNotRegistered": { "$ref": "#/definitions/PoolId" }
      }
    }

  , "SubmitTxError[unknownOrIncompleteWithdrawals]":
    { "type": "object"
    , "title": "unknownOrIncompleteWithdrawals"
    , "additionalProperties": false
    , "required": [ "unknownOrIncompleteWithdrawals" ]
    , "properties":
      { "unknownOrIncompleteWithdrawals": { "$ref": "#/definitions/Withdrawals" }
      }
    }

  , "SubmitTxError[stakePoolNotRegistered]":
    { "type": "object"
    , "title": "stakePoolNotRegistered"
    , "additionalProperties": false
    , "required": [ "stakePoolNotRegistered" ]
    , "properties":
      { "stakePoolNotRegistered": { "$ref": "#/definitions/PoolId" }
      }
    }

  , "SubmitTxError[wrongRetirementEpoch]":
    { "type": "object"
    , "title": "wrongRetirementEpoch"
    , "additionalProperties": false
    , "required": [ "wrongRetirementEpoch" ]
    , "properties":
      { "wrongRetirementEpoch":
        { "type": "object"
        , "additionalProperties": false
        , "required": [ "currentEpoch", "requestedEpoch", "firstUnreachableEpoch" ]
        , "properties":
          { "currentEpoch": { "$ref": "#/definitions/Epoch" }
          , "requestedEpoch": { "$ref": "#/definitions/Epoch" }
          , "firstUnreachableEpoch": { "$ref": "#/definitions/Epoch" }
          }
        }
      }
    }

  , "SubmitTxError[wrongPoolCertificate]":
    { "type": "object"
    , "title": "wrongPoolCertificate"
    , "additionalProperties": false
    , "required": ["wrongPoolCertificate"]
    , "properties":
      { "wrongPoolCertificate": { "$ref": "#/definitions/UInt8" }
      }
    }

  , "SubmitTxError[stakeKeyAlreadyRegistered]":
    { "type": "object"
    , "title": "stakeKeyAlreadyRegistered"
    , "additionalProperties": false
    , "required": [ "stakeKeyAlreadyRegistered" ]
    , "properties":
      { "stakeKeyAlreadyRegistered": { "$ref": "#/definitions/Digest[Blake2b]::VerificationKey" }
      }
    }

  , "SubmitTxError[poolCostTooSmall]":
    { "type": "object"
    , "title": "poolCostTooSmall"
    , "additionalProperties": false
    , "required": [ "poolCostTooSmall" ]
    , "properties":
      { "poolCostTooSmall":
        { "type": "object"
        , "additionalProperties": false
        , "required": [ "minimumCost" ]
        , "properties":
          { "minimumCost": { "$ref": "#/definitions/Lovelace" }
          }
        }
      }
    }

  , "SubmitTxError[poolMetadataHashTooBig]":
    { "type": "object"
    , "title": "poolMetadataHashTooBig"
    , "additionalProperties": false
    , "required": [ "poolMetadataHashTooBig" ]
    , "properties":
      { "poolMetadataHashTooBig":
        { "type": "object"
        , "additionalProperties": false
        , "required": [ "poolId", "measuredSize" ]
        , "properties":
          { "poolId": { "$ref": "#/definitions/PoolId" }
          , "measuredSize": { "$ref": "#/definitions/Int64" }
          }
        }
      }
    }

  , "SubmitTxError[stakeKeyNotRegistered]":
    { "type": "object"
    , "title": "stakeKeyNotRegistered"
    , "additionalProperties": false
    , "required": [ "stakeKeyNotRegistered" ]
    , "properties":
      { "stakeKeyNotRegistered": { "$ref": "#/definitions/Digest[Blake2b]::VerificationKey" }
      }
    }

  , "SubmitTxError[rewardAccountNotExisting]":
    { "type": "object"
    , "title": "rewardAccountNotExisting"
    , "additionalProperties": false
    , "required": [ "rewardAccountNotExisting" ]
    , "properties":
      { "rewardAccountNotExisting":
        { "type": "null"
        }
      }
    }

  , "SubmitTxError[rewardAccountNotEmpty]":
    { "type": "object"
    , "title": "rewardAccountNotEmpty"
    , "additionalProperties": false
    , "required": [ "rewardAccountNotEmpty" ]
    , "properties":
      { "rewardAccountNotEmpty":
        { "type": "object"
        , "additionalProperties": false
        , "required": [ "balance" ]
        , "properties":
          { "balance": { "$ref": "#/definitions/Lovelace" }
          }
        }
      }
    }

  , "SubmitTxError[wrongCertificateType]":
    { "type": "object"
    , "title": "wrongCertificateType"
    , "additionalProperties": false
    , "required": [ "wrongCertificateType" ]
    , "properties":
      { "wrongCertificateType":
        { "type": "null"
        }
      }
    }

  , "SubmitTxError[unknownGenesisKey]":
    { "type": "object"
    , "title": "unknownGenesisKey"
    , "additionalProperties": false
    , "required": [ "unknownGenesisKey" ]
    , "properties":
      { "unknownGenesisKey": { "$ref": "#/definitions/Digest[Blake2b]::VerificationKey" }
      }
    }

  , "SubmitTxError[alreadyDelegating]":
    { "type": "object"
    , "title": "alreadyDelegating"
    , "additionalProperties": false
    , "required": [ "alreadyDelegating" ]
    , "properties":
      { "alreadyDelegating": { "$ref": "#/definitions/Digest[Blake2b]::VerificationKey" }
      }
    }

  , "SubmitTxError[insufficientFundsForMir]":
    { "type": "object"
    , "title": "insufficientFundsForMir"
    , "additionalProperties": false
    , "required": [ "insufficientFundsForMir" ]
    , "properties":
      { "insufficientFundsForMir":
        { "type": "object"
        , "additionalProperties": false
        , "required": [ "rewardSource", "sourceSize", "requestedAmount" ]
        , "properties":
          { "rewardSource": { "$ref": "#/definitions/RewardPot" }
          , "sourceSize": { "$ref": "#/definitions/Lovelace" }
          , "requestedAmount": { "$ref": "#/definitions/Lovelace" }
          }
        }
      }
    }

  , "SubmitTxError[tooLateForMir]":
    { "type": "object"
    , "title": "tooLateForMir"
    , "additionalProperties": false
    , "required": [ "tooLateForMir" ]
    , "properties":
      { "tooLateForMir":
        { "type": "object"
        , "additionalProperties": false
        , "required": [ "currentSlot", "lastAllowedSlot" ]
        , "properties":
          { "currentSlot": { "$ref": "#/definitions/Slot" }
          , "lastAllowedSlot": { "$ref": "#/definitions/Slot" }
          }
        }
      }
    }

  , "SubmitTxError[mirTransferNotCurrentlyAllowed]":
    { "type": "object"
    , "title": "mirTransferNotCurrentlyAllowed"
    , "additionalProperties": false
    , "required": [ "mirTransferNotCurrentlyAllowed" ]
    , "properties":
      { "mirTransferNotCurrentlyAllowed":
        { "type": "null"
        }
      }
    }

  , "SubmitTxError[mirNegativeTransferNotCurrentlyAllowed]":
    { "type": "object"
    , "title": "mirNegativeTransferNotCurrentlyAllowed"
    , "additionalProperties": false
    , "required": [ "mirNegativeTransferNotCurrentlyAllowed" ]
    , "properties":
      { "mirNegativeTransferNotCurrentlyAllowed":
        { "type": "null"
        }
      }
    }

  , "SubmitTxError[mirProducesNegativeUpdate]":
    { "type": "object"
    , "title": "mirProducesNegativeUpdate"
    , "additionalProperties": false
    , "required": [ "mirProducesNegativeUpdate" ]
    , "properties":
      { "mirProducesNegativeUpdate":
        { "type": "null"
        }
      }
    }

  , "SubmitTxError[duplicateGenesisVrf]":
    { "type": "object"
    , "title": "duplicateGenesisVrf"
    , "additionalProperties": false
    , "required": [ "duplicateGenesisVrf" ]
    , "properties":
      { "duplicateGenesisVrf": { "$ref": "#/definitions/Digest[Blake2b]::VrfVerificationKey" }
      }
    }

  , "SubmitTxError[nonGenesisVoters]":
    { "type": "object"
    , "title": "nonGenesisVoters"
    , "additionalProperties": false
    , "required": [ "nonGenesisVoters" ]
    , "properties":
      { "nonGenesisVoters":
        { "type": "object"
        , "additionalProperties": false
        , "required": [ "currentlyVoting", "shouldBeVoting" ]
        , "properties":
          { "currentlyVoting":
            { "type": "array"
            , "items": { "$ref": "#/definitions/Digest[Blake2b]::VerificationKey" }
            }
          , "shouldBeVoting":
            { "type": "array"
            , "items": { "$ref": "#/definitions/Digest[Blake2b]::VerificationKey" }
            }
          }
        }
      }
    }

  , "SubmitTxError[updateWrongEpoch]":
    { "type": "object"
    , "title": "updateWrongEpoch"
    , "additionalProperties": false
    , "required": [ "updateWrongEpoch" ]
    , "properties":
      { "updateWrongEpoch":
        { "type": "object"
        , "additionalProperties": false
        , "required": [ "currentEpoch", "requestedEpoch", "votingPeriod" ]
        , "properties":
          { "currentEpoch": { "$ref": "#/definitions/Epoch" }
          , "requestedEpoch": { "$ref": "#/definitions/Epoch" }
          , "votingPeriod": { "$ref": "#/definitions/VotingPeriod" }
          }
        }
      }
    }

  , "SubmitTxError[protocolVersionCannotFollow]":
    { "type": "object"
    , "title": "protocolVersionCannotFollow"
    , "additionalProperties": false
    , "required": [ "protocolVersionCannotFollow" ]
    , "properties":
      { "protocolVersionCannotFollow": { "$ref": "#/definitions/ProtocolVersion" }
      }
    }

  , "SubmitTxError[missingRequiredRedeemers]":
    { "type": "object"
    , "title": "missingRequiredRedeemers"
    , "additionalProperties": false
    , "required": [ "missingRequiredRedeemers" ]
    , "properties":
      { "missingRequiredRedeemers":
        { "type": "object"
        , "additionalProperties": false
        , "required": ["missing"]
        , "properties":
          { "missing":
            { "type": "array"
            , "items":
              { "type": "object"
              , "additionalProperties": { "$ref": "#/definitions/ScriptPurpose" }
              , "propertyNames": { "$ref": "#/definitions/Digest[Blake2b]::Script" }
              }
            }
          }
        }
      }
    }

  , "SubmitTxError[missingRequiredDatums]":
    { "type": "object"
    , "title": "missingRequiredDatums"
    , "additionalProperties": false
    , "required": [ "missingRequiredDatums" ]
    , "properties":
      { "missingRequiredDatums":
        { "type": "object"
        , "additionalProperties": false
        , "required": [ "missing" ]
        , "properties":
          { "provided":
            { "type": "array"
            , "items": { "$ref": "#/definitions/Digest[Blake2b]::Datum" }
            }
          , "missing":
            { "type": "array"
            , "items": { "$ref": "#/definitions/Digest[Blake2b]::Datum" }
            }
          }
        }
      }
    }

  , "SubmitTxError[unspendableDatums]":
    { "type": "object"
    , "title": "unspendableDatums"
    , "additionalProperties": false
    , "required": [ "unspendableDatums" ]
    , "properties":
      { "unspendableDatums":
        { "type": "object"
        , "additionalProperties": false
        , "required": [ "nonSpendable", "acceptable" ]
        , "properties":
          { "nonSpendable":
            { "type": "array"
            , "items": { "$ref": "#/definitions/Digest[Blake2b]::Datum" }
            }
          , "acceptable":
            { "type": "array"
            , "items": { "$ref": "#/definitions/Digest[Blake2b]::Datum" }
            }
          }
        }
      }
    }

  , "SubmitTxError[extraDataMismatch]":
    { "type": "object"
    , "title": "extraDataMismatch"
    , "additionalProperties": false
    , "required": [ "extraDataMismatch" ]
    , "properties":
      { "extraDataMismatch":
        { "type": "object"
        , "additionalProperties": false
        , "required": [ "provided", "inferredFromParameters" ]
        , "properties":
          { "provided":
            { "oneOf":
              [ { "$ref": "#/definitions/Digest[Blake2b]::ScriptIntegrity" }
              , { "$ref": "#/definitions/Null"}
              ]
            }
          , "inferredFromParameters":
            { "oneOf":
              [ { "$ref": "#/definitions/Digest[Blake2b]::ScriptIntegrity" }
              , { "$ref": "#/definitions/Null"}
              ]
            }
          }
        }
      }
    }

  , "SubmitTxError[missingRequiredSignatures]":
    { "type": "object"
    , "title": "missingRequiredSignatures"
    , "additionalProperties": false
    , "required": [ "missingRequiredSignatures" ]
    , "properties":
      { "missingRequiredSignatures":
        { "type": "array"
        , "items": { "$ref": "#/definitions/Digest[Blake2b]::VerificationKey" }
        }
      }
    }

  , "SubmitTxError[unspendableScriptInputs]":
    { "type": "object"
    , "title": "unspendableScriptInputs"
    , "additionalProperties": false
    , "required": [ "unspendableScriptInputs" ]
    , "properties":
      { "unspendableScriptInputs":
        { "type": "array"
        , "items": { "$ref": "#/definitions/TxIn" }
        }
      }
    }

  , "SubmitTxError[extraRedeemers]":
    { "type": "object"
    , "title": "extraRedeemers"
    , "additionalProperties": false
    , "required": [ "extraRedeemers" ]
    , "properties":
      { "extraRedeemers":
        { "type": "array"
        , "items": { "type": "string" }
        }
      }
    }

  , "SubmitTxError[missingDatumHashesForInputs]":
    { "type": "object"
    , "title": "missingDatumHashesForInputs"
    , "additionalProperties": false
    , "required": [ "missingDatumHashesForInputs" ]
    , "properties":
      { "missingDatumHashesForInputs":
        { "type": "array"
        , "items": { "$ref": "#/definitions/TxIn" }
        }
      }
    }

  , "SubmitTxError[missingCollateralInputs]":
    { "type": "object"
    , "title": "missingCollateralInputs"
    , "additionalProperties": false
    , "required": [ "missingCollateralInputs" ]
    , "properties":
      { "missingCollateralInputs":
        { "type": "null"
        }
      }
    , "description": "Only since Alonzo."
    }

  , "SubmitTxError[collateralTooSmall]":
    { "type": "object"
    , "title": "collateralTooSmall"
    , "additionalProperties": false
    , "required": [ "collateralTooSmall" ]
    , "properties":
      { "collateralTooSmall":
        { "type": "object"
        , "additionalProperties": false
        , "required": [ "requiredCollateral", "actualCollateral" ]
        , "properties":
          { "requiredCollateral": { "$ref": "#/definitions/Lovelace" }
          , "actualCollateral": { "$ref": "#/definitions/Lovelace" }
          }
        }
      }
    }

  , "SubmitTxError[collateralIsScript]":
    { "type": "object"
    , "title": "collateralIsScript"
    , "additionalProperties": false
    , "required": [ "collateralIsScript" ]
    , "properties":
      { "collateralIsScript": { "$ref": "#/definitions/Utxo" }
      }
    }

  , "SubmitTxError[collateralHasNonAdaAssets]":
    { "type": "object"
    , "title": "collateralHasNonAdaAssets"
    , "additionalProperties": false
    , "required": [ "collateralHasNonAdaAssets" ]
    , "properties":
      { "collateralHasNonAdaAssets": { "$ref": "#/definitions/Value" }
      }
    }

  , "SubmitTxError[tooManyCollateralInputs]":
    { "type": "object"
    , "title": "tooManyCollateralInputs"
    , "additionalProperties": false
    , "required": [ "tooManyCollateralInputs" ]
    , "properties":
      { "tooManyCollateralInputs":
        { "type": "object"
        , "additionalProperties": false
        , "required": [ "maximumCollateralInputs", "actualCollateralInputs" ]
        , "properties":
          { "maximumCollateralInputs": { "$ref": "#/definitions/UInt64" }
          , "actualCollateralInputs": { "$ref": "#/definitions/UInt64" }
          }
        }
      }
    }

  , "SubmitTxError[executionUnitsTooLarge]":
    { "type": "object"
    , "title": "executionUnitsTooLarge"
    , "additionalProperties": false
    , "required": [ "executionUnitsTooLarge" ]
    , "properties":
      { "executionUnitsTooLarge":
        { "type": "object"
        , "additionalProperties": false
        , "required": [ "maximumExecutionUnits", "actualExecutionUnits" ]
        , "properties":
          { "maximumExecutionUnits": { "$ref": "#/definitions/ExUnits" }
          , "actualExecutionUnits": { "$ref": "#/definitions/ExUnits" }
          }
        }
      }
    }

  , "SubmitTxError[outsideForecast]":
    { "type": "object"
    , "title": "outsideForecast"
    , "additionalProperties": false
    , "required": [ "outsideForecast" ]
    , "properties":
      { "outsideForecast": { "$ref": "#/definitions/Slot" }
      }
    }

  , "SubmitTxError[validationTagMismatch]":
    { "type": "object"
    , "title": "validationTagMismatch"
    , "additionalProperties": false
    , "required": [ "validationTagMismatch" ]
    , "properties":
      { "validationTagMismatch":
        { "type": "null"
        }
      }
    , "description": "Only since Alonzo."
    }

  , "SubmitTxError[collectErrors]":
    { "type": "object"
    , "title": "collectErrors"
    , "additionalProperties": false
    , "required": [ "collectErrors" ]
    , "properties":
      { "collectErrors":
        { "type": "array"
        }
      }
    }

  , "SubmitTxError[extraScriptWitnesses]":
    { "type": "object"
    , "title": "extraScriptWitnesses"
    , "additionalProperties": false
    , "required": ["extraScriptWitnesses"]
    , "properties":
      { "extraScriptWitnesses":
        { "type": "array"
        , "items": { "$ref": "#/definitions/Digest[Blake2b]::Script" }
        }
      }
    }

  , "TipOrOrigin":
    { "oneOf":
      [ { "type": "object"
        , "title": "tip"
        , "additionalProperties": false
        , "required": [ "slot", "hash", "blockNo" ]
        , "properties":
          { "slot": { "$ref": "#/definitions/Slot" }
          , "hash": { "$ref": "#/definitions/Digest[Blake2b]::Block[*].header" }
          , "blockNo": { "$ref": "#/definitions/BlockNo" }
          }
        }
      , { "$ref": "#/definitions/Origin" }
      ]
    }

  , "Tx[Byron]":
    { "type": "object"
    , "additionalProperties": false
    , "required": [ "id", "body", "witness", "raw" ]
    , "$omitted-if-compact": ["witness", "raw"]
    , "properties":
      { "id": { "$ref": "#/definitions/TxId" }
      , "body":
        { "type": "object"
        , "additionalProperties": false
        , "required": [ "inputs", "outputs" ]
        , "properties":
          { "inputs":
            { "type": "array"
            , "items": { "$ref": "#/definitions/TxIn" }
            }
          , "outputs":
            { "type": "array"
            , "items": { "$ref": "#/definitions/TxOut" }
            }
          }
        }
      , "witness":
        { "type": "array"
        , "items": { "$ref": "#/definitions/TxWitness" }
        }
      , "raw":
        { "type": "string"
        , "contentEncoding": "base64"
        , "description": "The raw serialized transaction, as found on-chain."
        }
      }
    }

  , "Tx[Shelley]":
    { "type": "object"
    , "additionalProperties": false
    , "required": [ "id", "body", "witness", "metadata", "raw" ]
    , "$omitted-if-compact": ["witness", "raw"]
    , "properties":
      { "id": { "$ref": "#/definitions/Digest[Blake2b]::Block[*].body" }
      , "body":
        { "type": "object"
        , "additionalProperties": false
        , "required": ["inputs","outputs","certificates","withdrawals","fee","timeToLive","update"]
        , "properties":
          { "inputs":
            { "type": "array"
            , "items": { "$ref": "#/definitions/TxIn" }
            }
          , "outputs":
            { "type": "array"
            , "items": { "$ref": "#/definitions/TxOut" }
            }
          , "certificates":
            { "type": "array"
            , "items": { "$ref": "#/definitions/Certificate" }
            }
          , "withdrawals": { "$ref": "#/definitions/Withdrawals" }
          , "fee": { "$ref": "#/definitions/Lovelace" }
          , "timeToLive": { "$ref": "#/definitions/Slot" }
          , "update": { "$ref": "#/definitions/Update[Shelley]" }
          }
        }
      , "witness":
        { "type": "object"
        , "additionalProperties": false
        , "required": ["signatures","scripts","bootstrap"]
        , "properties":
          { "signatures":
            { "type": "object"
            , "propertyNames": { "contentEncoding": "base16", "pattern": "^[0-9a-f]+$" }
            , "additionalProperties": { "$ref": "#/definitions/Signature" }
            }
          , "scripts":
            { "type": "object"
            , "propertyNames": { "contentEncoding": "base16", "pattern": "^[0-9a-f]+$" }
            , "additionalProperties": { "$ref": "#/definitions/Script" }
            }
          , "bootstrap":
            { "type": "array"
            , "items": { "$ref": "#/definitions/BootstrapWitness" }
            }
          }
        }
      , "metadata":
        { "oneOf":
          [ { "$ref": "#/definitions/AuxiliaryData" }
          , { "$ref": "#/definitions/Null"}
          ]
        }
      , "raw":
        { "type": "string"
        , "contentEncoding": "base64"
        , "description": "The raw serialized transaction, as found on-chain."
        }
      }
    }

  , "Tx[Allegra]":
    { "type": "object"
    , "additionalProperties": false
    , "required": [ "id", "body", "witness", "metadata", "raw" ]
    , "$omitted-if-compact": ["witness", "raw"]
    , "properties":
      { "id": { "$ref": "#/definitions/Digest[Blake2b]::Block[*].body" }
      , "body":
        { "type": "object"
        , "additionalProperties": false
        , "required": ["inputs","outputs","certificates","withdrawals","fee","validityInterval","update"]
        , "properties":
          { "inputs":
            { "type": "array"
            , "items": { "$ref": "#/definitions/TxIn" }
            }
          , "outputs":
            { "type": "array"
            , "items": { "$ref": "#/definitions/TxOut" }
            }
          , "certificates":
            { "type": "array"
            , "items": { "$ref": "#/definitions/Certificate" }
            }
          , "withdrawals": { "$ref": "#/definitions/Withdrawals" }
          , "fee": { "$ref": "#/definitions/Lovelace" }
          , "validityInterval": { "$ref": "#/definitions/ValidityInterval" }
          , "update": { "$ref": "#/definitions/Update[Shelley]" }
          }
        }
      , "witness":
        { "type": "object"
        , "additionalProperties": false
        , "required": ["signatures","scripts","bootstrap"]
        , "properties":
          { "signatures":
            { "type": "object"
            , "propertyNames": { "contentEncoding": "base16", "pattern": "^[0-9a-f]+$" }
            , "additionalProperties": { "$ref": "#/definitions/Signature" }
            }
          , "scripts":
            { "type": "object"
            , "propertyNames": { "contentEncoding": "base16", "pattern": "^[0-9a-f]+$" }
            , "additionalProperties": { "$ref": "#/definitions/Script" }
            }
          , "bootstrap":
            { "type": "array"
            , "items": { "$ref": "#/definitions/BootstrapWitness" }
            }
          }
        }
      , "metadata":
        { "oneOf":
          [ { "$ref": "#/definitions/AuxiliaryData" }
          , { "$ref": "#/definitions/Null"}
          ]
        }
      , "raw":
        { "type": "string"
        , "contentEncoding": "base64"
        , "description": "The raw serialized transaction, as found on-chain."
        }
      }
    }

  , "Tx[Mary]":
    { "type": "object"
    , "additionalProperties": false
    , "required": [ "id", "body", "witness", "metadata", "raw" ]
    , "$omitted-if-compact": ["witness", "raw"]
    , "properties":
      { "id": { "$ref": "#/definitions/Digest[Blake2b]::Block[*].body" }
      , "body":
        { "type": "object"
        , "additionalProperties": false
        , "required": ["inputs","outputs","certificates","withdrawals","fee","validityInterval","mint","update"]
        , "properties":
          { "inputs":
            { "type": "array"
            , "items": { "$ref": "#/definitions/TxIn" }
            }
          , "outputs":
            { "type": "array"
            , "items": { "$ref": "#/definitions/TxOut" }
            }
          , "certificates":
            { "type": "array"
            , "items": { "$ref": "#/definitions/Certificate" }
            }
          , "withdrawals": { "$ref": "#/definitions/Withdrawals" }
          , "fee": { "$ref": "#/definitions/Lovelace" }
          , "validityInterval": { "$ref": "#/definitions/ValidityInterval" }
          , "update": { "$ref": "#/definitions/Update[Shelley]" }
          , "mint": { "$ref": "#/definitions/Value" }
          }
        }
      , "witness":
        { "type": "object"
        , "additionalProperties": false
        , "required": ["signatures","scripts","bootstrap"]
        , "properties":
          { "signatures":
            { "type": "object"
            , "propertyNames": { "contentEncoding": "base16", "pattern": "^[0-9a-f]+$" }
            , "additionalProperties": { "$ref": "#/definitions/Signature" }
            }
          , "scripts":
            { "type": "object"
            , "propertyNames": { "contentEncoding": "base16", "pattern": "^[0-9a-f]+$" }
            , "additionalProperties": { "$ref": "#/definitions/Script" }
            }
          , "bootstrap":
            { "type": "array"
            , "items": { "$ref": "#/definitions/BootstrapWitness" }
            }
          }
        }
      , "metadata":
        { "oneOf":
          [ { "$ref": "#/definitions/AuxiliaryData" }
          , { "$ref": "#/definitions/Null"}
          ]
        }
      , "raw":
        { "type": "string"
        , "contentEncoding": "base64"
        , "description": "The raw serialized transaction, as found on-chain."
        }
      }
    }

  , "Tx[Alonzo]":
    { "type": "object"
    , "additionalProperties": false
    , "required": [ "id", "body", "witness", "metadata", "inputSource", "raw" ]
    , "$omitted-if-compact": ["witness", "raw"]
    , "properties":
      { "id": { "$ref": "#/definitions/Digest[Blake2b]::Block[*].body" }
      , "inputSource":
        { "type": "string"
        , "enum":
          [ "inputs"
          , "collaterals"
          ]
        }
      , "body":
        { "type": "object"
        , "additionalProperties": false
        , "required":
          [ "inputs", "collaterals", "outputs", "certificates"
          , "withdrawals", "fee", "validityInterval", "update", "mint"
          , "network", "scriptIntegrityHash", "requiredExtraSignatures"
          ]
        , "properties":
          { "inputs":
            { "type": "array"
            , "items": { "$ref": "#/definitions/TxIn" }
            }
          , "collaterals":
            { "type": "array"
            , "items": { "$ref": "#/definitions/TxIn" }
            }
          , "outputs":
            { "type": "array"
            , "items": { "$ref": "#/definitions/TxOut" }
            }
          , "certificates":
            { "type": "array"
            , "items": { "$ref": "#/definitions/Certificate" }
            }
          , "withdrawals":
            { "$ref": "#/definitions/Withdrawals"
            }
          , "fee":
            { "$ref": "#/definitions/Lovelace"
            }
          , "validityInterval":
            { "$ref": "#/definitions/ValidityInterval"
            }
          , "update":
            { "$ref": "#/definitions/Update[Alonzo]"
            }
          , "mint":
            { "$ref": "#/definitions/Value"
            }
          , "network":
            { "oneOf":
              [ { "$ref": "#/definitions/Network" }
              , { "$ref": "#/definitions/Null"}
              ]
            }
          , "scriptIntegrityHash":
            { "oneOf":
              [ { "$ref": "#/definitions/Digest[Blake2b]::ScriptIntegrity" }
              , { "$ref": "#/definitions/Null"}
              ]
            }
          , "requiredExtraSignatures":
            { "type": "array"
            , "items": { "$ref": "#/definitions/Digest[Blake2b]::VerificationKey" }
            }
          }
        }
      , "witness":
        { "type": "object"
        , "additionalProperties": false
        , "required": ["signatures","scripts","bootstrap", "datums", "redeemers"]
        , "properties":
          { "signatures":
            { "type": "object"
            , "propertyNames": { "contentEncoding": "base16", "pattern": "^[0-9a-f]+$" }
            , "additionalProperties": { "$ref": "#/definitions/Signature" }
            }
          , "scripts":
            { "type": "object"
            , "propertyNames": { "contentEncoding": "base16", "pattern": "^[0-9a-f]+$" }
            , "additionalProperties": { "$ref": "#/definitions/Script" }
            }
          , "bootstrap":
            { "type": "array"
            , "items": { "$ref": "#/definitions/BootstrapWitness" }
            }
          , "datums":
            { "type": "object"
            , "propertyNames": { "contentEncoding": "base16", "pattern": "^[0-9a-f]+$" }
            , "additionalProperties": { "$ref": "#/definitions/Datum" }
            }
          , "redeemers":
            { "type": "object"
            , "propertyNames": { "$ref": "#/definitions/RedeemerPointer" }
            , "additionalProperties": { "$ref": "#/definitions/Redeemer" }
            }
          }
        }
      , "metadata":
        { "oneOf":
          [ { "$ref": "#/definitions/AuxiliaryData" }
          , { "$ref": "#/definitions/Null"}
          ]
        }
      , "raw":
        { "type": "string"
        , "contentEncoding": "base64"
        , "description": "The raw serialized transaction, as found on-chain."
        }
      }
    }

  , "TxFeePolicy":
    { "type": "object"
    , "additionalProperties": false
    , "required": [ "coefficient", "constant" ]
    , "properties":
      { "coefficient": { "$ref": "#/definitions/Ratio" }
      , "constant": { "type": "number" }
      }
    }

  , "TxId":
    { "type": "string"
    , "description": "A Blake2b 32-byte digest of a transaction body, CBOR-encoded."
    , "contentEncoding": "base16"
    , "minLength": 64
    , "maxLength": 64
    }

  , "TxIn":
    { "type": "object"
    , "additionalProperties": false
    , "required": [ "txId", "index" ]
    , "properties":
      { "txId": { "$ref": "#/definitions/TxId" }
      , "index":
        { "$ref": "#/definitions/UInt32"
        , "minimum": 0
        }
      }
    }

  , "TxOut":
    { "type": "object"
    , "description": "A transaction output. Since Mary, 'value' always return a multi-asset value. Since Alonzo, 'datum' is always present (albeit sometimes 'null')"
    , "examples":
      [ { "address": "addr1kkhxvw4w4rjsq9tmma964lt0twsvu46e7lx5zq0uzvh4g7akg7z"
        , "value": 1337
        }
      , { "address": "addr_test1kkhxvw4w4rjsq9tmma964lt0twsvu46e7lx5zq0uzvh4gacwqam"
        , "value":
          { "coins": 14
          , "assets":
            { "c3b87a742ad14abf855ebc6733081e3542acb3a64d80c29302260d62": 27
            }
          }
        }
      , { "address": "addr_test1qz66ue36465w2qq40005h2hadad6pnjht8mu6sgplsfj74qdjnshguewlx4ww0eet26y2pal4xpav5prcydf28cvxtjqx46x7f"
        , "value":
          { "coins": 2
          , "assets":
            { "3542acb3a64d80c29302260d62c3b87a742ad14abf855ebc6733081e": 1
            , "b5ae663aaea8e500157bdf4baafd6f5ba0ce5759f7cd4101fc132f54": 2
            }
          }
        , "datum": null
        }
      , { "address": "addr1pk2wzarn9mu64eel89dtg3g8h75c84jsy0q349glpsewg2x42k2"
        , "value":
          { "coins": 42
          , "assets": {}
          }
        , "datum": "2a941b2a5460b760c6dd82fe08f2ca26896fde5f22bc0146409bd95c9b4c8446"
        }
      ]
    , "additionalProperties": false
    , "required": [ "address", "value" ]
    , "properties":
      { "address": { "$ref": "#/definitions/Address" }
      , "value": { "$ref": "#/definitions/Value" }
      , "datum":
        { "oneOf":
          [ { "$ref": "#/definitions/Digest[Blake2b]::Datum" }
          , { "$ref": "#/definitions/Null"}
          ]
        }
      }
    }

  , "TxWitness":
    { "type": "object"
    , "oneOf":
      [ { "additionalProperties": false
        , "title": "witnessVk"
        , "required": [ "witnessVk" ]
        , "properties":
          { "witnessVk":
            { "type": "object"
            , "additionalProperties": false
            , "required": [ "key", "signature" ]
            , "properties":
              { "key": { "$ref": "#/definitions/Digest[Blake2b]::VerificationKey" }
              , "signature": { "$ref": "#/definitions/Signature" }
              }
            }
          }
        }
      , { "additionalProperties": false
        , "title": "redeemWitness"
        , "required": [ "redeemWitness" ]
        , "properties":
          { "redeemWitness":
            { "type": "object"
            , "additionalProperties": false
            , "required": [ "key", "signature" ]
            , "properties":
              { "key": { "$ref": "#/definitions/VerificationKey" }
              , "signature": { "$ref": "#/definitions/Signature" }
              }
            }
          }
        }
      ]
    }

  , "UInt8":
    { "type": "integer"
    , "minimum": 0
    , "maximum": 255
    }

  , "UInt32":
    { "type": "integer"
    , "minimum": 0
    , "maximum": 4294967295
    }

  , "UInt64":
    { "type": "integer"
    , "minimum": 0
    , "maximum": 18446744073709552999
    }

  , "Update[Shelley]":
    { "oneOf":
      [ { "$ref": "#/definitions/Null"}
      , { "type": "object"
        , "title": "UpdateProposal[Shelley]"
        , "additionalProperties": false
        , "required": ["proposal", "epoch"]
        , "properties":
          { "epoch": { "$ref": "#/definitions/Epoch" }
          , "proposal":
            { "type": "object"
            , "additionalProperties": { "$ref": "#/definitions/ProtocolParameters[Shelley]" }
            }
          }
        }
      ]
    }

  , "Update[Alonzo]":
    { "oneOf":
      [ { "$ref": "#/definitions/Null"}
      , { "type": "object"
        , "title": "UpdateProposal[Alonzo]"
        , "additionalProperties": false
        , "required": ["proposal", "epoch"]
        , "properties":
          { "epoch": { "$ref": "#/definitions/Epoch" }
          , "proposal":
            { "type": "object"
            , "additionalProperties": { "$ref": "#/definitions/ProtocolParameters[Alonzo]" }
            }
          }
        }
      ]
    }

  , "UtcTime":
    { "type": "string"
    , "format": "date-time"
    , "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}.?[0-9]*Z?"
    }

  , "Utxo":
    { "type": "array"
    , "additionalItems": false
    , "items":
      { "type": "array"
      , "additionalItems": false
      , "minItems": 2
      , "maxItems": 2
      , "items":
        [ { "$ref": "#/definitions/TxIn" }
        , { "$ref": "#/definitions/TxOut" }
        ]
      }
    }

  , "ValidityInterval":
    { "type": "object"
    , "additionalProperties": false
    , "required": [ "invalidBefore", "invalidHereafter" ]
    , "properties":
      { "invalidBefore":
          { "oneOf":
            [ { "$ref": "#/definitions/Slot" }
            , { "$ref": "#/definitions/Null"}
            ]
          }
      , "invalidHereafter":
          { "oneOf":
            [ { "$ref": "#/definitions/Slot" }
            , { "$ref": "#/definitions/Null"}
            ]
          }
      }
    }

  , "Value":
    { "type": "object"
    , "additionalProperties": false
    , "required": [ "coins" ]
    , "properties":
      { "coins": { "$ref": "#/definitions/Lovelace" }
      , "assets":
        { "type": "object"
        , "propertyNames": "^[0-9a-z]{56}(.[0-9a-z]{1,64})?$"
        , "additionalProperties": { "$ref": "#/definitions/AssetQuantity" }
        }
      }
    }

  , "Vote":
    { "type": "object"
    , "additionalProperties": false
    , "required": [ "voterVk", "proposalId", "signature" ]
    , "properties":
      { "voterVk": { "$ref": "#/definitions/VerificationKey" }
      , "proposalId": { "$ref": "#/definitions/Digest[Blake2b]::VerificationKey" }
      , "signature": { "$ref": "#/definitions/Signature" }
      }
    }

  , "VotingPeriod":
    { "type": "string"
    , "enum": [ "voteForThisEpoch", "voteForNextEpoch" ]
    }

  , "VrfProof":
    { "type": "string"
    , "contentEncoding": "base64"
    }

  , "VrfOutput":
    { "type": "string"
    , "contentEncoding": "base64"
    }

  , "Withdrawals":
    { "type": "object"
    , "additionalProperties": { "$ref": "#/definitions/Lovelace" }
    , "propertyNames": "^stake(_test)?1[0-9a-z]+$"
    }

  , "VerificationKey":
    { "type": "string"
    , "description": "An Ed25519 verification key."
    , "contentEncoding": "base16"
    , "minLength": 64
    , "maxLength": 64
    }
  }
}
