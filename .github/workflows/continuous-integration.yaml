name: Continuous Integration

on:
  pull_request:
    branches: [ "master" ]
  push:
    branches: [ "master" ]
    tags: [ "*.*.*" ]

jobs:
  #  _______  _______  ______    __   __  _______  ______
  # |       ||       ||    _ |  |  | |  ||       ||    _ |
  # |  _____||    ___||   | ||  |  |_|  ||    ___||   | ||
  # | |_____ |   |___ |   |_||_ |       ||   |___ |   |_||_
  # |_____  ||    ___||    __  ||       ||    ___||    __  |
  #  _____| ||   |___ |   |  | | |     | |   |___ |   |  | |
  # |_______||_______||___|  |_|  |___|  |_______||___|  |_|
  #
  server_build:
    strategy:
      matrix:
        os: [ubuntu-20.04]

    runs-on: ${{ matrix.os }}
    steps:
    - name: üíΩ Install OS Packages
      uses: mstksg/get-package@2a4b48d55d72d43ca89ae58ec9ca1397d34a1c35
      with:
        apt-get: libgmp-dev libssl-dev libsystemd-dev libsodium-dev zlib1g-dev

    - name: üß± Setup secp256k1 w/ Schnorr Signatures
      run: |
        sudo apt-get -y install autoconf automake libtool
        git clone https://github.com/bitcoin-core/secp256k1.git
        cd secp256k1
        git reset --hard ac83be33d0956faf6b7f61a60ab524ef7d6a473a
        ./autogen.sh
        ./configure --prefix=/usr --enable-module-schnorrsig --enable-experimental
        make
        make check
        sudo make install

    - name: üì• Checkout repository
      uses: actions/checkout@v2.3.3
      with:
        submodules: true

    - name: üß∞ Setup Stack
      uses: timbod7/setup-stack@1f68f27c99094a718fe60a2790550aafd042f729

    - name: üíæ Cache Dependencies
      id: cache
      uses: actions/cache@v2.1.1
      with:
        path: ~/.stack
        key: ${{ matrix.os }}-${{ hashFiles('server/resolver.yaml') }}

    - name: üì∏ Build Snapshot
      if: steps.cache.outputs.cache-hit != 'true'
      working-directory: server
      run: |
        stack --no-terminal build --only-snapshot --haddock --no-haddock-deps

    - name: üî® Build
      working-directory: server
      shell: bash
      run: |
        stack --no-terminal install --flag ogmios:production ogmios
        stack --no-terminal test    --flag ogmios:production --no-run-tests
        mv $(stack path --local-bin)/ogmios ogmios

    - name: üì§ Upload binary
      uses: actions/upload-artifact@v2
      with:
        name: ogmios
        path: |
          server/ogmios

  server_test:
    needs: [server_build]
    strategy:
      matrix:
        os: [ubuntu-20.04]

    runs-on: ${{ matrix.os }}
    steps:
    - name: üíΩ Install OS Packages
      uses: mstksg/get-package@2a4b48d55d72d43ca89ae58ec9ca1397d34a1c35
      with:
        apt-get: libgmp-dev libssl-dev libsystemd-dev libsodium-dev zlib1g-dev

    - name: üß± Setup secp256k1 w/ Schnorr Signatures
      run: |
        sudo apt-get -y install autoconf automake libtool
        git clone https://github.com/bitcoin-core/secp256k1.git
        cd secp256k1
        git reset --hard ac83be33d0956faf6b7f61a60ab524ef7d6a473a
        ./autogen.sh
        ./configure --prefix=/usr --enable-module-schnorrsig --enable-experimental
        make
        make check
        sudo make install

    - name: üì• Checkout repository
      uses: actions/checkout@v2.3.3
      with:
        submodules: true

    - name: üß∞ Setup Stack
      uses: timbod7/setup-stack@1f68f27c99094a718fe60a2790550aafd042f729

    - name: üíæ Cache Dependencies
      id: cache
      uses: actions/cache@v2.1.1
      with:
        path: ~/.stack
        key: ${{ matrix.os }}-${{ hashFiles('server/resolver.yaml') }}

    - name: üî® Test
      working-directory: server
      run: |
        stack --no-terminal test --flag ogmios:production ogmios:unit

  #  _______  _______  ______    __   __  _______  ______            ___      ___   __    _  _______
  # |       ||       ||    _ |  |  | |  ||       ||    _ |          |   |    |   | |  |  | ||       |
  # |  _____||    ___||   | ||  |  |_|  ||    ___||   | ||          |   |    |   | |   |_| ||_     _|
  # | |_____ |   |___ |   |_||_ |       ||   |___ |   |_||_         |   |    |   | |       |  |   |
  # |_____  ||    ___||    __  ||       ||    ___||    __  |        |   |___ |   | |  _    |  |   |
  #  _____| ||   |___ |   |  | | |     | |   |___ |   |  | | _____  |       ||   | | | |   |  |   |
  # |_______||_______||___|  |_|  |___|  |_______||___|  |_||_____| |_______||___| |_|  |__|  |___|
  #
  server_lint:
    strategy:
      matrix:
        os: [ubuntu-20.04]
    runs-on: ${{ matrix.os }}
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v2.3.3
      with:
        submodules: true

    - name: üî¨ hlint
      working-directory: server
      shell: bash
      env:
        PACKAGE: hlint
        REPOSITORY: ndmitchell/hlint
        PLATFORM: x86_64-linux
        RELEASE: v3.2
        VERSION: 3.2
      run: |
        curl -sSL https://raw.github.com/cardanosolutions/ogmios/master/scripts/exec-from-github.sh | sh -s src test app -h .hlint.yaml

    - name: üßê stylish-haskell
      working-directory: server
      shell: bash
      env:
        PACKAGE: stylish-haskell
        REPOSITORY: jaspervdj/stylish-haskell
        PLATFORM: linux-x86_64
        RELEASE: v0.11.0.0
        VERSION: v0.11.0.0
      run: |
        curl -sSL https://raw.github.com/cardanosolutions/ogmios/master/scripts/exec-from-github.sh | sh -s $(find src test app -type f -name '*.hs' ! -path '*.stack-work*') -i -c .stylish-haskell.yaml
        if [ -z "$(git status --porcelain)" ]; then
            echo "No style errors detected."
        else
            echo "Style errors detected:"
            git diff
            exit 1
        fi

  #  _______  ___      ___   _______  __    _  _______  _______          _______  __   __  _______  _______  _______  _______  ______    ___   _______  _______
  # |       ||   |    |   | |       ||  |  | ||       ||       |        |       ||  | |  ||       ||       ||       ||       ||    _ |  |   | |       ||       |
  # |       ||   |    |   | |    ___||   |_| ||_     _||  _____|        |_     _||  |_|  ||    _  ||    ___||  _____||       ||   | ||  |   | |    _  ||_     _|
  # |       ||   |    |   | |   |___ |       |  |   |  | |_____           |   |  |       ||   |_| ||   |___ | |_____ |       ||   |_||_ |   | |   |_| |  |   |
  # |      _||   |___ |   | |    ___||  _    |  |   |  |_____  |          |   |  |_     _||    ___||    ___||_____  ||      _||    __  ||   | |    ___|  |   |
  # |     |_ |       ||   | |   |___ | | |   |  |   |   _____| | _____    |   |    |   |  |   |    |   |___  _____| ||     |_ |   |  | ||   | |   |      |   |
  # |_______||_______||___| |_______||_|  |__|  |___|  |_______||_____|   |___|    |___|  |___|    |_______||_______||_______||___|  |_||___| |___|      |___|
  #
  clients_TypeScript:
    needs: [server_build]
    strategy:
      matrix:
        os: [ubuntu-20.04]
        network: [testnet]
        cardanoNodeVersion: [1.35.0-rc3]

    runs-on: ${{ matrix.os }}
    steps:
    - name: üíΩ Install OS Packages
      uses: mstksg/get-package@2a4b48d55d72d43ca89ae58ec9ca1397d34a1c35
      with:
        apt-get: libgmp-dev libssl-dev libsystemd-dev libsodium-dev zlib1g-dev

    - name: üß± Setup secp256k1 w/ Schnorr Signatures
      run: |
        sudo apt-get -y install autoconf automake libtool
        git clone https://github.com/bitcoin-core/secp256k1.git
        cd secp256k1
        git reset --hard ac83be33d0956faf6b7f61a60ab524ef7d6a473a
        ./autogen.sh
        ./configure --prefix=/usr --enable-module-schnorrsig --enable-experimental
        make
        make check
        sudo make install

    - name: üì• Checkout repository
      uses: actions/checkout@v2.3.3
      with:
        submodules: true

    - name: ‚åö Get Date/Time
      id: date-time
      shell: bash
      run: |
        echo "::set-output name=value::$(/bin/date -u "+%Y%m%d-%H%M%S")"

    - name: üß∞ Setup Node.js
      uses: actions/setup-node@v1
      with:
        node-version: 14.15.0

    - name: üî® Build
      working-directory: clients/TypeScript
      run: |
        yarn install --frozen-lockfile --non-interactive --logevel=error
        yarn build
        yarn lint

    - name: üì• Download
      uses: actions/download-artifact@v2
      with:
        name: ogmios
        path: server

    - name: üíæ Cache cardano-node DB
      id: cache
      uses: actions/cache@v2.1.1
      with:
        path: ${{ runner.temp }}/db-${{ matrix.network }}
        key: cardano-node-ogmios-${{ matrix.network }}-${{ steps.date-time.outputs.value }}
        restore-keys: |
          cardano-node-ogmios-${{ matrix.network }}-

    - name: üî¨ Test
      if: matrix.network == 'testnet'
      working-directory: clients/TypeScript
      shell: bash
      env:
        CONFDIR: /home/runner/work/ogmios/ogmios/server/config/network/${{ matrix.network }}
      run: |
        chmod +x ../../server/ogmios
        sudo ../../server/ogmios --port 1338 --log-level error --node-socket ${{ runner.temp }}/ipc/node.socket --node-config $CONFDIR/cardano-node/config.json &

        docker pull inputoutput/cardano-node:${{ matrix.cardanoNodeVersion }}
        docker run -d --name cardano-node \
          -v ${{ runner.temp }}/db-${{ matrix.network }}:/db \
          -v ${{ runner.temp }}/ipc:/ipc \
          -v $CONFDIR/cardano-node:/config \
          -v $CONFDIR/genesis:/genesis \
          inputoutput/cardano-node:${{ matrix.cardanoNodeVersion }} run --config /config/config.json --database-path /db --socket-path /ipc/node.socket --topology /config/topology.json

        ../../scripts/wait-for-sync.sh 1338 1

        yarn test
        docker stop cardano-node
        docker rm cardano-node

  clients_TypeScript_repl:
    if: ${{ github.event_name == 'push' }}
    runs-on: ${{ matrix.os }}
    needs: [clients_TypeScript]
    strategy:
      matrix:
        os: [ubuntu-20.04]
        target: [linux,macos,win.exe]
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v2.3.3

    - name: üß∞ Setup Node.js
      uses: actions/setup-node@v1
      with:
        node-version: 14.15.0

    - name: üì¶ Package REPL
      working-directory: clients/TypeScript
      run: |
        yarn install --frozen-lockfile --non-interactive --logevel=error
        yarn repl:pkg

    - name: üì§ Upload REPL exe
      uses: actions/upload-artifact@v2
      with:
        name: cardano-ogmios-repl-${{ matrix.target }}-${{ github.sha }}
        path: clients/TypeScript/packages/repl/build/cardano-ogmios-repl-${{ matrix.target }}

  clients_TypeScript_npm:
    if: ${{ github.event_name == 'push' }}
    runs-on: ${{ matrix.os }}
    needs: [clients_TypeScript]
    strategy:
      matrix:
        os: [ubuntu-20.04]
        package: [schema,client,repl]
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v2.3.3

    - name: üß∞ Setup Node.js
      uses: actions/setup-node@v1
      with:
        node-version: 14.15.0

    - name: üì¶ Pack
      working-directory: clients/TypeScript
      run: |
        yarn install --frozen-lockfile --non-interactive --logevel=error
        ./scripts/pack.sh

    - name: üì§ Upload npm packages
      uses: actions/upload-artifact@v2
      with:
        name: cardano-ogmios-clients-ts-packages
        path: |
          clients/TypeScript/cardano-ogmios-client-${{ github.sha }}.tgz
          clients/TypeScript/cardano-ogmios-schema-${{ github.sha }}.tgz
          clients/TypeScript/cardano-ogmios-repl-${{ github.sha }}.tgz

    - name: üì§ Publish client package to npm registry
      if: ${{ startsWith(github.ref, 'refs/tags') }}
      uses: JS-DevTools/npm-publish@v1
      with:
        check-version: true
        package: clients/TypeScript/packages/${{ matrix.package }}/package.json
        token: ${{ secrets.NPM_TOKEN }}
