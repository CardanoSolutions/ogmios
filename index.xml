<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Overview on Ogmios</title><link>https://ogmios.dev/</link><description>Recent content in Overview on Ogmios</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 25 Oct 2020 16:33:22 +0100</lastBuildDate><atom:link href="https://ogmios.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>AWS</title><link>https://ogmios.dev/deployment/aws/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/deployment/aws/</guid><description>Pre-Requisites Make sure to have an AWS account, and an AWS_ACCESS_KEY_ID &amp;amp; AWS_SECRET_ACCESS_KEY.
Make sure to grant AmazonEC2FullAccess to your AWS user.
You&amp;rsquo;ll need to create a security group which allows inbound TCP connections. See also: Working With Security Groups.
Install docker-machine
Create an SSH key/pair $ ssh-keygen -t rsa -b 4096 -C &amp;quot;your_email@example.com&amp;quot; -f aws_rsa $ eval &amp;quot;$(ssh-agent -s)&amp;quot; $ ssh-add ~/.</description></item><item><title>Docker</title><link>https://ogmios.dev/getting-started/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/getting-started/docker/</guid><description>🐳 Overview The easiest way to get started with Ogmios is to use docker. This guide won&amp;rsquo;t cover installing docker, so make sure you have the Docker daemon installed and running.
Ogmios docker images come in two flavours: cardano-node-ogmios and ogmios. The former is used to run a single container that bundles both a Cardano-node and an Ogmios server running side-by-side. It is likely the easiest way to get started. The latter is a standalone Ogmios server, and you&amp;rsquo;ll need to run that container in orchestration with a cardano-node; this is made relatively easy with Docker compose.</description></item><item><title>Local Chain Sync</title><link>https://ogmios.dev/mini-protocols/local-chain-sync/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/mini-protocols/local-chain-sync/</guid><description>┌───────────┐ │ Intersect │◀══════════════════════════════╗ └─────┬─────┘ FindIntersect ║ │ ║ │ ┌──────────┐ │ Intersect.{Found,NotFound} │ │ └───────────────────────────────▶│ │ │ Idle │ ╔═══════════════════════════════════│ │ ║ RequestNext │ │⇦ START ║ └──────────┘ ▼ ▲ ┌──────┐ Roll.{Backward,Forward} │ │ Next ├────────────────────────────────────┘ └──────┘ Overview Clients that wish to synchronise blocks from the Cardano chain can use the Local Chain Sync protocol.
The protocol is stateful, which means that each connection between clients and Ogmios has a state: a cursor locating a point on the chain.</description></item><item><title>Overview</title><link>https://ogmios.dev/typescript-client/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/typescript-client/overview/</guid><description>Overview The TypeScript client for Ogmios is available on npm:
$ yarn add @cardano-ogmios/client It provides a fully typed interface for interacting with Ogmios as well as many convenient functions to manage WebSocket connections and drive the Ouroboros mini-protocols.
The package is divided into a few modules: one per Ouroboros mini-protocols and some for managing WebSocket connections or utils. Let&amp;rsquo;s start with the Connection module which is a necessary step regardless of which protocol you&amp;rsquo;ll then use.</description></item><item><title>Building</title><link>https://ogmios.dev/getting-started/building/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/getting-started/building/</guid><description>You may skip this section if you&amp;rsquo;re using Docker 🐳.
Pre-requisites (Server) Ogmios is built using the great Haskell build tool stack. You&amp;rsquo;ll also need git to clone the source code, that is:
git 2.11.* stack 2.*.* Ogmios in itself is a rather small project, yet it&amp;rsquo;s using library directly from the ouroboros-network, cardano-ledger-specs and cardano-node projects. This is handy for re-using existing logic, but comes at the cost of several system dependencies that are required for building everything.</description></item><item><title>ChainSync Client</title><link>https://ogmios.dev/typescript-client/chain-sync/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/typescript-client/chain-sync/</guid><description>The ChainSync client streams block from the network, one-by-one in the form of events. Creating such a client requires your application to register two callbacks:
on rollForward, to process new blocks coming in and advancing your local chain. on rollBackward, to process rollback requests to a previous point of your local chain. These callbacks are captured via the ChainSyncMessageHandlers interface.
For example, you can store blocks into a database (assuming some high-level db interface) as follows:</description></item><item><title>Local State Query</title><link>https://ogmios.dev/mini-protocols/local-state-query/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/mini-protocols/local-state-query/</guid><description>┌───────────────┐ ┌──────▶│ Idle │⇦ START │ └───┬───────────┘ │ │ ▲ │ Acquire │ │ Failure │ ▼ │ │ ┌───────────┴───┐ Release │ │ Acquiring │◀─────────────────┐ │ └───┬───────────┘ │ │ │ ▲ │ Result │ Acquired │ │ ReAcquire │ │ ▼ │ │ │ ┌───────────┴───┐ ┌────────┴───────┐ └───────┤ Acquired │────────▶│ Querying │ └───────────────┘ Query └────────────────┘ Overview The state query protocol is likely the most versatile of the three Ouroboros mini-protocols.</description></item><item><title>Local Tx Submission</title><link>https://ogmios.dev/mini-protocols/local-tx-submission/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/mini-protocols/local-tx-submission/</guid><description>┌──────────┐ │ Busy │◀═══════════════════════════════════════╗ └────┬─────┘ SubmitTx / EvaluateTx ║ │ ║ │ ┌──────────┐ │ │ │ │ │ │ │ SubmitTxResponse / EvaluateTxResponse │ Idle │ └────────────────────────────────────────▶│ │ │ │⇦ START └──────────┘ Overview Transaction submission is pretty simple &amp;amp; works by submitting an already serialized and signed transaction as one single message.
In case of success, Ogmios / the node returns an empty response. Otherwise, it returns an error with some details about what went wrong.</description></item><item><title>StateQuery Client</title><link>https://ogmios.dev/typescript-client/state-query/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/typescript-client/state-query/</guid><description>The StateQuery client allows you to play with the Local State Query mini protocol; that is, a protocol for querying parts of the ledger state. The complete set of queries is described in the documentation. To use it, create a client from a context and start querying!
import { createStateQueryClient } from &amp;#39;@cardano-ogmios/client&amp;#39; const client = await createStateQueryClient(context) console.log(`ledgerTip: ${(await client.ledgerTip()).tip}`) // ledgerTip: {&amp;#34;slot&amp;#34;:33055551,&amp;#34;hash&amp;#34;:&amp;#34;050b05030645fdc4ee10e81f131030049c08f7763355873564540fe5a0533f43&amp;#34;} console.log(`currentEpoch: ${await client.currentEpoch()}`) // currentEpoch: 146 await client.</description></item><item><title>Testing</title><link>https://ogmios.dev/getting-started/testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/getting-started/testing/</guid><description>You may skip this section if you&amp;rsquo;re not interested in contributing to Ogmios.
🔧 Unit Tests First, make sure to pull and update git submodules:
$ git submodule update --init Then, simply use stack as follows:
$ stack test ogmios:unit 💨 Smoke Tests Run the whole components stack using docker-compose as follows:
$ docker-compose up Assuming the default configuration, Ogmios should be listening on :1337. Make sure that cardano-node is up-and-running and has finished its bootstraping phase (Ogmios should no longer print any warnings about HealthFailedToConnect).</description></item><item><title>Local Tx Monitor</title><link>https://ogmios.dev/mini-protocols/local-tx-monitor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/mini-protocols/local-tx-monitor/</guid><description>START ⇓ ┌───────────────┐ ┌──────▶ │ Idle │⇒ DONE │ └───────┬───────┘ │ │ │ AwaitAcquire │ │ │ │ ▼ │ ┌───────────────┐ ReleaseMempool │ │ Acquiring │ │ └───┬───────────┘ │ │ ▲ │ Acquired │ │ │ │ │ AwaitAcquire │ ▼ │ │ ┌───────────┴───┐ └────────┤ Acquired │ └───┬───────────┘ │ ▲ HasTx|NextTx|SizeAndCapacity │ │ Reply (HasTx|NextTx|SizeAndCapacity) ▼ │ ┌───────────┴───┐ │ Busy │ └───────────────┘ Overview To inspect the node&amp;rsquo;s local mempool, one may rely on the local-tx-monitor mini-protocol.</description></item><item><title>Monitoring</title><link>https://ogmios.dev/getting-started/monitoring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/getting-started/monitoring/</guid><description>Dashboard Ogmios offers a simple dashboard through HTTP with a real-time visualization of some of the server runtime metrics. If you&amp;rsquo;ve Ogmios up-and-running on the default port, visit http://localhost:1337 to view Ogmios' dashboard.
Health / Metrics Behind the scene, the dashboard is powered by metrics served over HTTP as JSON by the server. Reach /health (e.g. http://localhost:1337/health to get real-time information about your running server, including runtime metrics.
$ curl -H 'Accept: application/json' http://localhost:1337/health { &amp;#34;metrics&amp;#34;: { &amp;#34;totalUnrouted&amp;#34;: 1, &amp;#34;totalMessages&amp;#34;: 30029, &amp;#34;runtimeStats&amp;#34;: { &amp;#34;gcCpuTime&amp;#34;: 1233009354, &amp;#34;cpuTime&amp;#34;: 81064672549, &amp;#34;maxHeapSize&amp;#34;: 41630, &amp;#34;currentHeapSize&amp;#34;: 1014 }, &amp;#34;totalConnections&amp;#34;: 10, &amp;#34;sessionDurations&amp;#34;: { &amp;#34;max&amp;#34;: 57385, &amp;#34;mean&amp;#34;: 7057, &amp;#34;min&amp;#34;: 0 }, &amp;#34;activeConnections&amp;#34;: 0 }, &amp;#34;startTime&amp;#34;: &amp;#34;2021-03-15T16:16:41.</description></item><item><title>TxSubmission Client</title><link>https://ogmios.dev/typescript-client/tx-submission/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/typescript-client/tx-submission/</guid><description>Similarly to the other two clients, a TxSubmissionClient can be created from an InteractionContext (see the Overview section for more details).
Once created, it allows for submitting already serialized transactions to the network. The format it accepts is a CBOR-serialized Cardano transaction, as obtained from the cardano-cli or the cardano-serialization-lib, in either base16 or base64.
In case of success, the transaction is submitted to the network and should eventually be inserted in the ledger.</description></item><item><title>Basics</title><link>https://ogmios.dev/getting-started/basics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/getting-started/basics/</guid><description>JSON-WSP Ogmios' interface is built on top of JSON-WSP which is a tiny standard to give some structure to the various messages that can be exchanged with Ogmios. The standard specifies a top-level JSON envelope by which messages must abide, as well as a semantic for some of the fields. In particular, there are 4 types of messages possible in JSON-WSP:
descriptions requests responses faults (which are a special kind of responses).</description></item></channel></rss>