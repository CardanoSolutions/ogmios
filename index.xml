<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Overview on Ogmios</title><link>https://ogmios.dev/</link><description>Recent content in Overview on Ogmios</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 25 Oct 2020 16:33:22 +0100</lastBuildDate><atom:link href="https://ogmios.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Building / Installation</title><link>https://ogmios.dev/getting-started/building/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/getting-started/building/</guid><description>You may skip this section if you&amp;rsquo;re using Docker 🐳.
With Homebrew Ogmios is readily available and distributed through Homebrew. Simply do:
brew tap CardanoSolutions/formulas brew install ogmios Pre-compiled static executable All Ogmios releases comes with downloadable pre-compiled static executables for Linux (amd64 &amp;amp; arm64). If you like living on the edge and wants to access a not-yet-released executable, see the continuous integration workflow on Github. Build artifacts are indeed continuously produced though this automated workflow.</description></item><item><title>Chain synchronization</title><link>https://ogmios.dev/mini-protocols/local-chain-sync/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/mini-protocols/local-chain-sync/</guid><description>START ⇓ ┌───────────────┐ │ Idle │⇒ DONE └───────┬───────┘ │ │ findIntersection │ │ │ findIntersection │ ╭───────╮ ▼ │ │ ┌───────────┴───┐ │ │ Initialized │◀──╯ └───┬───────────┘ │ ▲ nextBlock │ │ ╰───────╯ Overview Clients that wish to synchronise blocks from the Cardano chain can use the chain synchronization mini-protocol.
The protocol is stateful, which means that each connection between clients and Ogmios has a state: a cursor locating a point on the chain.</description></item><item><title>Configuring</title><link>https://ogmios.dev/getting-started/configuring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/getting-started/configuring/</guid><description>Ogmios comes with a few options that are all configurable via the command-line. Default values for those options are meant to provide sensible behaviors that are expected in most cases. However, some cases may not fit your particular use-case so we recommend skimming through this short manual to understand what is configurable and the effect it has on the server.
Logging &amp;amp; minimum severity levels Ogmios comes with a multi-component tracing system, which lets you configure the minimum logging severity of various internal components:</description></item><item><title>Ledger state queries</title><link>https://ogmios.dev/mini-protocols/local-state-query/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/mini-protocols/local-state-query/</guid><description>queryLedgerState/* START queryNetwork/* ⇓ ╭────╮ releaseLedgerState ┌──────────────┴┐ │ ╭─────▶│ Idle │◀──╯ │ └───────┬───────┘ │ │ │ │ acquireLedgerState │ │ │ │ (re)acquireLedgerState │ ▼ ╭────────╮ │ ┌──────────┴────┐ │ ╰──────┤ Acquired │◀──╯ └───┬───────────┘ │ ▲ queryLedgerState/* │ │ queryNetwork/* │ │ ╰───────╯ Overview The state query protocol is likely the most versatile of the three Ouroboros mini-protocols. As a matter of fact, it allows for querying various types of information directly from the ledger.</description></item><item><title>Running with Docker</title><link>https://ogmios.dev/getting-started/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/getting-started/docker/</guid><description>🐳 Overview The easiest way to get started with Ogmios is to use docker. This guide won&amp;rsquo;t cover installing docker, so make sure you have the Docker daemon installed and running.
Ogmios docker images come in two flavours: cardano-node-ogmios and ogmios. The former is used to run a single container that bundles both a Cardano-node and an Ogmios server running side-by-side. It is likely the easiest way to get started. The latter is a standalone Ogmios server, and you&amp;rsquo;ll need to run that container in orchestration with a cardano-node; this is made relatively easy with Docker compose.</description></item><item><title>Transaction submission</title><link>https://ogmios.dev/mini-protocols/local-tx-submission/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/mini-protocols/local-tx-submission/</guid><description>submitTransaction ╭────────╮ START │ │ ⇓ │ │ ┌────────────┴───┐ │ ╭──────┤ Idle │◀───╯ │ └────────────────┘ │ ▲ │ │ ╰────────╯ evaluateTransaction Overview Transaction submission is pretty simple &amp;amp; works by submitting an already serialized and signed transaction as one single message.
In case of success, Ogmios / the node returns an empty response. Otherwise, it returns an error with some details about what went wrong. Clients must thereby know how to construct valid transactions.</description></item><item><title>Mempool monitoring</title><link>https://ogmios.dev/mini-protocols/local-tx-monitor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/mini-protocols/local-tx-monitor/</guid><description>START ⇓ releaseMempool ┌───────────────┐ ╭─────▶│ Idle │⇒ DONE │ └───────┬───────┘ │ │ │ │ acquireMempool │ │ │ │ │ │ (re)acquireMempool │ │ ╭───────╮ │ ▼ │ │ │ ┌───────────┴───┐ │ ╰──────┤ Acquired │◀──╯ └───┬───────────┘ │ ▲ nextTransaction │ │ hasTransaction │ │ sizeOfMempool │ │ ╰───────╯ Overview To inspect the node&amp;rsquo;s local mempool, one may rely on the mempool monitoring mini-protocol. This protocol provides way to list all transactions sitting in the mempool, but also, to query the size of the mempool, the number of transactions currently in the mempool as well as the current capacity (based on network parameters).</description></item><item><title>Monitoring</title><link>https://ogmios.dev/getting-started/monitoring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/getting-started/monitoring/</guid><description>Dashboard Ogmios offers a simple dashboard through HTTP with a real-time visualization of some of the server runtime metrics. If you&amp;rsquo;ve Ogmios up-and-running on the default port, visit http://localhost:1337 to view Ogmios' dashboard.
Health / Metrics Behind the scene, the dashboard is powered by metrics served over HTTP as JSON by the server. Reach /health (e.g. http://localhost:1337/health to get real-time information about your running server, including runtime metrics.
$ curl -H 'Accept: application/json' http://localhost:1337/health { &amp;#34;metrics&amp;#34;: { &amp;#34;totalUnrouted&amp;#34;: 1, &amp;#34;totalMessages&amp;#34;: 30029, &amp;#34;runtimeStats&amp;#34;: { &amp;#34;gcCpuTime&amp;#34;: 1233009354, &amp;#34;cpuTime&amp;#34;: 81064672549, &amp;#34;maxHeapSize&amp;#34;: 41630, &amp;#34;currentHeapSize&amp;#34;: 1014 }, &amp;#34;totalConnections&amp;#34;: 10, &amp;#34;sessionDurations&amp;#34;: { &amp;#34;max&amp;#34;: 57385, &amp;#34;mean&amp;#34;: 7057, &amp;#34;min&amp;#34;: 0 }, &amp;#34;activeConnections&amp;#34;: 0 }, &amp;#34;startTime&amp;#34;: &amp;#34;2021-03-15T16:16:41.</description></item><item><title>Using: JSON-RPC basics</title><link>https://ogmios.dev/getting-started/basics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/getting-started/basics/</guid><description>JSON-RPC Ogmios' interface is built on top of JSON-RPC 2.0 which is a tiny standard to give some structure to the various messages that can be exchanged with Ogmios. The standard specifies a top-level JSON envelope by which messages must abide, as well as a semantic for some of the fields. It well suited for request/response types of protocols, such as any of the Ouroboros mini-protocols spoken by Ogmios.
We won&amp;rsquo;t be covering the JSON-RPC standard in this guide but gives a few extra insights about how it relates to Ogmios and some good takes from it.</description></item><item><title>Archive (v6.8.*)</title><link>https://ogmios.dev/api/v6.8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/api/v6.8/</guid><description/></item><item><title>Archive (v6.7.*)</title><link>https://ogmios.dev/api/v6.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/api/v6.7/</guid><description/></item><item><title>Archive (v6.6.*)</title><link>https://ogmios.dev/api/v6.6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/api/v6.6/</guid><description/></item><item><title>Archive (v6.5.*)</title><link>https://ogmios.dev/api/v6.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/api/v6.5/</guid><description/></item><item><title>Archive (v6.4.*)</title><link>https://ogmios.dev/api/v6.4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/api/v6.4/</guid><description/></item><item><title>Archive (v6.3.*)</title><link>https://ogmios.dev/api/v6.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/api/v6.3/</guid><description/></item><item><title>Archive (v6.2.*)</title><link>https://ogmios.dev/api/v6.2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/api/v6.2/</guid><description/></item><item><title>Archive (v6.1.*)</title><link>https://ogmios.dev/api/v6.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/api/v6.1/</guid><description/></item><item><title>Archive (v6.0.*)</title><link>https://ogmios.dev/api/v6.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/api/v6.0/</guid><description/></item><item><title>Archive (v5.6.*)</title><link>https://ogmios.dev/api/v5.6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/api/v5.6/</guid><description/></item></channel></rss>