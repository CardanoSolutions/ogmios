<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Overview on Ogmios</title><link>https://ktorz.github.io/cardano-ogmios/</link><description>Recent content in Overview on Ogmios</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 25 Oct 2020 16:33:22 +0100</lastBuildDate><atom:link href="https://ktorz.github.io/cardano-ogmios/index.xml" rel="self" type="application/rss+xml"/><item><title>AWS</title><link>https://ktorz.github.io/cardano-ogmios/deployment/aws/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ktorz.github.io/cardano-ogmios/deployment/aws/</guid><description>Pre-Requisites Make sure to have an AWS account, and an AWS_ACCESS_KEY_ID &amp;amp; AWS_SECRET_ACCESS_KEY.
Make sure to grant AmazonEC2FullAccess to your AWS user.
You&amp;rsquo;ll need to create a security group which allows inbound TCP connections. See also: Working With Security Groups.
Install docker-machine
Create an SSH key/pair $ ssh-keygen -t rsa -b 4096 -C &amp;quot;your_email@example.com&amp;quot; -f aws_rsa $ eval &amp;quot;$(ssh-agent -s)&amp;quot; $ ssh-add ~/.</description></item><item><title>Docker</title><link>https://ktorz.github.io/cardano-ogmios/getting-started/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ktorz.github.io/cardano-ogmios/getting-started/docker/</guid><description>🐳 The easiest way to get started is to use docker. This guide won&amp;rsquo;t cover installing docker, so make sure you have the docker daemon installed and running. Since Ogmios requires the presence of a Cardano node, we&amp;rsquo;ll be using docker-compose to orchestrate both services. A compose file is available on the Ogmios repository, get it via:
$ wget https://raw.githubusercontent.com/KtorZ/cardano-ogmios/master/docker-compose.yml -O docker-compose.yml Then, starts the components stack using:
$ docker-compose up 👆This will run and connect together:</description></item><item><title>Local Chain Sync</title><link>https://ktorz.github.io/cardano-ogmios/mini-protocols/local-chain-sync/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ktorz.github.io/cardano-ogmios/mini-protocols/local-chain-sync/</guid><description>*-----------* | Intersect |◀══════════════════════════════╗ *-----------* FindIntersect ║ │ ║ │ *---------* │ Intersect.{Found,NotFound} | | └───────────────────────────────╼| | | Idle | ╔═══════════════════════════════════| | ║ RequestNext | |⇦ START ║ *---------* ▼ ╿ *------* Roll.{Backward,Forward} │ | Next |────────────────────────────────────┘ *------* Overview Clients that wish to synchronise blocks from the Cardano chain can use the Local Chain Sync protocol.
The protocol is stateful, which means that each connection between clients and Ogmios has a state: a cursor locating a point on the chain.</description></item><item><title>Building</title><link>https://ktorz.github.io/cardano-ogmios/getting-started/building/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ktorz.github.io/cardano-ogmios/getting-started/building/</guid><description>You may skip this section if you&amp;rsquo;re using Docker 🐳.
Pre-requisites Ogmios is built using the great Haskell build tool stack. You&amp;rsquo;ll also need git to clone the source code, that is:
git 2.11.* stack 2.*.* Ogmios in itself is a rather small project, yet it&amp;rsquo;s using library directly from the ouroboros-network, cardano-ledger-specs and cardano-node projects. This is handy for re-using existing logic, but comes at the cost of several system dependencies that are required for building everything.</description></item><item><title>Local Tx Submission</title><link>https://ktorz.github.io/cardano-ogmios/mini-protocols/local-tx-submission/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ktorz.github.io/cardano-ogmios/mini-protocols/local-tx-submission/</guid><description>Overview *----------* | Busy |◀══════════════════════════════╗ *----------* SubmitTx ║ │ ║ │ *---------* │ | | │ | | │ SubmitTxResponse | Idle | └───────────────────────────────╼| | | |⇦ START *---------* Transaction submission is pretty simple &amp;amp; works by submitting an already serialized and signed transaction as one single message.
In case of success, Ogmios / the node returns an empty response. Otherwise, it returns an error with some details about what went wrong.</description></item><item><title>Local State Query</title><link>https://ktorz.github.io/cardano-ogmios/mini-protocols/local-state-query/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ktorz.github.io/cardano-ogmios/mini-protocols/local-state-query/</guid><description>Overview 🚧 Coming Soon 🚧</description></item><item><title>Testing</title><link>https://ktorz.github.io/cardano-ogmios/getting-started/testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ktorz.github.io/cardano-ogmios/getting-started/testing/</guid><description> You may skip this section if you&amp;rsquo;re not interested in contributing to Ogmios.
🔧 Unit Tests First, make sure to pull and update git submodules:
$ git submodule update --init Then, simply use stack as follows:
$ stack test ogmios:unit 💨 Smoke Tests Run the whole components stack using docker-compose as follows:
$ docker-compose up To tear down, press CTRL+C and then run:
$ docker-compose down</description></item><item><title>Basics</title><link>https://ktorz.github.io/cardano-ogmios/getting-started/basics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ktorz.github.io/cardano-ogmios/getting-started/basics/</guid><description>JSON-WSP Ogmios' interface is built on top of JSON-WSP which is a tiny standard to give some structure to the various messages that can be exchanged with Ogmios. The standard specifies a top-level JSON envelope by which messages must abide, as well as a semantic for some of the fields. In particular, there are 4 types of messages possible in JSON-WSP:
descriptions requests responses faults (which are a special kind of responses).</description></item></channel></rss>