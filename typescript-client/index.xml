<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TypeScript Client on Ogmios</title><link>https://ogmios.dev/typescript-client/</link><description>Recent content in TypeScript Client on Ogmios</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://ogmios.dev/typescript-client/index.xml" rel="self" type="application/rss+xml"/><item><title>Overview</title><link>https://ogmios.dev/typescript-client/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/typescript-client/overview/</guid><description>Overview The TypeScript client for Ogmios is available on npm:
$ yarn add @cardano-ogmios/client It provides a fully typed interface for interacting with Ogmios as well as many convenient functions to manage WebSocket connections and drive the Ouroboros mini-protocols.
The package is divided into a few modules: one per Ouroboros mini-protocols and some for managing WebSocket connections or utils. Let&amp;rsquo;s start with the Connection module which is a necessary step regardless of which protocol you&amp;rsquo;ll then use.</description></item><item><title>ChainSync Client</title><link>https://ogmios.dev/typescript-client/chain-sync/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/typescript-client/chain-sync/</guid><description>The ChainSync client streams block from the network, one-by-one in the form of events. Creating such a client requires your application to register two callbacks:
on rollForward, to process new blocks coming in and advancing your local chain. on rollBackward, to process rollback requests to a previous point of your local chain. These callbacks are captured via the ChainSyncMessageHandlers interface.
For example, you can store blocks into a database (assuming some high-level db interface) as follows:</description></item><item><title>StateQuery Client</title><link>https://ogmios.dev/typescript-client/state-query/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/typescript-client/state-query/</guid><description>The StateQuery client allows you to play with the Local State Query mini protocol; that is, a protocol for querying parts of the ledger state. The complete set of queries is described in API reference. To use it, create a client from a context and start querying!
import { createStateQueryClient } from &amp;#39;@cardano-ogmios/client&amp;#39; const client = await createStateQueryClient(context) console.log(`ledgerTip: ${(await client.ledgerTip()).tip}`) // ledgerTip: {&amp;#34;slot&amp;#34;:33055551,&amp;#34;hash&amp;#34;:&amp;#34;050b05030645fdc4ee10e81f131030049c08f7763355873564540fe5a0533f43&amp;#34;} console.log(`currentEpoch: ${await client.currentEpoch()}`) // currentEpoch: 146 await client.</description></item><item><title>TxSubmission Client</title><link>https://ogmios.dev/typescript-client/tx-submission/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/typescript-client/tx-submission/</guid><description>Similarly to the other two clients, a TxSubmissionClient can be created from an InteractionContext (see the Overview section for more details).
Once created, it allows for submitting already serialized transactions to the network. The format it accepts is a CBOR-serialized Cardano transaction, as obtained from the cardano-cli or the cardano-serialization-lib, in either base16 or base64.
In case of success, the transaction is submitted to the network and should eventually be inserted in the ledger.</description></item><item><title>TxMonitor Client</title><link>https://ogmios.dev/typescript-client/tx-monitor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ogmios.dev/typescript-client/tx-monitor/</guid><description>As described in the Local Tx Monitor user guide, Ogmios gives ways to inspect the attached node&amp;rsquo;s mempool. A new TxMonitorClient can be created using an interaction context and be used to run many queries.
Note that all queries are blocking on this client and in particular, the awaitAcquire query. The latter will only return once a new snapshot (that is, different from the one currently acquired, if any) can be acquired.</description></item></channel></rss>