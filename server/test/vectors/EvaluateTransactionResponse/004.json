{"jsonrpc":"2.0","method":"evaluateTransaction","error":{"code":3010,"message":"Some scripts of the transactions terminated with error(s).","data":[{"validator":"mint:0","error":{"code":3117,"message":"The transaction contains unknown UTxO references as inputs. This can happen if the inputs you're trying to spend have already been spent, or if you've simply referred to non-existing UTxO altogether. The field 'data.unknownOutputReferences' indicates all unknown inputs.","data":{"unknownOutputReferences":[{"transaction":{"id":"3d4fbce53b0798ab21e7a7ca169190188f9fe6fc7d53ee15f73998a4f8d41d84"},"index":4}]}}},{"validator":"certificate:3","error":{"code":3115,"message":"It seems like the transaction is using a Plutus version for which there's no available cost model yet. This could be because that language version is known of the ledger but hasn't yet been enabled through hard-fork. The field 'data.missingCostModels' lists all the languages for which a cost model is missing.","data":{"missingCostModels":["plutus:v1"]}}},{"validator":"withdrawal:2","error":{"code":3013,"message":"A redeemer points to an input that isn't locked by a Plutus script. Double-check your redeemer pointers and note that, inputs are ordered lexicographically by the ledger (using their transaction id and output index). This order may differ from the one you originally defined in your transaction and may be the cause of misalignment of your redeemer pointers. The field 'data.unsuitableOutputReference' indicates which input was wrongly targeted by a redeemer.","data":{"unsuitableOutputReference":{"transaction":{"id":"1138ba45e528a67331e9b56936f1c2149ca9534acbb404a4fcdf9ebc3076a820"},"index":2}}}}]},"id":null}